
freeRTOS_test01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000509c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800524c  0800524c  0001524c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005338  08005338  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005338  08005338  00015338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005340  08005340  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005340  08005340  00015340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005344  08005344  00015344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005348  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004508  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000457c  2000457c  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015f33  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c54  00000000  00000000  00035fd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001028  00000000  00000000  00038c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f20  00000000  00000000  00039c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004222  00000000  00000000  0003ab78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011d4d  00000000  00000000  0003ed9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4b1a  00000000  00000000  00050ae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00135601  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000049d4  00000000  00000000  00135654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005234 	.word	0x08005234

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08005234 	.word	0x08005234

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b5b0      	push	{r4, r5, r7, lr}
 80004f6:	b08e      	sub	sp, #56	; 0x38
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fd09 	bl	8000f10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f841 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f94f 	bl	80007a4 <MX_GPIO_Init>
  MX_ETH_Init();
 8000506:	f000 f8a7 	bl	8000658 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800050a:	f000 f8f3 	bl	80006f4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800050e:	f000 f91b 	bl	8000748 <MX_USB_OTG_FS_PCD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000512:	4b17      	ldr	r3, [pc, #92]	; (8000570 <main+0x7c>)
 8000514:	f107 041c 	add.w	r4, r7, #28
 8000518:	461d      	mov	r5, r3
 800051a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800051c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800051e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000522:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000526:	f107 031c 	add.w	r3, r7, #28
 800052a:	2100      	movs	r1, #0
 800052c:	4618      	mov	r0, r3
 800052e:	f003 f8a5 	bl	800367c <osThreadCreate>
 8000532:	4603      	mov	r3, r0
 8000534:	4a0f      	ldr	r2, [pc, #60]	; (8000574 <main+0x80>)
 8000536:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 8000538:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <main+0x84>)
 800053a:	463c      	mov	r4, r7
 800053c:	461d      	mov	r5, r3
 800053e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000540:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000542:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000546:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800054a:	463b      	mov	r3, r7
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f003 f894 	bl	800367c <osThreadCreate>
 8000554:	4603      	mov	r3, r0
 8000556:	4a09      	ldr	r2, [pc, #36]	; (800057c <main+0x88>)
 8000558:	6013      	str	r3, [r2, #0]

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1){
	  i++;
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <main+0x8c>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	3301      	adds	r3, #1
 8000560:	4a07      	ldr	r2, [pc, #28]	; (8000580 <main+0x8c>)
 8000562:	6013      	str	r3, [r2, #0]
	  HAL_Delay(500);
 8000564:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000568:	f000 fd44 	bl	8000ff4 <HAL_Delay>
	  i++;
 800056c:	e7f5      	b.n	800055a <main+0x66>
 800056e:	bf00      	nop
 8000570:	08005264 	.word	0x08005264
 8000574:	20000808 	.word	0x20000808
 8000578:	08005280 	.word	0x08005280
 800057c:	2000080c 	.word	0x2000080c
 8000580:	20000810 	.word	0x20000810

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b094      	sub	sp, #80	; 0x50
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	2230      	movs	r2, #48	; 0x30
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f004 fa3f 	bl	8004a16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a8:	2300      	movs	r3, #0
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	4b28      	ldr	r3, [pc, #160]	; (8000650 <SystemClock_Config+0xcc>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	4a27      	ldr	r2, [pc, #156]	; (8000650 <SystemClock_Config+0xcc>)
 80005b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b6:	6413      	str	r3, [r2, #64]	; 0x40
 80005b8:	4b25      	ldr	r3, [pc, #148]	; (8000650 <SystemClock_Config+0xcc>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	4b22      	ldr	r3, [pc, #136]	; (8000654 <SystemClock_Config+0xd0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a21      	ldr	r2, [pc, #132]	; (8000654 <SystemClock_Config+0xd0>)
 80005ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005d2:	6013      	str	r3, [r2, #0]
 80005d4:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <SystemClock_Config+0xd0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e0:	2301      	movs	r3, #1
 80005e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ea:	2302      	movs	r3, #2
 80005ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005f4:	2304      	movs	r3, #4
 80005f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005f8:	23a8      	movs	r3, #168	; 0xa8
 80005fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000600:	2307      	movs	r3, #7
 8000602:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000604:	f107 0320 	add.w	r3, r7, #32
 8000608:	4618      	mov	r0, r3
 800060a:	f001 fc21 	bl	8001e50 <HAL_RCC_OscConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000614:	f000 f99e 	bl	8000954 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000618:	230f      	movs	r3, #15
 800061a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061c:	2302      	movs	r3, #2
 800061e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000624:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000628:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800062a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2105      	movs	r1, #5
 8000636:	4618      	mov	r0, r3
 8000638:	f001 fe82 	bl	8002340 <HAL_RCC_ClockConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000642:	f000 f987 	bl	8000954 <Error_Handler>
  }
}
 8000646:	bf00      	nop
 8000648:	3750      	adds	r7, #80	; 0x50
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40023800 	.word	0x40023800
 8000654:	40007000 	.word	0x40007000

08000658 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800065c:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <MX_ETH_Init+0x84>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <MX_ETH_Init+0x88>)
 8000660:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000662:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <MX_ETH_Init+0x8c>)
 8000664:	2200      	movs	r2, #0
 8000666:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000668:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <MX_ETH_Init+0x8c>)
 800066a:	2280      	movs	r2, #128	; 0x80
 800066c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800066e:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <MX_ETH_Init+0x8c>)
 8000670:	22e1      	movs	r2, #225	; 0xe1
 8000672:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000674:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <MX_ETH_Init+0x8c>)
 8000676:	2200      	movs	r2, #0
 8000678:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800067a:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <MX_ETH_Init+0x8c>)
 800067c:	2200      	movs	r2, #0
 800067e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000680:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <MX_ETH_Init+0x8c>)
 8000682:	2200      	movs	r2, #0
 8000684:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <MX_ETH_Init+0x84>)
 8000688:	4a16      	ldr	r2, [pc, #88]	; (80006e4 <MX_ETH_Init+0x8c>)
 800068a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800068c:	4b13      	ldr	r3, [pc, #76]	; (80006dc <MX_ETH_Init+0x84>)
 800068e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000692:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_ETH_Init+0x84>)
 8000696:	4a14      	ldr	r2, [pc, #80]	; (80006e8 <MX_ETH_Init+0x90>)
 8000698:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <MX_ETH_Init+0x84>)
 800069c:	4a13      	ldr	r2, [pc, #76]	; (80006ec <MX_ETH_Init+0x94>)
 800069e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006a0:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_ETH_Init+0x84>)
 80006a2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80006a6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006a8:	480c      	ldr	r0, [pc, #48]	; (80006dc <MX_ETH_Init+0x84>)
 80006aa:	f000 fdad 	bl	8001208 <HAL_ETH_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80006b4:	f000 f94e 	bl	8000954 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006b8:	2238      	movs	r2, #56	; 0x38
 80006ba:	2100      	movs	r1, #0
 80006bc:	480c      	ldr	r0, [pc, #48]	; (80006f0 <MX_ETH_Init+0x98>)
 80006be:	f004 f9aa 	bl	8004a16 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <MX_ETH_Init+0x98>)
 80006c4:	2221      	movs	r2, #33	; 0x21
 80006c6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_ETH_Init+0x98>)
 80006ca:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80006ce:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <MX_ETH_Init+0x98>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000208 	.word	0x20000208
 80006e0:	40028000 	.word	0x40028000
 80006e4:	20000814 	.word	0x20000814
 80006e8:	20000168 	.word	0x20000168
 80006ec:	200000c8 	.word	0x200000c8
 80006f0:	20000090 	.word	0x20000090

080006f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 80006fa:	4a12      	ldr	r2, [pc, #72]	; (8000744 <MX_USART3_UART_Init+0x50>)
 80006fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006fe:	4b10      	ldr	r3, [pc, #64]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 8000700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000704:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 800071a:	220c      	movs	r2, #12
 800071c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 800072c:	f002 f828 	bl	8002780 <HAL_UART_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000736:	f000 f90d 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	200002b8 	.word	0x200002b8
 8000744:	40004800 	.word	0x40004800

08000748 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800074c:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800074e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000752:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000756:	2204      	movs	r2, #4
 8000758:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800075c:	2202      	movs	r2, #2
 800075e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000768:	2202      	movs	r2, #2
 800076a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800076e:	2201      	movs	r2, #1
 8000770:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077a:	2200      	movs	r2, #0
 800077c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000780:	2201      	movs	r2, #1
 8000782:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000786:	2200      	movs	r2, #0
 8000788:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078c:	f001 fa43 	bl	8001c16 <HAL_PCD_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000796:	f000 f8dd 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200002fc 	.word	0x200002fc

080007a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08c      	sub	sp, #48	; 0x30
 80007a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 031c 	add.w	r3, r7, #28
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	61bb      	str	r3, [r7, #24]
 80007be:	4b4c      	ldr	r3, [pc, #304]	; (80008f0 <MX_GPIO_Init+0x14c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a4b      	ldr	r2, [pc, #300]	; (80008f0 <MX_GPIO_Init+0x14c>)
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b49      	ldr	r3, [pc, #292]	; (80008f0 <MX_GPIO_Init+0x14c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0304 	and.w	r3, r3, #4
 80007d2:	61bb      	str	r3, [r7, #24]
 80007d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
 80007da:	4b45      	ldr	r3, [pc, #276]	; (80008f0 <MX_GPIO_Init+0x14c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a44      	ldr	r2, [pc, #272]	; (80008f0 <MX_GPIO_Init+0x14c>)
 80007e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b42      	ldr	r3, [pc, #264]	; (80008f0 <MX_GPIO_Init+0x14c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	4b3e      	ldr	r3, [pc, #248]	; (80008f0 <MX_GPIO_Init+0x14c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a3d      	ldr	r2, [pc, #244]	; (80008f0 <MX_GPIO_Init+0x14c>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b3b      	ldr	r3, [pc, #236]	; (80008f0 <MX_GPIO_Init+0x14c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	4b37      	ldr	r3, [pc, #220]	; (80008f0 <MX_GPIO_Init+0x14c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a36      	ldr	r2, [pc, #216]	; (80008f0 <MX_GPIO_Init+0x14c>)
 8000818:	f043 0302 	orr.w	r3, r3, #2
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b34      	ldr	r3, [pc, #208]	; (80008f0 <MX_GPIO_Init+0x14c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	4b30      	ldr	r3, [pc, #192]	; (80008f0 <MX_GPIO_Init+0x14c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a2f      	ldr	r2, [pc, #188]	; (80008f0 <MX_GPIO_Init+0x14c>)
 8000834:	f043 0308 	orr.w	r3, r3, #8
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b2d      	ldr	r3, [pc, #180]	; (80008f0 <MX_GPIO_Init+0x14c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	4b29      	ldr	r3, [pc, #164]	; (80008f0 <MX_GPIO_Init+0x14c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a28      	ldr	r2, [pc, #160]	; (80008f0 <MX_GPIO_Init+0x14c>)
 8000850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b26      	ldr	r3, [pc, #152]	; (80008f0 <MX_GPIO_Init+0x14c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f244 0181 	movw	r1, #16513	; 0x4081
 8000868:	4822      	ldr	r0, [pc, #136]	; (80008f4 <MX_GPIO_Init+0x150>)
 800086a:	f001 f9a1 	bl	8001bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2140      	movs	r1, #64	; 0x40
 8000872:	4821      	ldr	r0, [pc, #132]	; (80008f8 <MX_GPIO_Init+0x154>)
 8000874:	f001 f99c 	bl	8001bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000878:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800087e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	481b      	ldr	r0, [pc, #108]	; (80008fc <MX_GPIO_Init+0x158>)
 8000890:	f000 ffe2 	bl	8001858 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000894:	f244 0381 	movw	r3, #16513	; 0x4081
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4811      	ldr	r0, [pc, #68]	; (80008f4 <MX_GPIO_Init+0x150>)
 80008ae:	f000 ffd3 	bl	8001858 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008b2:	2340      	movs	r3, #64	; 0x40
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	480b      	ldr	r0, [pc, #44]	; (80008f8 <MX_GPIO_Init+0x154>)
 80008ca:	f000 ffc5 	bl	8001858 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008ce:	2380      	movs	r3, #128	; 0x80
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_GPIO_Init+0x154>)
 80008e2:	f000 ffb9 	bl	8001858 <HAL_GPIO_Init>

}
 80008e6:	bf00      	nop
 80008e8:	3730      	adds	r7, #48	; 0x30
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40020400 	.word	0x40020400
 80008f8:	40021800 	.word	0x40021800
 80008fc:	40020800 	.word	0x40020800

08000900 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8000908:	2180      	movs	r1, #128	; 0x80
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <StartDefaultTask+0x20>)
 800090c:	f001 f969 	bl	8001be2 <HAL_GPIO_TogglePin>
	  printf("default task \r\n");
 8000910:	4804      	ldr	r0, [pc, #16]	; (8000924 <StartDefaultTask+0x24>)
 8000912:	f004 f98b 	bl	8004c2c <puts>
	  osDelay(1000);
 8000916:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800091a:	f002 fefb 	bl	8003714 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 800091e:	e7f3      	b.n	8000908 <StartDefaultTask+0x8>
 8000920:	40020400 	.word	0x40020400
 8000924:	0800529c 	.word	0x0800529c

08000928 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000930:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000934:	4805      	ldr	r0, [pc, #20]	; (800094c <StartTask02+0x24>)
 8000936:	f001 f954 	bl	8001be2 <HAL_GPIO_TogglePin>
	  printf("second task \r\n");
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <StartTask02+0x28>)
 800093c:	f004 f976 	bl	8004c2c <puts>
	  osDelay(5000);
 8000940:	f241 3088 	movw	r0, #5000	; 0x1388
 8000944:	f002 fee6 	bl	8003714 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000948:	e7f2      	b.n	8000930 <StartTask02+0x8>
 800094a:	bf00      	nop
 800094c:	40020400 	.word	0x40020400
 8000950:	080052ac 	.word	0x080052ac

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
}
 800095a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095c:	e7fe      	b.n	800095c <Error_Handler+0x8>

0800095e <_isatty>:
  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
}

int _isatty(int fd) {
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2b00      	cmp	r3, #0
 800096a:	db04      	blt.n	8000976 <_isatty+0x18>
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2b02      	cmp	r3, #2
 8000970:	dc01      	bgt.n	8000976 <_isatty+0x18>
    return 1;
 8000972:	2301      	movs	r3, #1
 8000974:	e005      	b.n	8000982 <_isatty+0x24>

  errno = EBADF;
 8000976:	f003 ff2b 	bl	80047d0 <__errno>
 800097a:	4603      	mov	r3, r0
 800097c:	2209      	movs	r2, #9
 800097e:	601a      	str	r2, [r3, #0]
  return 0;
 8000980:	2300      	movs	r3, #0
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <_write>:

int _write(int fd, char* ptr, int len) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d002      	beq.n	80009a4 <_write+0x18>
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	2b02      	cmp	r3, #2
 80009a2:	d111      	bne.n	80009c8 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80009a4:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <_write+0x54>)
 80009a6:	6818      	ldr	r0, [r3, #0]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	b29a      	uxth	r2, r3
 80009ac:	f04f 33ff 	mov.w	r3, #4294967295
 80009b0:	68b9      	ldr	r1, [r7, #8]
 80009b2:	f001 ff32 	bl	800281a <HAL_UART_Transmit>
 80009b6:	4603      	mov	r3, r0
 80009b8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80009ba:	7dfb      	ldrb	r3, [r7, #23]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d101      	bne.n	80009c4 <_write+0x38>
      return len;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	e008      	b.n	80009d6 <_write+0x4a>
    else
      return EIO;
 80009c4:	2305      	movs	r3, #5
 80009c6:	e006      	b.n	80009d6 <_write+0x4a>
  }
  errno = EBADF;
 80009c8:	f003 ff02 	bl	80047d0 <__errno>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2209      	movs	r2, #9
 80009d0:	601a      	str	r2, [r3, #0]
  return -1;
 80009d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3718      	adds	r7, #24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	2000081c 	.word	0x2000081c

080009e4 <_close>:

int _close(int fd) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	db04      	blt.n	80009fc <_close+0x18>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	dc01      	bgt.n	80009fc <_close+0x18>
    return 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	e006      	b.n	8000a0a <_close+0x26>

  errno = EBADF;
 80009fc:	f003 fee8 	bl	80047d0 <__errno>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2209      	movs	r2, #9
 8000a04:	601a      	str	r2, [r3, #0]
  return -1;
 8000a06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b084      	sub	sp, #16
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	60f8      	str	r0, [r7, #12]
 8000a1a:	60b9      	str	r1, [r7, #8]
 8000a1c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000a1e:	f003 fed7 	bl	80047d0 <__errno>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2209      	movs	r2, #9
 8000a26:	601a      	str	r2, [r3, #0]
  return -1;
 8000a28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <_read>:

int _read(int fd, char* ptr, int len) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d110      	bne.n	8000a68 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <_read+0x4c>)
 8000a48:	6818      	ldr	r0, [r3, #0]
 8000a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4e:	2201      	movs	r2, #1
 8000a50:	68b9      	ldr	r1, [r7, #8]
 8000a52:	f001 ff74 	bl	800293e <HAL_UART_Receive>
 8000a56:	4603      	mov	r3, r0
 8000a58:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000a5a:	7dfb      	ldrb	r3, [r7, #23]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d101      	bne.n	8000a64 <_read+0x30>
      return 1;
 8000a60:	2301      	movs	r3, #1
 8000a62:	e008      	b.n	8000a76 <_read+0x42>
    else
      return EIO;
 8000a64:	2305      	movs	r3, #5
 8000a66:	e006      	b.n	8000a76 <_read+0x42>
  }
  errno = EBADF;
 8000a68:	f003 feb2 	bl	80047d0 <__errno>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2209      	movs	r2, #9
 8000a70:	601a      	str	r2, [r3, #0]
  return -1;
 8000a72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	2000081c 	.word	0x2000081c

08000a84 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	db08      	blt.n	8000aa6 <_fstat+0x22>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2b02      	cmp	r3, #2
 8000a98:	dc05      	bgt.n	8000aa6 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aa0:	605a      	str	r2, [r3, #4]
    return 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	e005      	b.n	8000ab2 <_fstat+0x2e>
  }

  errno = EBADF;
 8000aa6:	f003 fe93 	bl	80047d0 <__errno>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2209      	movs	r2, #9
 8000aae:	601a      	str	r2, [r3, #0]
  return 0;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_MspInit+0x54>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	4a11      	ldr	r2, [pc, #68]	; (8000b10 <HAL_MspInit+0x54>)
 8000acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <HAL_MspInit+0x54>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <HAL_MspInit+0x54>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <HAL_MspInit+0x54>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <HAL_MspInit+0x54>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	210f      	movs	r1, #15
 8000afe:	f06f 0001 	mvn.w	r0, #1
 8000b02:	f000 fb58 	bl	80011b6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800

08000b14 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08e      	sub	sp, #56	; 0x38
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a55      	ldr	r2, [pc, #340]	; (8000c88 <HAL_ETH_MspInit+0x174>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	f040 80a4 	bne.w	8000c80 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b38:	2300      	movs	r3, #0
 8000b3a:	623b      	str	r3, [r7, #32]
 8000b3c:	4b53      	ldr	r3, [pc, #332]	; (8000c8c <HAL_ETH_MspInit+0x178>)
 8000b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b40:	4a52      	ldr	r2, [pc, #328]	; (8000c8c <HAL_ETH_MspInit+0x178>)
 8000b42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b46:	6313      	str	r3, [r2, #48]	; 0x30
 8000b48:	4b50      	ldr	r3, [pc, #320]	; (8000c8c <HAL_ETH_MspInit+0x178>)
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b50:	623b      	str	r3, [r7, #32]
 8000b52:	6a3b      	ldr	r3, [r7, #32]
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
 8000b58:	4b4c      	ldr	r3, [pc, #304]	; (8000c8c <HAL_ETH_MspInit+0x178>)
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5c:	4a4b      	ldr	r2, [pc, #300]	; (8000c8c <HAL_ETH_MspInit+0x178>)
 8000b5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b62:	6313      	str	r3, [r2, #48]	; 0x30
 8000b64:	4b49      	ldr	r3, [pc, #292]	; (8000c8c <HAL_ETH_MspInit+0x178>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b6c:	61fb      	str	r3, [r7, #28]
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	2300      	movs	r3, #0
 8000b72:	61bb      	str	r3, [r7, #24]
 8000b74:	4b45      	ldr	r3, [pc, #276]	; (8000c8c <HAL_ETH_MspInit+0x178>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b78:	4a44      	ldr	r2, [pc, #272]	; (8000c8c <HAL_ETH_MspInit+0x178>)
 8000b7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b80:	4b42      	ldr	r3, [pc, #264]	; (8000c8c <HAL_ETH_MspInit+0x178>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b88:	61bb      	str	r3, [r7, #24]
 8000b8a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	4b3e      	ldr	r3, [pc, #248]	; (8000c8c <HAL_ETH_MspInit+0x178>)
 8000b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b94:	4a3d      	ldr	r2, [pc, #244]	; (8000c8c <HAL_ETH_MspInit+0x178>)
 8000b96:	f043 0304 	orr.w	r3, r3, #4
 8000b9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9c:	4b3b      	ldr	r3, [pc, #236]	; (8000c8c <HAL_ETH_MspInit+0x178>)
 8000b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba0:	f003 0304 	and.w	r3, r3, #4
 8000ba4:	617b      	str	r3, [r7, #20]
 8000ba6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	4b37      	ldr	r3, [pc, #220]	; (8000c8c <HAL_ETH_MspInit+0x178>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb0:	4a36      	ldr	r2, [pc, #216]	; (8000c8c <HAL_ETH_MspInit+0x178>)
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb8:	4b34      	ldr	r3, [pc, #208]	; (8000c8c <HAL_ETH_MspInit+0x178>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	4b30      	ldr	r3, [pc, #192]	; (8000c8c <HAL_ETH_MspInit+0x178>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bcc:	4a2f      	ldr	r2, [pc, #188]	; (8000c8c <HAL_ETH_MspInit+0x178>)
 8000bce:	f043 0302 	orr.w	r3, r3, #2
 8000bd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd4:	4b2d      	ldr	r3, [pc, #180]	; (8000c8c <HAL_ETH_MspInit+0x178>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000be0:	2300      	movs	r3, #0
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	4b29      	ldr	r3, [pc, #164]	; (8000c8c <HAL_ETH_MspInit+0x178>)
 8000be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be8:	4a28      	ldr	r2, [pc, #160]	; (8000c8c <HAL_ETH_MspInit+0x178>)
 8000bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bee:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf0:	4b26      	ldr	r3, [pc, #152]	; (8000c8c <HAL_ETH_MspInit+0x178>)
 8000bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bfc:	2332      	movs	r3, #50	; 0x32
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	2302      	movs	r3, #2
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c0c:	230b      	movs	r3, #11
 8000c0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c14:	4619      	mov	r1, r3
 8000c16:	481e      	ldr	r0, [pc, #120]	; (8000c90 <HAL_ETH_MspInit+0x17c>)
 8000c18:	f000 fe1e 	bl	8001858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c1c:	2386      	movs	r3, #134	; 0x86
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c2c:	230b      	movs	r3, #11
 8000c2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c34:	4619      	mov	r1, r3
 8000c36:	4817      	ldr	r0, [pc, #92]	; (8000c94 <HAL_ETH_MspInit+0x180>)
 8000c38:	f000 fe0e 	bl	8001858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c4e:	230b      	movs	r3, #11
 8000c50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c56:	4619      	mov	r1, r3
 8000c58:	480f      	ldr	r0, [pc, #60]	; (8000c98 <HAL_ETH_MspInit+0x184>)
 8000c5a:	f000 fdfd 	bl	8001858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c5e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c70:	230b      	movs	r3, #11
 8000c72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4808      	ldr	r0, [pc, #32]	; (8000c9c <HAL_ETH_MspInit+0x188>)
 8000c7c:	f000 fdec 	bl	8001858 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c80:	bf00      	nop
 8000c82:	3738      	adds	r7, #56	; 0x38
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40028000 	.word	0x40028000
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020800 	.word	0x40020800
 8000c94:	40020000 	.word	0x40020000
 8000c98:	40020400 	.word	0x40020400
 8000c9c:	40021800 	.word	0x40021800

08000ca0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	; 0x28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a19      	ldr	r2, [pc, #100]	; (8000d24 <HAL_UART_MspInit+0x84>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d12c      	bne.n	8000d1c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <HAL_UART_MspInit+0x88>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	4a17      	ldr	r2, [pc, #92]	; (8000d28 <HAL_UART_MspInit+0x88>)
 8000ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <HAL_UART_MspInit+0x88>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <HAL_UART_MspInit+0x88>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a10      	ldr	r2, [pc, #64]	; (8000d28 <HAL_UART_MspInit+0x88>)
 8000ce8:	f043 0308 	orr.w	r3, r3, #8
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <HAL_UART_MspInit+0x88>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0308 	and.w	r3, r3, #8
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cfa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d0c:	2307      	movs	r3, #7
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	4619      	mov	r1, r3
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <HAL_UART_MspInit+0x8c>)
 8000d18:	f000 fd9e 	bl	8001858 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d1c:	bf00      	nop
 8000d1e:	3728      	adds	r7, #40	; 0x28
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40004800 	.word	0x40004800
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020c00 	.word	0x40020c00

08000d30 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	; 0x28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d50:	d13f      	bne.n	8000dd2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	4b21      	ldr	r3, [pc, #132]	; (8000ddc <HAL_PCD_MspInit+0xac>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a20      	ldr	r2, [pc, #128]	; (8000ddc <HAL_PCD_MspInit+0xac>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <HAL_PCD_MspInit+0xac>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d6e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d80:	230a      	movs	r3, #10
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4815      	ldr	r0, [pc, #84]	; (8000de0 <HAL_PCD_MspInit+0xb0>)
 8000d8c:	f000 fd64 	bl	8001858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	4619      	mov	r1, r3
 8000da4:	480e      	ldr	r0, [pc, #56]	; (8000de0 <HAL_PCD_MspInit+0xb0>)
 8000da6:	f000 fd57 	bl	8001858 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <HAL_PCD_MspInit+0xac>)
 8000dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dae:	4a0b      	ldr	r2, [pc, #44]	; (8000ddc <HAL_PCD_MspInit+0xac>)
 8000db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000db4:	6353      	str	r3, [r2, #52]	; 0x34
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <HAL_PCD_MspInit+0xac>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbe:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <HAL_PCD_MspInit+0xac>)
 8000dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000dc6:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <HAL_PCD_MspInit+0xac>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000dd2:	bf00      	nop
 8000dd4:	3728      	adds	r7, #40	; 0x28
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020000 	.word	0x40020000

08000de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <NMI_Handler+0x4>

08000dea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <HardFault_Handler+0x4>

08000df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <MemManage_Handler+0x4>

08000df6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <BusFault_Handler+0x4>

08000dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <UsageFault_Handler+0x4>

08000e02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e14:	f000 f8ce 	bl	8000fb4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000e18:	f003 f946 	bl	80040a8 <xTaskGetSchedulerState>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d001      	beq.n	8000e26 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000e22:	f003 fac9 	bl	80043b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e34:	4a14      	ldr	r2, [pc, #80]	; (8000e88 <_sbrk+0x5c>)
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <_sbrk+0x60>)
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e40:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d102      	bne.n	8000e4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e48:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <_sbrk+0x64>)
 8000e4a:	4a12      	ldr	r2, [pc, #72]	; (8000e94 <_sbrk+0x68>)
 8000e4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4e:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <_sbrk+0x64>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4413      	add	r3, r2
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d207      	bcs.n	8000e6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e5c:	f003 fcb8 	bl	80047d0 <__errno>
 8000e60:	4603      	mov	r3, r0
 8000e62:	220c      	movs	r2, #12
 8000e64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6a:	e009      	b.n	8000e80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e72:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <_sbrk+0x64>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	4a05      	ldr	r2, [pc, #20]	; (8000e90 <_sbrk+0x64>)
 8000e7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20030000 	.word	0x20030000
 8000e8c:	00000400 	.word	0x00000400
 8000e90:	20000820 	.word	0x20000820
 8000e94:	20004580 	.word	0x20004580

08000e98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <SystemInit+0x20>)
 8000e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ea2:	4a05      	ldr	r2, [pc, #20]	; (8000eb8 <SystemInit+0x20>)
 8000ea4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ebc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ef4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ec0:	480d      	ldr	r0, [pc, #52]	; (8000ef8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ec2:	490e      	ldr	r1, [pc, #56]	; (8000efc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ec4:	4a0e      	ldr	r2, [pc, #56]	; (8000f00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec8:	e002      	b.n	8000ed0 <LoopCopyDataInit>

08000eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ece:	3304      	adds	r3, #4

08000ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed4:	d3f9      	bcc.n	8000eca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed6:	4a0b      	ldr	r2, [pc, #44]	; (8000f04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ed8:	4c0b      	ldr	r4, [pc, #44]	; (8000f08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000edc:	e001      	b.n	8000ee2 <LoopFillZerobss>

08000ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee0:	3204      	adds	r2, #4

08000ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee4:	d3fb      	bcc.n	8000ede <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ee6:	f7ff ffd7 	bl	8000e98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eea:	f003 fd6d 	bl	80049c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eee:	f7ff fb01 	bl	80004f4 <main>
  bx  lr    
 8000ef2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ef4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000efc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000f00:	08005348 	.word	0x08005348
  ldr r2, =_sbss
 8000f04:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000f08:	2000457c 	.word	0x2000457c

08000f0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f0c:	e7fe      	b.n	8000f0c <ADC_IRQHandler>
	...

08000f10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f14:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <HAL_Init+0x40>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0d      	ldr	r2, [pc, #52]	; (8000f50 <HAL_Init+0x40>)
 8000f1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f20:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <HAL_Init+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0a      	ldr	r2, [pc, #40]	; (8000f50 <HAL_Init+0x40>)
 8000f26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f2c:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <HAL_Init+0x40>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a07      	ldr	r2, [pc, #28]	; (8000f50 <HAL_Init+0x40>)
 8000f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f38:	2003      	movs	r0, #3
 8000f3a:	f000 f931 	bl	80011a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f3e:	200f      	movs	r0, #15
 8000f40:	f000 f808 	bl	8000f54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f44:	f7ff fdba 	bl	8000abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40023c00 	.word	0x40023c00

08000f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_InitTick+0x54>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <HAL_InitTick+0x58>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	4619      	mov	r1, r3
 8000f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 f93b 	bl	80011ee <HAL_SYSTICK_Config>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e00e      	b.n	8000fa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b0f      	cmp	r3, #15
 8000f86:	d80a      	bhi.n	8000f9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f90:	f000 f911 	bl	80011b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f94:	4a06      	ldr	r2, [pc, #24]	; (8000fb0 <HAL_InitTick+0x5c>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e000      	b.n	8000fa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	20000008 	.word	0x20000008
 8000fb0:	20000004 	.word	0x20000004

08000fb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_IncTick+0x20>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_IncTick+0x24>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <HAL_IncTick+0x24>)
 8000fc6:	6013      	str	r3, [r2, #0]
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	20000824 	.word	0x20000824

08000fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe0:	4b03      	ldr	r3, [pc, #12]	; (8000ff0 <HAL_GetTick+0x14>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000824 	.word	0x20000824

08000ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ffc:	f7ff ffee 	bl	8000fdc <HAL_GetTick>
 8001000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800100c:	d005      	beq.n	800101a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <HAL_Delay+0x44>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4413      	add	r3, r2
 8001018:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800101a:	bf00      	nop
 800101c:	f7ff ffde 	bl	8000fdc <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	429a      	cmp	r2, r3
 800102a:	d8f7      	bhi.n	800101c <HAL_Delay+0x28>
  {
  }
}
 800102c:	bf00      	nop
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000008 	.word	0x20000008

0800103c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <__NVIC_SetPriorityGrouping+0x44>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001052:	68ba      	ldr	r2, [r7, #8]
 8001054:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001058:	4013      	ands	r3, r2
 800105a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001064:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800106c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800106e:	4a04      	ldr	r2, [pc, #16]	; (8001080 <__NVIC_SetPriorityGrouping+0x44>)
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	60d3      	str	r3, [r2, #12]
}
 8001074:	bf00      	nop
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001088:	4b04      	ldr	r3, [pc, #16]	; (800109c <__NVIC_GetPriorityGrouping+0x18>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	0a1b      	lsrs	r3, r3, #8
 800108e:	f003 0307 	and.w	r3, r3, #7
}
 8001092:	4618      	mov	r0, r3
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	db0a      	blt.n	80010ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	490c      	ldr	r1, [pc, #48]	; (80010ec <__NVIC_SetPriority+0x4c>)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	0112      	lsls	r2, r2, #4
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	440b      	add	r3, r1
 80010c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c8:	e00a      	b.n	80010e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4908      	ldr	r1, [pc, #32]	; (80010f0 <__NVIC_SetPriority+0x50>)
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	f003 030f 	and.w	r3, r3, #15
 80010d6:	3b04      	subs	r3, #4
 80010d8:	0112      	lsls	r2, r2, #4
 80010da:	b2d2      	uxtb	r2, r2
 80010dc:	440b      	add	r3, r1
 80010de:	761a      	strb	r2, [r3, #24]
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000e100 	.word	0xe000e100
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b089      	sub	sp, #36	; 0x24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f1c3 0307 	rsb	r3, r3, #7
 800110e:	2b04      	cmp	r3, #4
 8001110:	bf28      	it	cs
 8001112:	2304      	movcs	r3, #4
 8001114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3304      	adds	r3, #4
 800111a:	2b06      	cmp	r3, #6
 800111c:	d902      	bls.n	8001124 <NVIC_EncodePriority+0x30>
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3b03      	subs	r3, #3
 8001122:	e000      	b.n	8001126 <NVIC_EncodePriority+0x32>
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	f04f 32ff 	mov.w	r2, #4294967295
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43da      	mvns	r2, r3
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	401a      	ands	r2, r3
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800113c:	f04f 31ff 	mov.w	r1, #4294967295
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	fa01 f303 	lsl.w	r3, r1, r3
 8001146:	43d9      	mvns	r1, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	4313      	orrs	r3, r2
         );
}
 800114e:	4618      	mov	r0, r3
 8001150:	3724      	adds	r7, #36	; 0x24
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
	...

0800115c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3b01      	subs	r3, #1
 8001168:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800116c:	d301      	bcc.n	8001172 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800116e:	2301      	movs	r3, #1
 8001170:	e00f      	b.n	8001192 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001172:	4a0a      	ldr	r2, [pc, #40]	; (800119c <SysTick_Config+0x40>)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3b01      	subs	r3, #1
 8001178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800117a:	210f      	movs	r1, #15
 800117c:	f04f 30ff 	mov.w	r0, #4294967295
 8001180:	f7ff ff8e 	bl	80010a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <SysTick_Config+0x40>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800118a:	4b04      	ldr	r3, [pc, #16]	; (800119c <SysTick_Config+0x40>)
 800118c:	2207      	movs	r2, #7
 800118e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	e000e010 	.word	0xe000e010

080011a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff ff47 	bl	800103c <__NVIC_SetPriorityGrouping>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b086      	sub	sp, #24
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	4603      	mov	r3, r0
 80011be:	60b9      	str	r1, [r7, #8]
 80011c0:	607a      	str	r2, [r7, #4]
 80011c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011c8:	f7ff ff5c 	bl	8001084 <__NVIC_GetPriorityGrouping>
 80011cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	68b9      	ldr	r1, [r7, #8]
 80011d2:	6978      	ldr	r0, [r7, #20]
 80011d4:	f7ff ff8e 	bl	80010f4 <NVIC_EncodePriority>
 80011d8:	4602      	mov	r2, r0
 80011da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011de:	4611      	mov	r1, r2
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ff5d 	bl	80010a0 <__NVIC_SetPriority>
}
 80011e6:	bf00      	nop
 80011e8:	3718      	adds	r7, #24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ffb0 	bl	800115c <SysTick_Config>
 80011fc:	4603      	mov	r3, r0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e06c      	b.n	80012f4 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001220:	2b00      	cmp	r3, #0
 8001222:	d106      	bne.n	8001232 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2223      	movs	r2, #35	; 0x23
 8001228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff fc71 	bl	8000b14 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	4b31      	ldr	r3, [pc, #196]	; (80012fc <HAL_ETH_Init+0xf4>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	4a30      	ldr	r2, [pc, #192]	; (80012fc <HAL_ETH_Init+0xf4>)
 800123c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001240:	6453      	str	r3, [r2, #68]	; 0x44
 8001242:	4b2e      	ldr	r3, [pc, #184]	; (80012fc <HAL_ETH_Init+0xf4>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800124e:	4b2c      	ldr	r3, [pc, #176]	; (8001300 <HAL_ETH_Init+0xf8>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	4a2b      	ldr	r2, [pc, #172]	; (8001300 <HAL_ETH_Init+0xf8>)
 8001254:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001258:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800125a:	4b29      	ldr	r3, [pc, #164]	; (8001300 <HAL_ETH_Init+0xf8>)
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	4927      	ldr	r1, [pc, #156]	; (8001300 <HAL_ETH_Init+0xf8>)
 8001264:	4313      	orrs	r3, r2
 8001266:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001268:	4b25      	ldr	r3, [pc, #148]	; (8001300 <HAL_ETH_Init+0xf8>)
 800126a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	6812      	ldr	r2, [r2, #0]
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001282:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001284:	f7ff feaa 	bl	8000fdc <HAL_GetTick>
 8001288:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800128a:	e011      	b.n	80012b0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800128c:	f7ff fea6 	bl	8000fdc <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800129a:	d909      	bls.n	80012b0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2204      	movs	r2, #4
 80012a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	22e0      	movs	r2, #224	; 0xe0
 80012a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e021      	b.n	80012f4 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1e4      	bne.n	800128c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f000 f958 	bl	8001578 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f000 f9ff 	bl	80016cc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 fa55 	bl	800177e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	461a      	mov	r2, r3
 80012da:	2100      	movs	r1, #0
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f000 f9bd 	bl	800165c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2210      	movs	r2, #16
 80012ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40023800 	.word	0x40023800
 8001300:	40013800 	.word	0x40013800

08001304 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	4b51      	ldr	r3, [pc, #324]	; (8001460 <ETH_SetMACConfig+0x15c>)
 800131a:	4013      	ands	r3, r2
 800131c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	7c1b      	ldrb	r3, [r3, #16]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d102      	bne.n	800132c <ETH_SetMACConfig+0x28>
 8001326:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800132a:	e000      	b.n	800132e <ETH_SetMACConfig+0x2a>
 800132c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	7c5b      	ldrb	r3, [r3, #17]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d102      	bne.n	800133c <ETH_SetMACConfig+0x38>
 8001336:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800133a:	e000      	b.n	800133e <ETH_SetMACConfig+0x3a>
 800133c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800133e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001344:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	7fdb      	ldrb	r3, [r3, #31]
 800134a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800134c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001352:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001354:	683a      	ldr	r2, [r7, #0]
 8001356:	7f92      	ldrb	r2, [r2, #30]
 8001358:	2a00      	cmp	r2, #0
 800135a:	d102      	bne.n	8001362 <ETH_SetMACConfig+0x5e>
 800135c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001360:	e000      	b.n	8001364 <ETH_SetMACConfig+0x60>
 8001362:	2200      	movs	r2, #0
                        macconf->Speed |
 8001364:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	7f1b      	ldrb	r3, [r3, #28]
 800136a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800136c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001372:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	791b      	ldrb	r3, [r3, #4]
 8001378:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800137a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001382:	2a00      	cmp	r2, #0
 8001384:	d102      	bne.n	800138c <ETH_SetMACConfig+0x88>
 8001386:	f44f 7200 	mov.w	r2, #512	; 0x200
 800138a:	e000      	b.n	800138e <ETH_SetMACConfig+0x8a>
 800138c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800138e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	7bdb      	ldrb	r3, [r3, #15]
 8001394:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001396:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800139c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80013a4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013a6:	4313      	orrs	r3, r2
 80013a8:	68fa      	ldr	r2, [r7, #12]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013be:	2001      	movs	r0, #1
 80013c0:	f7ff fe18 	bl	8000ff4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68fa      	ldr	r2, [r7, #12]
 80013ca:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80013da:	4013      	ands	r3, r2
 80013dc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013e2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80013ea:	2a00      	cmp	r2, #0
 80013ec:	d101      	bne.n	80013f2 <ETH_SetMACConfig+0xee>
 80013ee:	2280      	movs	r2, #128	; 0x80
 80013f0:	e000      	b.n	80013f4 <ETH_SetMACConfig+0xf0>
 80013f2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013f4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80013fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001402:	2a01      	cmp	r2, #1
 8001404:	d101      	bne.n	800140a <ETH_SetMACConfig+0x106>
 8001406:	2208      	movs	r2, #8
 8001408:	e000      	b.n	800140c <ETH_SetMACConfig+0x108>
 800140a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800140c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800140e:	683a      	ldr	r2, [r7, #0]
 8001410:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001414:	2a01      	cmp	r2, #1
 8001416:	d101      	bne.n	800141c <ETH_SetMACConfig+0x118>
 8001418:	2204      	movs	r2, #4
 800141a:	e000      	b.n	800141e <ETH_SetMACConfig+0x11a>
 800141c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800141e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001426:	2a01      	cmp	r2, #1
 8001428:	d101      	bne.n	800142e <ETH_SetMACConfig+0x12a>
 800142a:	2202      	movs	r2, #2
 800142c:	e000      	b.n	8001430 <ETH_SetMACConfig+0x12c>
 800142e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001430:	4313      	orrs	r3, r2
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	4313      	orrs	r3, r2
 8001436:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001448:	2001      	movs	r0, #1
 800144a:	f7ff fdd3 	bl	8000ff4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	619a      	str	r2, [r3, #24]
}
 8001456:	bf00      	nop
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	ff20810f 	.word	0xff20810f

08001464 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800147a:	68fa      	ldr	r2, [r7, #12]
 800147c:	4b3d      	ldr	r3, [pc, #244]	; (8001574 <ETH_SetDMAConfig+0x110>)
 800147e:	4013      	ands	r3, r2
 8001480:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	7b1b      	ldrb	r3, [r3, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d102      	bne.n	8001490 <ETH_SetDMAConfig+0x2c>
 800148a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800148e:	e000      	b.n	8001492 <ETH_SetDMAConfig+0x2e>
 8001490:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	7b5b      	ldrb	r3, [r3, #13]
 8001496:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001498:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	7f52      	ldrb	r2, [r2, #29]
 800149e:	2a00      	cmp	r2, #0
 80014a0:	d102      	bne.n	80014a8 <ETH_SetDMAConfig+0x44>
 80014a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014a6:	e000      	b.n	80014aa <ETH_SetDMAConfig+0x46>
 80014a8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80014aa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	7b9b      	ldrb	r3, [r3, #14]
 80014b0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80014b2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80014b8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	7f1b      	ldrb	r3, [r3, #28]
 80014be:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80014c0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	7f9b      	ldrb	r3, [r3, #30]
 80014c6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80014c8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80014ce:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014d6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014d8:	4313      	orrs	r3, r2
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	4313      	orrs	r3, r2
 80014de:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014e8:	461a      	mov	r2, r3
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014fa:	2001      	movs	r0, #1
 80014fc:	f7ff fd7a 	bl	8000ff4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001508:	461a      	mov	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	791b      	ldrb	r3, [r3, #4]
 8001512:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001518:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800151e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001524:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800152c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800152e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001534:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001536:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800153c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6812      	ldr	r2, [r2, #0]
 8001542:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001546:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800154a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001558:	2001      	movs	r0, #1
 800155a:	f7ff fd4b 	bl	8000ff4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001566:	461a      	mov	r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6013      	str	r3, [r2, #0]
}
 800156c:	bf00      	nop
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	f8de3f23 	.word	0xf8de3f23

08001578 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b0a6      	sub	sp, #152	; 0x98
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001580:	2301      	movs	r3, #1
 8001582:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001586:	2301      	movs	r3, #1
 8001588:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800158c:	2300      	movs	r3, #0
 800158e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001590:	2300      	movs	r3, #0
 8001592:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001596:	2301      	movs	r3, #1
 8001598:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80015a2:	2301      	movs	r3, #1
 80015a4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80015b4:	2300      	movs	r3, #0
 80015b6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80015be:	2300      	movs	r3, #0
 80015c0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80015da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015de:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80015e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80015ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015f0:	4619      	mov	r1, r3
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff fe86 	bl	8001304 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80015f8:	2301      	movs	r3, #1
 80015fa:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80015fc:	2301      	movs	r3, #1
 80015fe:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001600:	2301      	movs	r3, #1
 8001602:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001606:	2301      	movs	r3, #1
 8001608:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001614:	2300      	movs	r3, #0
 8001616:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800161a:	2300      	movs	r3, #0
 800161c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800161e:	2301      	movs	r3, #1
 8001620:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001624:	2301      	movs	r3, #1
 8001626:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001628:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800162c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800162e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001632:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001634:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001638:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800163a:	2301      	movs	r3, #1
 800163c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001640:	2300      	movs	r3, #0
 8001642:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001644:	2300      	movs	r3, #0
 8001646:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001648:	f107 0308 	add.w	r3, r7, #8
 800164c:	4619      	mov	r1, r3
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff ff08 	bl	8001464 <ETH_SetDMAConfig>
}
 8001654:	bf00      	nop
 8001656:	3798      	adds	r7, #152	; 0x98
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800165c:	b480      	push	{r7}
 800165e:	b087      	sub	sp, #28
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3305      	adds	r3, #5
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	021b      	lsls	r3, r3, #8
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	3204      	adds	r2, #4
 8001674:	7812      	ldrb	r2, [r2, #0]
 8001676:	4313      	orrs	r3, r2
 8001678:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <ETH_MACAddressConfig+0x68>)
 800167e:	4413      	add	r3, r2
 8001680:	461a      	mov	r2, r3
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3303      	adds	r3, #3
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	061a      	lsls	r2, r3, #24
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	3302      	adds	r3, #2
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	041b      	lsls	r3, r3, #16
 8001696:	431a      	orrs	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3301      	adds	r3, #1
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	021b      	lsls	r3, r3, #8
 80016a0:	4313      	orrs	r3, r2
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	7812      	ldrb	r2, [r2, #0]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80016aa:	68ba      	ldr	r2, [r7, #8]
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <ETH_MACAddressConfig+0x6c>)
 80016ae:	4413      	add	r3, r2
 80016b0:	461a      	mov	r2, r3
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	6013      	str	r3, [r2, #0]
}
 80016b6:	bf00      	nop
 80016b8:	371c      	adds	r7, #28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40028040 	.word	0x40028040
 80016c8:	40028044 	.word	0x40028044

080016cc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	e03e      	b.n	8001758 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68d9      	ldr	r1, [r3, #12]
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	440b      	add	r3, r1
 80016ea:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	2200      	movs	r2, #0
 80016f6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	2200      	movs	r2, #0
 8001702:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001704:	68b9      	ldr	r1, [r7, #8]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	3206      	adds	r2, #6
 800170c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2b02      	cmp	r3, #2
 8001720:	d80c      	bhi.n	800173c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68d9      	ldr	r1, [r3, #12]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	1c5a      	adds	r2, r3, #1
 800172a:	4613      	mov	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	4413      	add	r3, r2
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	440b      	add	r3, r1
 8001734:	461a      	mov	r2, r3
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	e004      	b.n	8001746 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	461a      	mov	r2, r3
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	3301      	adds	r3, #1
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2b03      	cmp	r3, #3
 800175c:	d9bd      	bls.n	80016da <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68da      	ldr	r2, [r3, #12]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001770:	611a      	str	r2, [r3, #16]
}
 8001772:	bf00      	nop
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800177e:	b480      	push	{r7}
 8001780:	b085      	sub	sp, #20
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	e046      	b.n	800181a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6919      	ldr	r1, [r3, #16]
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	4613      	mov	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	440b      	add	r3, r1
 800179c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	2200      	movs	r2, #0
 80017a8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	2200      	movs	r2, #0
 80017b4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	2200      	movs	r2, #0
 80017ba:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	2200      	movs	r2, #0
 80017c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017c8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80017d0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80017de:	68b9      	ldr	r1, [r7, #8]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	3212      	adds	r2, #18
 80017e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d80c      	bhi.n	800180a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6919      	ldr	r1, [r3, #16]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	1c5a      	adds	r2, r3, #1
 80017f8:	4613      	mov	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	440b      	add	r3, r1
 8001802:	461a      	mov	r2, r3
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	60da      	str	r2, [r3, #12]
 8001808:	e004      	b.n	8001814 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	461a      	mov	r2, r3
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	3301      	adds	r3, #1
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2b03      	cmp	r3, #3
 800181e:	d9b5      	bls.n	800178c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	691a      	ldr	r2, [r3, #16]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800184a:	60da      	str	r2, [r3, #12]
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001858:	b480      	push	{r7}
 800185a:	b089      	sub	sp, #36	; 0x24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800186a:	2300      	movs	r3, #0
 800186c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
 8001872:	e177      	b.n	8001b64 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001874:	2201      	movs	r2, #1
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	4013      	ands	r3, r2
 8001886:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	429a      	cmp	r2, r3
 800188e:	f040 8166 	bne.w	8001b5e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	2b01      	cmp	r3, #1
 800189c:	d005      	beq.n	80018aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d130      	bne.n	800190c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	2203      	movs	r2, #3
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4013      	ands	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	68da      	ldr	r2, [r3, #12]
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018e0:	2201      	movs	r2, #1
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4013      	ands	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	091b      	lsrs	r3, r3, #4
 80018f6:	f003 0201 	and.w	r2, r3, #1
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	2b03      	cmp	r3, #3
 8001916:	d017      	beq.n	8001948 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	2203      	movs	r2, #3
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d123      	bne.n	800199c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	08da      	lsrs	r2, r3, #3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3208      	adds	r2, #8
 800195c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001960:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	220f      	movs	r2, #15
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	691a      	ldr	r2, [r3, #16]
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	08da      	lsrs	r2, r3, #3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3208      	adds	r2, #8
 8001996:	69b9      	ldr	r1, [r7, #24]
 8001998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	2203      	movs	r2, #3
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 0203 	and.w	r2, r3, #3
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 80c0 	beq.w	8001b5e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	4b66      	ldr	r3, [pc, #408]	; (8001b7c <HAL_GPIO_Init+0x324>)
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	4a65      	ldr	r2, [pc, #404]	; (8001b7c <HAL_GPIO_Init+0x324>)
 80019e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ec:	6453      	str	r3, [r2, #68]	; 0x44
 80019ee:	4b63      	ldr	r3, [pc, #396]	; (8001b7c <HAL_GPIO_Init+0x324>)
 80019f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019fa:	4a61      	ldr	r2, [pc, #388]	; (8001b80 <HAL_GPIO_Init+0x328>)
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	089b      	lsrs	r3, r3, #2
 8001a00:	3302      	adds	r3, #2
 8001a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f003 0303 	and.w	r3, r3, #3
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	220f      	movs	r2, #15
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a58      	ldr	r2, [pc, #352]	; (8001b84 <HAL_GPIO_Init+0x32c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d037      	beq.n	8001a96 <HAL_GPIO_Init+0x23e>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a57      	ldr	r2, [pc, #348]	; (8001b88 <HAL_GPIO_Init+0x330>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d031      	beq.n	8001a92 <HAL_GPIO_Init+0x23a>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a56      	ldr	r2, [pc, #344]	; (8001b8c <HAL_GPIO_Init+0x334>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d02b      	beq.n	8001a8e <HAL_GPIO_Init+0x236>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a55      	ldr	r2, [pc, #340]	; (8001b90 <HAL_GPIO_Init+0x338>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d025      	beq.n	8001a8a <HAL_GPIO_Init+0x232>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a54      	ldr	r2, [pc, #336]	; (8001b94 <HAL_GPIO_Init+0x33c>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d01f      	beq.n	8001a86 <HAL_GPIO_Init+0x22e>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a53      	ldr	r2, [pc, #332]	; (8001b98 <HAL_GPIO_Init+0x340>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d019      	beq.n	8001a82 <HAL_GPIO_Init+0x22a>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a52      	ldr	r2, [pc, #328]	; (8001b9c <HAL_GPIO_Init+0x344>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d013      	beq.n	8001a7e <HAL_GPIO_Init+0x226>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a51      	ldr	r2, [pc, #324]	; (8001ba0 <HAL_GPIO_Init+0x348>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d00d      	beq.n	8001a7a <HAL_GPIO_Init+0x222>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a50      	ldr	r2, [pc, #320]	; (8001ba4 <HAL_GPIO_Init+0x34c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d007      	beq.n	8001a76 <HAL_GPIO_Init+0x21e>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a4f      	ldr	r2, [pc, #316]	; (8001ba8 <HAL_GPIO_Init+0x350>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d101      	bne.n	8001a72 <HAL_GPIO_Init+0x21a>
 8001a6e:	2309      	movs	r3, #9
 8001a70:	e012      	b.n	8001a98 <HAL_GPIO_Init+0x240>
 8001a72:	230a      	movs	r3, #10
 8001a74:	e010      	b.n	8001a98 <HAL_GPIO_Init+0x240>
 8001a76:	2308      	movs	r3, #8
 8001a78:	e00e      	b.n	8001a98 <HAL_GPIO_Init+0x240>
 8001a7a:	2307      	movs	r3, #7
 8001a7c:	e00c      	b.n	8001a98 <HAL_GPIO_Init+0x240>
 8001a7e:	2306      	movs	r3, #6
 8001a80:	e00a      	b.n	8001a98 <HAL_GPIO_Init+0x240>
 8001a82:	2305      	movs	r3, #5
 8001a84:	e008      	b.n	8001a98 <HAL_GPIO_Init+0x240>
 8001a86:	2304      	movs	r3, #4
 8001a88:	e006      	b.n	8001a98 <HAL_GPIO_Init+0x240>
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e004      	b.n	8001a98 <HAL_GPIO_Init+0x240>
 8001a8e:	2302      	movs	r3, #2
 8001a90:	e002      	b.n	8001a98 <HAL_GPIO_Init+0x240>
 8001a92:	2301      	movs	r3, #1
 8001a94:	e000      	b.n	8001a98 <HAL_GPIO_Init+0x240>
 8001a96:	2300      	movs	r3, #0
 8001a98:	69fa      	ldr	r2, [r7, #28]
 8001a9a:	f002 0203 	and.w	r2, r2, #3
 8001a9e:	0092      	lsls	r2, r2, #2
 8001aa0:	4093      	lsls	r3, r2
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aa8:	4935      	ldr	r1, [pc, #212]	; (8001b80 <HAL_GPIO_Init+0x328>)
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	089b      	lsrs	r3, r3, #2
 8001aae:	3302      	adds	r3, #2
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ab6:	4b3d      	ldr	r3, [pc, #244]	; (8001bac <HAL_GPIO_Init+0x354>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ada:	4a34      	ldr	r2, [pc, #208]	; (8001bac <HAL_GPIO_Init+0x354>)
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ae0:	4b32      	ldr	r3, [pc, #200]	; (8001bac <HAL_GPIO_Init+0x354>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b04:	4a29      	ldr	r2, [pc, #164]	; (8001bac <HAL_GPIO_Init+0x354>)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b0a:	4b28      	ldr	r3, [pc, #160]	; (8001bac <HAL_GPIO_Init+0x354>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	43db      	mvns	r3, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4013      	ands	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b2e:	4a1f      	ldr	r2, [pc, #124]	; (8001bac <HAL_GPIO_Init+0x354>)
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b34:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <HAL_GPIO_Init+0x354>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b58:	4a14      	ldr	r2, [pc, #80]	; (8001bac <HAL_GPIO_Init+0x354>)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3301      	adds	r3, #1
 8001b62:	61fb      	str	r3, [r7, #28]
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	2b0f      	cmp	r3, #15
 8001b68:	f67f ae84 	bls.w	8001874 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	bf00      	nop
 8001b70:	3724      	adds	r7, #36	; 0x24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40013800 	.word	0x40013800
 8001b84:	40020000 	.word	0x40020000
 8001b88:	40020400 	.word	0x40020400
 8001b8c:	40020800 	.word	0x40020800
 8001b90:	40020c00 	.word	0x40020c00
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40021400 	.word	0x40021400
 8001b9c:	40021800 	.word	0x40021800
 8001ba0:	40021c00 	.word	0x40021c00
 8001ba4:	40022000 	.word	0x40022000
 8001ba8:	40022400 	.word	0x40022400
 8001bac:	40013c00 	.word	0x40013c00

08001bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	807b      	strh	r3, [r7, #2]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bc0:	787b      	ldrb	r3, [r7, #1]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bc6:	887a      	ldrh	r2, [r7, #2]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bcc:	e003      	b.n	8001bd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bce:	887b      	ldrh	r3, [r7, #2]
 8001bd0:	041a      	lsls	r2, r3, #16
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	619a      	str	r2, [r3, #24]
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b085      	sub	sp, #20
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
 8001bea:	460b      	mov	r3, r1
 8001bec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bf4:	887a      	ldrh	r2, [r7, #2]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	041a      	lsls	r2, r3, #16
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	43d9      	mvns	r1, r3
 8001c00:	887b      	ldrh	r3, [r7, #2]
 8001c02:	400b      	ands	r3, r1
 8001c04:	431a      	orrs	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	619a      	str	r2, [r3, #24]
}
 8001c0a:	bf00      	nop
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c18:	b08f      	sub	sp, #60	; 0x3c
 8001c1a:	af0a      	add	r7, sp, #40	; 0x28
 8001c1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e10f      	b.n	8001e48 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d106      	bne.n	8001c48 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff f874 	bl	8000d30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2203      	movs	r2, #3
 8001c4c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d102      	bne.n	8001c62 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f001 fa4f 	bl	800310a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	603b      	str	r3, [r7, #0]
 8001c72:	687e      	ldr	r6, [r7, #4]
 8001c74:	466d      	mov	r5, sp
 8001c76:	f106 0410 	add.w	r4, r6, #16
 8001c7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c86:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c8a:	1d33      	adds	r3, r6, #4
 8001c8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c8e:	6838      	ldr	r0, [r7, #0]
 8001c90:	f001 f9da 	bl	8003048 <USB_CoreInit>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d005      	beq.n	8001ca6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e0d0      	b.n	8001e48 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2100      	movs	r1, #0
 8001cac:	4618      	mov	r0, r3
 8001cae:	f001 fa3d 	bl	800312c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	73fb      	strb	r3, [r7, #15]
 8001cb6:	e04a      	b.n	8001d4e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001cb8:	7bfa      	ldrb	r2, [r7, #15]
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	333d      	adds	r3, #61	; 0x3d
 8001cc8:	2201      	movs	r2, #1
 8001cca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ccc:	7bfa      	ldrb	r2, [r7, #15]
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	440b      	add	r3, r1
 8001cda:	333c      	adds	r3, #60	; 0x3c
 8001cdc:	7bfa      	ldrb	r2, [r7, #15]
 8001cde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ce0:	7bfa      	ldrb	r2, [r7, #15]
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
 8001ce4:	b298      	uxth	r0, r3
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	4413      	add	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	3344      	adds	r3, #68	; 0x44
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cf8:	7bfa      	ldrb	r2, [r7, #15]
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	4413      	add	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	3340      	adds	r3, #64	; 0x40
 8001d08:	2200      	movs	r2, #0
 8001d0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d0c:	7bfa      	ldrb	r2, [r7, #15]
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	4613      	mov	r3, r2
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	4413      	add	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	440b      	add	r3, r1
 8001d1a:	3348      	adds	r3, #72	; 0x48
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d20:	7bfa      	ldrb	r2, [r7, #15]
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	4613      	mov	r3, r2
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	4413      	add	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	334c      	adds	r3, #76	; 0x4c
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d34:	7bfa      	ldrb	r2, [r7, #15]
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	440b      	add	r3, r1
 8001d42:	3354      	adds	r3, #84	; 0x54
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	73fb      	strb	r3, [r7, #15]
 8001d4e:	7bfa      	ldrb	r2, [r7, #15]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d3af      	bcc.n	8001cb8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d58:	2300      	movs	r3, #0
 8001d5a:	73fb      	strb	r3, [r7, #15]
 8001d5c:	e044      	b.n	8001de8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d5e:	7bfa      	ldrb	r2, [r7, #15]
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	4613      	mov	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	4413      	add	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d74:	7bfa      	ldrb	r2, [r7, #15]
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	440b      	add	r3, r1
 8001d82:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001d86:	7bfa      	ldrb	r2, [r7, #15]
 8001d88:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d8a:	7bfa      	ldrb	r2, [r7, #15]
 8001d8c:	6879      	ldr	r1, [r7, #4]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	4413      	add	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	440b      	add	r3, r1
 8001d98:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001da0:	7bfa      	ldrb	r2, [r7, #15]
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	4613      	mov	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	4413      	add	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	440b      	add	r3, r1
 8001dae:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001db6:	7bfa      	ldrb	r2, [r7, #15]
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	4413      	add	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001dcc:	7bfa      	ldrb	r2, [r7, #15]
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	440b      	add	r3, r1
 8001dda:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001de2:	7bfb      	ldrb	r3, [r7, #15]
 8001de4:	3301      	adds	r3, #1
 8001de6:	73fb      	strb	r3, [r7, #15]
 8001de8:	7bfa      	ldrb	r2, [r7, #15]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d3b5      	bcc.n	8001d5e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	603b      	str	r3, [r7, #0]
 8001df8:	687e      	ldr	r6, [r7, #4]
 8001dfa:	466d      	mov	r5, sp
 8001dfc:	f106 0410 	add.w	r4, r6, #16
 8001e00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e0c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e10:	1d33      	adds	r3, r6, #4
 8001e12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e14:	6838      	ldr	r0, [r7, #0]
 8001e16:	f001 f9d5 	bl	80031c4 <USB_DevInit>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d005      	beq.n	8001e2c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2202      	movs	r2, #2
 8001e24:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e00d      	b.n	8001e48 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f001 fba0 	bl	8003586 <USB_DevDisconnect>

  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e267      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d075      	beq.n	8001f5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e6e:	4b88      	ldr	r3, [pc, #544]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d00c      	beq.n	8001e94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e7a:	4b85      	ldr	r3, [pc, #532]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e82:	2b08      	cmp	r3, #8
 8001e84:	d112      	bne.n	8001eac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e86:	4b82      	ldr	r3, [pc, #520]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e92:	d10b      	bne.n	8001eac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e94:	4b7e      	ldr	r3, [pc, #504]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d05b      	beq.n	8001f58 <HAL_RCC_OscConfig+0x108>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d157      	bne.n	8001f58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e242      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb4:	d106      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x74>
 8001eb6:	4b76      	ldr	r3, [pc, #472]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a75      	ldr	r2, [pc, #468]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	e01d      	b.n	8001f00 <HAL_RCC_OscConfig+0xb0>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ecc:	d10c      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x98>
 8001ece:	4b70      	ldr	r3, [pc, #448]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a6f      	ldr	r2, [pc, #444]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	4b6d      	ldr	r3, [pc, #436]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a6c      	ldr	r2, [pc, #432]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	e00b      	b.n	8001f00 <HAL_RCC_OscConfig+0xb0>
 8001ee8:	4b69      	ldr	r3, [pc, #420]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a68      	ldr	r2, [pc, #416]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	4b66      	ldr	r3, [pc, #408]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a65      	ldr	r2, [pc, #404]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d013      	beq.n	8001f30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f08:	f7ff f868 	bl	8000fdc <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f10:	f7ff f864 	bl	8000fdc <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b64      	cmp	r3, #100	; 0x64
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e207      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f22:	4b5b      	ldr	r3, [pc, #364]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0xc0>
 8001f2e:	e014      	b.n	8001f5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f30:	f7ff f854 	bl	8000fdc <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f38:	f7ff f850 	bl	8000fdc <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b64      	cmp	r3, #100	; 0x64
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e1f3      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f4a:	4b51      	ldr	r3, [pc, #324]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f0      	bne.n	8001f38 <HAL_RCC_OscConfig+0xe8>
 8001f56:	e000      	b.n	8001f5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d063      	beq.n	800202e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f66:	4b4a      	ldr	r3, [pc, #296]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00b      	beq.n	8001f8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f72:	4b47      	ldr	r3, [pc, #284]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d11c      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f7e:	4b44      	ldr	r3, [pc, #272]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d116      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f8a:	4b41      	ldr	r3, [pc, #260]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d005      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x152>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d001      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e1c7      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa2:	4b3b      	ldr	r3, [pc, #236]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4937      	ldr	r1, [pc, #220]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb6:	e03a      	b.n	800202e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d020      	beq.n	8002002 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fc0:	4b34      	ldr	r3, [pc, #208]	; (8002094 <HAL_RCC_OscConfig+0x244>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc6:	f7ff f809 	bl	8000fdc <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fce:	f7ff f805 	bl	8000fdc <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e1a8      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe0:	4b2b      	ldr	r3, [pc, #172]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0f0      	beq.n	8001fce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fec:	4b28      	ldr	r3, [pc, #160]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	4925      	ldr	r1, [pc, #148]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	600b      	str	r3, [r1, #0]
 8002000:	e015      	b.n	800202e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002002:	4b24      	ldr	r3, [pc, #144]	; (8002094 <HAL_RCC_OscConfig+0x244>)
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002008:	f7fe ffe8 	bl	8000fdc <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002010:	f7fe ffe4 	bl	8000fdc <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e187      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002022:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b00      	cmp	r3, #0
 8002038:	d036      	beq.n	80020a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d016      	beq.n	8002070 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002042:	4b15      	ldr	r3, [pc, #84]	; (8002098 <HAL_RCC_OscConfig+0x248>)
 8002044:	2201      	movs	r2, #1
 8002046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002048:	f7fe ffc8 	bl	8000fdc <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002050:	f7fe ffc4 	bl	8000fdc <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e167      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002062:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8002064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d0f0      	beq.n	8002050 <HAL_RCC_OscConfig+0x200>
 800206e:	e01b      	b.n	80020a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002070:	4b09      	ldr	r3, [pc, #36]	; (8002098 <HAL_RCC_OscConfig+0x248>)
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002076:	f7fe ffb1 	bl	8000fdc <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800207c:	e00e      	b.n	800209c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800207e:	f7fe ffad 	bl	8000fdc <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d907      	bls.n	800209c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e150      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
 8002090:	40023800 	.word	0x40023800
 8002094:	42470000 	.word	0x42470000
 8002098:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800209c:	4b88      	ldr	r3, [pc, #544]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 800209e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1ea      	bne.n	800207e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f000 8097 	beq.w	80021e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020b6:	2300      	movs	r3, #0
 80020b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ba:	4b81      	ldr	r3, [pc, #516]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10f      	bne.n	80020e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	60bb      	str	r3, [r7, #8]
 80020ca:	4b7d      	ldr	r3, [pc, #500]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	4a7c      	ldr	r2, [pc, #496]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 80020d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d4:	6413      	str	r3, [r2, #64]	; 0x40
 80020d6:	4b7a      	ldr	r3, [pc, #488]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020e2:	2301      	movs	r3, #1
 80020e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e6:	4b77      	ldr	r3, [pc, #476]	; (80022c4 <HAL_RCC_OscConfig+0x474>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d118      	bne.n	8002124 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020f2:	4b74      	ldr	r3, [pc, #464]	; (80022c4 <HAL_RCC_OscConfig+0x474>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a73      	ldr	r2, [pc, #460]	; (80022c4 <HAL_RCC_OscConfig+0x474>)
 80020f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020fe:	f7fe ff6d 	bl	8000fdc <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002106:	f7fe ff69 	bl	8000fdc <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e10c      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002118:	4b6a      	ldr	r3, [pc, #424]	; (80022c4 <HAL_RCC_OscConfig+0x474>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0f0      	beq.n	8002106 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d106      	bne.n	800213a <HAL_RCC_OscConfig+0x2ea>
 800212c:	4b64      	ldr	r3, [pc, #400]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 800212e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002130:	4a63      	ldr	r2, [pc, #396]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	6713      	str	r3, [r2, #112]	; 0x70
 8002138:	e01c      	b.n	8002174 <HAL_RCC_OscConfig+0x324>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	2b05      	cmp	r3, #5
 8002140:	d10c      	bne.n	800215c <HAL_RCC_OscConfig+0x30c>
 8002142:	4b5f      	ldr	r3, [pc, #380]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 8002144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002146:	4a5e      	ldr	r2, [pc, #376]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 8002148:	f043 0304 	orr.w	r3, r3, #4
 800214c:	6713      	str	r3, [r2, #112]	; 0x70
 800214e:	4b5c      	ldr	r3, [pc, #368]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 8002150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002152:	4a5b      	ldr	r2, [pc, #364]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	6713      	str	r3, [r2, #112]	; 0x70
 800215a:	e00b      	b.n	8002174 <HAL_RCC_OscConfig+0x324>
 800215c:	4b58      	ldr	r3, [pc, #352]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 800215e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002160:	4a57      	ldr	r2, [pc, #348]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 8002162:	f023 0301 	bic.w	r3, r3, #1
 8002166:	6713      	str	r3, [r2, #112]	; 0x70
 8002168:	4b55      	ldr	r3, [pc, #340]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 800216a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216c:	4a54      	ldr	r2, [pc, #336]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 800216e:	f023 0304 	bic.w	r3, r3, #4
 8002172:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d015      	beq.n	80021a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217c:	f7fe ff2e 	bl	8000fdc <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002182:	e00a      	b.n	800219a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002184:	f7fe ff2a 	bl	8000fdc <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002192:	4293      	cmp	r3, r2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e0cb      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219a:	4b49      	ldr	r3, [pc, #292]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 800219c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0ee      	beq.n	8002184 <HAL_RCC_OscConfig+0x334>
 80021a6:	e014      	b.n	80021d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a8:	f7fe ff18 	bl	8000fdc <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ae:	e00a      	b.n	80021c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b0:	f7fe ff14 	bl	8000fdc <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80021be:	4293      	cmp	r3, r2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e0b5      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c6:	4b3e      	ldr	r3, [pc, #248]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 80021c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1ee      	bne.n	80021b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021d2:	7dfb      	ldrb	r3, [r7, #23]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d105      	bne.n	80021e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d8:	4b39      	ldr	r3, [pc, #228]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	4a38      	ldr	r2, [pc, #224]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 80021de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 80a1 	beq.w	8002330 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021ee:	4b34      	ldr	r3, [pc, #208]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	2b08      	cmp	r3, #8
 80021f8:	d05c      	beq.n	80022b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d141      	bne.n	8002286 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002202:	4b31      	ldr	r3, [pc, #196]	; (80022c8 <HAL_RCC_OscConfig+0x478>)
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7fe fee8 	bl	8000fdc <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002210:	f7fe fee4 	bl	8000fdc <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e087      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002222:	4b27      	ldr	r3, [pc, #156]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69da      	ldr	r2, [r3, #28]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	019b      	lsls	r3, r3, #6
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002244:	085b      	lsrs	r3, r3, #1
 8002246:	3b01      	subs	r3, #1
 8002248:	041b      	lsls	r3, r3, #16
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002250:	061b      	lsls	r3, r3, #24
 8002252:	491b      	ldr	r1, [pc, #108]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 8002254:	4313      	orrs	r3, r2
 8002256:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002258:	4b1b      	ldr	r3, [pc, #108]	; (80022c8 <HAL_RCC_OscConfig+0x478>)
 800225a:	2201      	movs	r2, #1
 800225c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225e:	f7fe febd 	bl	8000fdc <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002266:	f7fe feb9 	bl	8000fdc <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e05c      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002278:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x416>
 8002284:	e054      	b.n	8002330 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002286:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <HAL_RCC_OscConfig+0x478>)
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7fe fea6 	bl	8000fdc <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002294:	f7fe fea2 	bl	8000fdc <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e045      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a6:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x444>
 80022b2:	e03d      	b.n	8002330 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d107      	bne.n	80022cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e038      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40007000 	.word	0x40007000
 80022c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022cc:	4b1b      	ldr	r3, [pc, #108]	; (800233c <HAL_RCC_OscConfig+0x4ec>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d028      	beq.n	800232c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d121      	bne.n	800232c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d11a      	bne.n	800232c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022fc:	4013      	ands	r3, r2
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002302:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002304:	4293      	cmp	r3, r2
 8002306:	d111      	bne.n	800232c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002312:	085b      	lsrs	r3, r3, #1
 8002314:	3b01      	subs	r3, #1
 8002316:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002318:	429a      	cmp	r2, r3
 800231a:	d107      	bne.n	800232c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002326:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002328:	429a      	cmp	r2, r3
 800232a:	d001      	beq.n	8002330 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e000      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40023800 	.word	0x40023800

08002340 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0cc      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002354:	4b68      	ldr	r3, [pc, #416]	; (80024f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 030f 	and.w	r3, r3, #15
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	429a      	cmp	r2, r3
 8002360:	d90c      	bls.n	800237c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002362:	4b65      	ldr	r3, [pc, #404]	; (80024f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800236a:	4b63      	ldr	r3, [pc, #396]	; (80024f8 <HAL_RCC_ClockConfig+0x1b8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d001      	beq.n	800237c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e0b8      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d020      	beq.n	80023ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002394:	4b59      	ldr	r3, [pc, #356]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	4a58      	ldr	r2, [pc, #352]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 800239a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800239e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0308 	and.w	r3, r3, #8
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023ac:	4b53      	ldr	r3, [pc, #332]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	4a52      	ldr	r2, [pc, #328]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 80023b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b8:	4b50      	ldr	r3, [pc, #320]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	494d      	ldr	r1, [pc, #308]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d044      	beq.n	8002460 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d107      	bne.n	80023ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023de:	4b47      	ldr	r3, [pc, #284]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d119      	bne.n	800241e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e07f      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d003      	beq.n	80023fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d107      	bne.n	800240e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023fe:	4b3f      	ldr	r3, [pc, #252]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d109      	bne.n	800241e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e06f      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240e:	4b3b      	ldr	r3, [pc, #236]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e067      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800241e:	4b37      	ldr	r3, [pc, #220]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f023 0203 	bic.w	r2, r3, #3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	4934      	ldr	r1, [pc, #208]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 800242c:	4313      	orrs	r3, r2
 800242e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002430:	f7fe fdd4 	bl	8000fdc <HAL_GetTick>
 8002434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002436:	e00a      	b.n	800244e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002438:	f7fe fdd0 	bl	8000fdc <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	f241 3288 	movw	r2, #5000	; 0x1388
 8002446:	4293      	cmp	r3, r2
 8002448:	d901      	bls.n	800244e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e04f      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244e:	4b2b      	ldr	r3, [pc, #172]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 020c 	and.w	r2, r3, #12
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	429a      	cmp	r2, r3
 800245e:	d1eb      	bne.n	8002438 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002460:	4b25      	ldr	r3, [pc, #148]	; (80024f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 030f 	and.w	r3, r3, #15
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d20c      	bcs.n	8002488 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246e:	4b22      	ldr	r3, [pc, #136]	; (80024f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002476:	4b20      	ldr	r3, [pc, #128]	; (80024f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d001      	beq.n	8002488 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e032      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	d008      	beq.n	80024a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002494:	4b19      	ldr	r3, [pc, #100]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	4916      	ldr	r1, [pc, #88]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d009      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024b2:	4b12      	ldr	r3, [pc, #72]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	490e      	ldr	r1, [pc, #56]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024c6:	f000 f821 	bl	800250c <HAL_RCC_GetSysClockFreq>
 80024ca:	4602      	mov	r2, r0
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	091b      	lsrs	r3, r3, #4
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	490a      	ldr	r1, [pc, #40]	; (8002500 <HAL_RCC_ClockConfig+0x1c0>)
 80024d8:	5ccb      	ldrb	r3, [r1, r3]
 80024da:	fa22 f303 	lsr.w	r3, r2, r3
 80024de:	4a09      	ldr	r2, [pc, #36]	; (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 80024e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024e2:	4b09      	ldr	r3, [pc, #36]	; (8002508 <HAL_RCC_ClockConfig+0x1c8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fe fd34 	bl	8000f54 <HAL_InitTick>

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40023c00 	.word	0x40023c00
 80024fc:	40023800 	.word	0x40023800
 8002500:	080052bc 	.word	0x080052bc
 8002504:	20000000 	.word	0x20000000
 8002508:	20000004 	.word	0x20000004

0800250c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800250c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002510:	b094      	sub	sp, #80	; 0x50
 8002512:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	647b      	str	r3, [r7, #68]	; 0x44
 8002518:	2300      	movs	r3, #0
 800251a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800251c:	2300      	movs	r3, #0
 800251e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002524:	4b79      	ldr	r3, [pc, #484]	; (800270c <HAL_RCC_GetSysClockFreq+0x200>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 030c 	and.w	r3, r3, #12
 800252c:	2b08      	cmp	r3, #8
 800252e:	d00d      	beq.n	800254c <HAL_RCC_GetSysClockFreq+0x40>
 8002530:	2b08      	cmp	r3, #8
 8002532:	f200 80e1 	bhi.w	80026f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002536:	2b00      	cmp	r3, #0
 8002538:	d002      	beq.n	8002540 <HAL_RCC_GetSysClockFreq+0x34>
 800253a:	2b04      	cmp	r3, #4
 800253c:	d003      	beq.n	8002546 <HAL_RCC_GetSysClockFreq+0x3a>
 800253e:	e0db      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002540:	4b73      	ldr	r3, [pc, #460]	; (8002710 <HAL_RCC_GetSysClockFreq+0x204>)
 8002542:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002544:	e0db      	b.n	80026fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002546:	4b73      	ldr	r3, [pc, #460]	; (8002714 <HAL_RCC_GetSysClockFreq+0x208>)
 8002548:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800254a:	e0d8      	b.n	80026fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800254c:	4b6f      	ldr	r3, [pc, #444]	; (800270c <HAL_RCC_GetSysClockFreq+0x200>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002554:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002556:	4b6d      	ldr	r3, [pc, #436]	; (800270c <HAL_RCC_GetSysClockFreq+0x200>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d063      	beq.n	800262a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002562:	4b6a      	ldr	r3, [pc, #424]	; (800270c <HAL_RCC_GetSysClockFreq+0x200>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	099b      	lsrs	r3, r3, #6
 8002568:	2200      	movs	r2, #0
 800256a:	63bb      	str	r3, [r7, #56]	; 0x38
 800256c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800256e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002574:	633b      	str	r3, [r7, #48]	; 0x30
 8002576:	2300      	movs	r3, #0
 8002578:	637b      	str	r3, [r7, #52]	; 0x34
 800257a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800257e:	4622      	mov	r2, r4
 8002580:	462b      	mov	r3, r5
 8002582:	f04f 0000 	mov.w	r0, #0
 8002586:	f04f 0100 	mov.w	r1, #0
 800258a:	0159      	lsls	r1, r3, #5
 800258c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002590:	0150      	lsls	r0, r2, #5
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4621      	mov	r1, r4
 8002598:	1a51      	subs	r1, r2, r1
 800259a:	6139      	str	r1, [r7, #16]
 800259c:	4629      	mov	r1, r5
 800259e:	eb63 0301 	sbc.w	r3, r3, r1
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	f04f 0200 	mov.w	r2, #0
 80025a8:	f04f 0300 	mov.w	r3, #0
 80025ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025b0:	4659      	mov	r1, fp
 80025b2:	018b      	lsls	r3, r1, #6
 80025b4:	4651      	mov	r1, sl
 80025b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025ba:	4651      	mov	r1, sl
 80025bc:	018a      	lsls	r2, r1, #6
 80025be:	4651      	mov	r1, sl
 80025c0:	ebb2 0801 	subs.w	r8, r2, r1
 80025c4:	4659      	mov	r1, fp
 80025c6:	eb63 0901 	sbc.w	r9, r3, r1
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	f04f 0300 	mov.w	r3, #0
 80025d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025de:	4690      	mov	r8, r2
 80025e0:	4699      	mov	r9, r3
 80025e2:	4623      	mov	r3, r4
 80025e4:	eb18 0303 	adds.w	r3, r8, r3
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	462b      	mov	r3, r5
 80025ec:	eb49 0303 	adc.w	r3, r9, r3
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025fe:	4629      	mov	r1, r5
 8002600:	024b      	lsls	r3, r1, #9
 8002602:	4621      	mov	r1, r4
 8002604:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002608:	4621      	mov	r1, r4
 800260a:	024a      	lsls	r2, r1, #9
 800260c:	4610      	mov	r0, r2
 800260e:	4619      	mov	r1, r3
 8002610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002612:	2200      	movs	r2, #0
 8002614:	62bb      	str	r3, [r7, #40]	; 0x28
 8002616:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002618:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800261c:	f7fd fde8 	bl	80001f0 <__aeabi_uldivmod>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4613      	mov	r3, r2
 8002626:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002628:	e058      	b.n	80026dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800262a:	4b38      	ldr	r3, [pc, #224]	; (800270c <HAL_RCC_GetSysClockFreq+0x200>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	099b      	lsrs	r3, r3, #6
 8002630:	2200      	movs	r2, #0
 8002632:	4618      	mov	r0, r3
 8002634:	4611      	mov	r1, r2
 8002636:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800263a:	623b      	str	r3, [r7, #32]
 800263c:	2300      	movs	r3, #0
 800263e:	627b      	str	r3, [r7, #36]	; 0x24
 8002640:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002644:	4642      	mov	r2, r8
 8002646:	464b      	mov	r3, r9
 8002648:	f04f 0000 	mov.w	r0, #0
 800264c:	f04f 0100 	mov.w	r1, #0
 8002650:	0159      	lsls	r1, r3, #5
 8002652:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002656:	0150      	lsls	r0, r2, #5
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	4641      	mov	r1, r8
 800265e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002662:	4649      	mov	r1, r9
 8002664:	eb63 0b01 	sbc.w	fp, r3, r1
 8002668:	f04f 0200 	mov.w	r2, #0
 800266c:	f04f 0300 	mov.w	r3, #0
 8002670:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002674:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002678:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800267c:	ebb2 040a 	subs.w	r4, r2, sl
 8002680:	eb63 050b 	sbc.w	r5, r3, fp
 8002684:	f04f 0200 	mov.w	r2, #0
 8002688:	f04f 0300 	mov.w	r3, #0
 800268c:	00eb      	lsls	r3, r5, #3
 800268e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002692:	00e2      	lsls	r2, r4, #3
 8002694:	4614      	mov	r4, r2
 8002696:	461d      	mov	r5, r3
 8002698:	4643      	mov	r3, r8
 800269a:	18e3      	adds	r3, r4, r3
 800269c:	603b      	str	r3, [r7, #0]
 800269e:	464b      	mov	r3, r9
 80026a0:	eb45 0303 	adc.w	r3, r5, r3
 80026a4:	607b      	str	r3, [r7, #4]
 80026a6:	f04f 0200 	mov.w	r2, #0
 80026aa:	f04f 0300 	mov.w	r3, #0
 80026ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026b2:	4629      	mov	r1, r5
 80026b4:	028b      	lsls	r3, r1, #10
 80026b6:	4621      	mov	r1, r4
 80026b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026bc:	4621      	mov	r1, r4
 80026be:	028a      	lsls	r2, r1, #10
 80026c0:	4610      	mov	r0, r2
 80026c2:	4619      	mov	r1, r3
 80026c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026c6:	2200      	movs	r2, #0
 80026c8:	61bb      	str	r3, [r7, #24]
 80026ca:	61fa      	str	r2, [r7, #28]
 80026cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026d0:	f7fd fd8e 	bl	80001f0 <__aeabi_uldivmod>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	4613      	mov	r3, r2
 80026da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026dc:	4b0b      	ldr	r3, [pc, #44]	; (800270c <HAL_RCC_GetSysClockFreq+0x200>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	0c1b      	lsrs	r3, r3, #16
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	3301      	adds	r3, #1
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80026ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026f6:	e002      	b.n	80026fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026f8:	4b05      	ldr	r3, [pc, #20]	; (8002710 <HAL_RCC_GetSysClockFreq+0x204>)
 80026fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002700:	4618      	mov	r0, r3
 8002702:	3750      	adds	r7, #80	; 0x50
 8002704:	46bd      	mov	sp, r7
 8002706:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800270a:	bf00      	nop
 800270c:	40023800 	.word	0x40023800
 8002710:	00f42400 	.word	0x00f42400
 8002714:	007a1200 	.word	0x007a1200

08002718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800271c:	4b03      	ldr	r3, [pc, #12]	; (800272c <HAL_RCC_GetHCLKFreq+0x14>)
 800271e:	681b      	ldr	r3, [r3, #0]
}
 8002720:	4618      	mov	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	20000000 	.word	0x20000000

08002730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002734:	f7ff fff0 	bl	8002718 <HAL_RCC_GetHCLKFreq>
 8002738:	4602      	mov	r2, r0
 800273a:	4b05      	ldr	r3, [pc, #20]	; (8002750 <HAL_RCC_GetPCLK1Freq+0x20>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	0a9b      	lsrs	r3, r3, #10
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	4903      	ldr	r1, [pc, #12]	; (8002754 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002746:	5ccb      	ldrb	r3, [r1, r3]
 8002748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800274c:	4618      	mov	r0, r3
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40023800 	.word	0x40023800
 8002754:	080052cc 	.word	0x080052cc

08002758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800275c:	f7ff ffdc 	bl	8002718 <HAL_RCC_GetHCLKFreq>
 8002760:	4602      	mov	r2, r0
 8002762:	4b05      	ldr	r3, [pc, #20]	; (8002778 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	0b5b      	lsrs	r3, r3, #13
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	4903      	ldr	r1, [pc, #12]	; (800277c <HAL_RCC_GetPCLK2Freq+0x24>)
 800276e:	5ccb      	ldrb	r3, [r1, r3]
 8002770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002774:	4618      	mov	r0, r3
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40023800 	.word	0x40023800
 800277c:	080052cc 	.word	0x080052cc

08002780 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e03f      	b.n	8002812 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d106      	bne.n	80027ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7fe fa7a 	bl	8000ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2224      	movs	r2, #36	; 0x24
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 f9cb 	bl	8002b60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	695a      	ldr	r2, [r3, #20]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2220      	movs	r2, #32
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2220      	movs	r2, #32
 800280c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b08a      	sub	sp, #40	; 0x28
 800281e:	af02      	add	r7, sp, #8
 8002820:	60f8      	str	r0, [r7, #12]
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	603b      	str	r3, [r7, #0]
 8002826:	4613      	mov	r3, r2
 8002828:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b20      	cmp	r3, #32
 8002838:	d17c      	bne.n	8002934 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d002      	beq.n	8002846 <HAL_UART_Transmit+0x2c>
 8002840:	88fb      	ldrh	r3, [r7, #6]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e075      	b.n	8002936 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <HAL_UART_Transmit+0x3e>
 8002854:	2302      	movs	r3, #2
 8002856:	e06e      	b.n	8002936 <HAL_UART_Transmit+0x11c>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2221      	movs	r2, #33	; 0x21
 800286a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800286e:	f7fe fbb5 	bl	8000fdc <HAL_GetTick>
 8002872:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	88fa      	ldrh	r2, [r7, #6]
 8002878:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	88fa      	ldrh	r2, [r7, #6]
 800287e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002888:	d108      	bne.n	800289c <HAL_UART_Transmit+0x82>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d104      	bne.n	800289c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	61bb      	str	r3, [r7, #24]
 800289a:	e003      	b.n	80028a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80028ac:	e02a      	b.n	8002904 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	2200      	movs	r2, #0
 80028b6:	2180      	movs	r1, #128	; 0x80
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 f8e2 	bl	8002a82 <UART_WaitOnFlagUntilTimeout>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e036      	b.n	8002936 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10b      	bne.n	80028e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	3302      	adds	r3, #2
 80028e2:	61bb      	str	r3, [r7, #24]
 80028e4:	e007      	b.n	80028f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	781a      	ldrb	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	3301      	adds	r3, #1
 80028f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	3b01      	subs	r3, #1
 80028fe:	b29a      	uxth	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002908:	b29b      	uxth	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1cf      	bne.n	80028ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2200      	movs	r2, #0
 8002916:	2140      	movs	r1, #64	; 0x40
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 f8b2 	bl	8002a82 <UART_WaitOnFlagUntilTimeout>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e006      	b.n	8002936 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2220      	movs	r2, #32
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002930:	2300      	movs	r3, #0
 8002932:	e000      	b.n	8002936 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002934:	2302      	movs	r3, #2
  }
}
 8002936:	4618      	mov	r0, r3
 8002938:	3720      	adds	r7, #32
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b08a      	sub	sp, #40	; 0x28
 8002942:	af02      	add	r7, sp, #8
 8002944:	60f8      	str	r0, [r7, #12]
 8002946:	60b9      	str	r1, [r7, #8]
 8002948:	603b      	str	r3, [r7, #0]
 800294a:	4613      	mov	r3, r2
 800294c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b20      	cmp	r3, #32
 800295c:	f040 808c 	bne.w	8002a78 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d002      	beq.n	800296c <HAL_UART_Receive+0x2e>
 8002966:	88fb      	ldrh	r3, [r7, #6]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e084      	b.n	8002a7a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002976:	2b01      	cmp	r3, #1
 8002978:	d101      	bne.n	800297e <HAL_UART_Receive+0x40>
 800297a:	2302      	movs	r3, #2
 800297c:	e07d      	b.n	8002a7a <HAL_UART_Receive+0x13c>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2222      	movs	r2, #34	; 0x22
 8002990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800299a:	f7fe fb1f 	bl	8000fdc <HAL_GetTick>
 800299e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	88fa      	ldrh	r2, [r7, #6]
 80029a4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	88fa      	ldrh	r2, [r7, #6]
 80029aa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b4:	d108      	bne.n	80029c8 <HAL_UART_Receive+0x8a>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d104      	bne.n	80029c8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	61bb      	str	r3, [r7, #24]
 80029c6:	e003      	b.n	80029d0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80029d8:	e043      	b.n	8002a62 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	2200      	movs	r2, #0
 80029e2:	2120      	movs	r1, #32
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f000 f84c 	bl	8002a82 <UART_WaitOnFlagUntilTimeout>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e042      	b.n	8002a7a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10c      	bne.n	8002a14 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	3302      	adds	r3, #2
 8002a10:	61bb      	str	r3, [r7, #24]
 8002a12:	e01f      	b.n	8002a54 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a1c:	d007      	beq.n	8002a2e <HAL_UART_Receive+0xf0>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10a      	bne.n	8002a3c <HAL_UART_Receive+0xfe>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d106      	bne.n	8002a3c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	701a      	strb	r2, [r3, #0]
 8002a3a:	e008      	b.n	8002a4e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	3301      	adds	r3, #1
 8002a52:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1b6      	bne.n	80029da <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002a74:	2300      	movs	r3, #0
 8002a76:	e000      	b.n	8002a7a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002a78:	2302      	movs	r3, #2
  }
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3720      	adds	r7, #32
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b090      	sub	sp, #64	; 0x40
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	60f8      	str	r0, [r7, #12]
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	603b      	str	r3, [r7, #0]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a92:	e050      	b.n	8002b36 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9a:	d04c      	beq.n	8002b36 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d007      	beq.n	8002ab2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002aa2:	f7fe fa9b 	bl	8000fdc <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d241      	bcs.n	8002b36 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	330c      	adds	r3, #12
 8002ab8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002abc:	e853 3f00 	ldrex	r3, [r3]
 8002ac0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	330c      	adds	r3, #12
 8002ad0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ad2:	637a      	str	r2, [r7, #52]	; 0x34
 8002ad4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ad8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ada:	e841 2300 	strex	r3, r2, [r1]
 8002ade:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1e5      	bne.n	8002ab2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	3314      	adds	r3, #20
 8002aec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	e853 3f00 	ldrex	r3, [r3]
 8002af4:	613b      	str	r3, [r7, #16]
   return(result);
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	f023 0301 	bic.w	r3, r3, #1
 8002afc:	63bb      	str	r3, [r7, #56]	; 0x38
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	3314      	adds	r3, #20
 8002b04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b06:	623a      	str	r2, [r7, #32]
 8002b08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b0a:	69f9      	ldr	r1, [r7, #28]
 8002b0c:	6a3a      	ldr	r2, [r7, #32]
 8002b0e:	e841 2300 	strex	r3, r2, [r1]
 8002b12:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1e5      	bne.n	8002ae6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2220      	movs	r2, #32
 8002b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e00f      	b.n	8002b56 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	bf0c      	ite	eq
 8002b46:	2301      	moveq	r3, #1
 8002b48:	2300      	movne	r3, #0
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	79fb      	ldrb	r3, [r7, #7]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d09f      	beq.n	8002a94 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3740      	adds	r7, #64	; 0x40
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b64:	b0c0      	sub	sp, #256	; 0x100
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b7c:	68d9      	ldr	r1, [r3, #12]
 8002b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	ea40 0301 	orr.w	r3, r0, r1
 8002b88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	431a      	orrs	r2, r3
 8002b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002bb8:	f021 010c 	bic.w	r1, r1, #12
 8002bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002bc6:	430b      	orrs	r3, r1
 8002bc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bda:	6999      	ldr	r1, [r3, #24]
 8002bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	ea40 0301 	orr.w	r3, r0, r1
 8002be6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	4b8f      	ldr	r3, [pc, #572]	; (8002e2c <UART_SetConfig+0x2cc>)
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d005      	beq.n	8002c00 <UART_SetConfig+0xa0>
 8002bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	4b8d      	ldr	r3, [pc, #564]	; (8002e30 <UART_SetConfig+0x2d0>)
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d104      	bne.n	8002c0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c00:	f7ff fdaa 	bl	8002758 <HAL_RCC_GetPCLK2Freq>
 8002c04:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002c08:	e003      	b.n	8002c12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c0a:	f7ff fd91 	bl	8002730 <HAL_RCC_GetPCLK1Freq>
 8002c0e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c1c:	f040 810c 	bne.w	8002e38 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c24:	2200      	movs	r2, #0
 8002c26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c2a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002c32:	4622      	mov	r2, r4
 8002c34:	462b      	mov	r3, r5
 8002c36:	1891      	adds	r1, r2, r2
 8002c38:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c3a:	415b      	adcs	r3, r3
 8002c3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c42:	4621      	mov	r1, r4
 8002c44:	eb12 0801 	adds.w	r8, r2, r1
 8002c48:	4629      	mov	r1, r5
 8002c4a:	eb43 0901 	adc.w	r9, r3, r1
 8002c4e:	f04f 0200 	mov.w	r2, #0
 8002c52:	f04f 0300 	mov.w	r3, #0
 8002c56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c62:	4690      	mov	r8, r2
 8002c64:	4699      	mov	r9, r3
 8002c66:	4623      	mov	r3, r4
 8002c68:	eb18 0303 	adds.w	r3, r8, r3
 8002c6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c70:	462b      	mov	r3, r5
 8002c72:	eb49 0303 	adc.w	r3, r9, r3
 8002c76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c86:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002c8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c8e:	460b      	mov	r3, r1
 8002c90:	18db      	adds	r3, r3, r3
 8002c92:	653b      	str	r3, [r7, #80]	; 0x50
 8002c94:	4613      	mov	r3, r2
 8002c96:	eb42 0303 	adc.w	r3, r2, r3
 8002c9a:	657b      	str	r3, [r7, #84]	; 0x54
 8002c9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ca0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ca4:	f7fd faa4 	bl	80001f0 <__aeabi_uldivmod>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	4b61      	ldr	r3, [pc, #388]	; (8002e34 <UART_SetConfig+0x2d4>)
 8002cae:	fba3 2302 	umull	r2, r3, r3, r2
 8002cb2:	095b      	lsrs	r3, r3, #5
 8002cb4:	011c      	lsls	r4, r3, #4
 8002cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002cc0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002cc4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002cc8:	4642      	mov	r2, r8
 8002cca:	464b      	mov	r3, r9
 8002ccc:	1891      	adds	r1, r2, r2
 8002cce:	64b9      	str	r1, [r7, #72]	; 0x48
 8002cd0:	415b      	adcs	r3, r3
 8002cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cd4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002cd8:	4641      	mov	r1, r8
 8002cda:	eb12 0a01 	adds.w	sl, r2, r1
 8002cde:	4649      	mov	r1, r9
 8002ce0:	eb43 0b01 	adc.w	fp, r3, r1
 8002ce4:	f04f 0200 	mov.w	r2, #0
 8002ce8:	f04f 0300 	mov.w	r3, #0
 8002cec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002cf0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002cf4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cf8:	4692      	mov	sl, r2
 8002cfa:	469b      	mov	fp, r3
 8002cfc:	4643      	mov	r3, r8
 8002cfe:	eb1a 0303 	adds.w	r3, sl, r3
 8002d02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d06:	464b      	mov	r3, r9
 8002d08:	eb4b 0303 	adc.w	r3, fp, r3
 8002d0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d1c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d24:	460b      	mov	r3, r1
 8002d26:	18db      	adds	r3, r3, r3
 8002d28:	643b      	str	r3, [r7, #64]	; 0x40
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	eb42 0303 	adc.w	r3, r2, r3
 8002d30:	647b      	str	r3, [r7, #68]	; 0x44
 8002d32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002d3a:	f7fd fa59 	bl	80001f0 <__aeabi_uldivmod>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	4611      	mov	r1, r2
 8002d44:	4b3b      	ldr	r3, [pc, #236]	; (8002e34 <UART_SetConfig+0x2d4>)
 8002d46:	fba3 2301 	umull	r2, r3, r3, r1
 8002d4a:	095b      	lsrs	r3, r3, #5
 8002d4c:	2264      	movs	r2, #100	; 0x64
 8002d4e:	fb02 f303 	mul.w	r3, r2, r3
 8002d52:	1acb      	subs	r3, r1, r3
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002d5a:	4b36      	ldr	r3, [pc, #216]	; (8002e34 <UART_SetConfig+0x2d4>)
 8002d5c:	fba3 2302 	umull	r2, r3, r3, r2
 8002d60:	095b      	lsrs	r3, r3, #5
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d68:	441c      	add	r4, r3
 8002d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d74:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002d78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002d7c:	4642      	mov	r2, r8
 8002d7e:	464b      	mov	r3, r9
 8002d80:	1891      	adds	r1, r2, r2
 8002d82:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d84:	415b      	adcs	r3, r3
 8002d86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d8c:	4641      	mov	r1, r8
 8002d8e:	1851      	adds	r1, r2, r1
 8002d90:	6339      	str	r1, [r7, #48]	; 0x30
 8002d92:	4649      	mov	r1, r9
 8002d94:	414b      	adcs	r3, r1
 8002d96:	637b      	str	r3, [r7, #52]	; 0x34
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	f04f 0300 	mov.w	r3, #0
 8002da0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002da4:	4659      	mov	r1, fp
 8002da6:	00cb      	lsls	r3, r1, #3
 8002da8:	4651      	mov	r1, sl
 8002daa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dae:	4651      	mov	r1, sl
 8002db0:	00ca      	lsls	r2, r1, #3
 8002db2:	4610      	mov	r0, r2
 8002db4:	4619      	mov	r1, r3
 8002db6:	4603      	mov	r3, r0
 8002db8:	4642      	mov	r2, r8
 8002dba:	189b      	adds	r3, r3, r2
 8002dbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002dc0:	464b      	mov	r3, r9
 8002dc2:	460a      	mov	r2, r1
 8002dc4:	eb42 0303 	adc.w	r3, r2, r3
 8002dc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002dd8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002ddc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002de0:	460b      	mov	r3, r1
 8002de2:	18db      	adds	r3, r3, r3
 8002de4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002de6:	4613      	mov	r3, r2
 8002de8:	eb42 0303 	adc.w	r3, r2, r3
 8002dec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002df2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002df6:	f7fd f9fb 	bl	80001f0 <__aeabi_uldivmod>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	4b0d      	ldr	r3, [pc, #52]	; (8002e34 <UART_SetConfig+0x2d4>)
 8002e00:	fba3 1302 	umull	r1, r3, r3, r2
 8002e04:	095b      	lsrs	r3, r3, #5
 8002e06:	2164      	movs	r1, #100	; 0x64
 8002e08:	fb01 f303 	mul.w	r3, r1, r3
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	3332      	adds	r3, #50	; 0x32
 8002e12:	4a08      	ldr	r2, [pc, #32]	; (8002e34 <UART_SetConfig+0x2d4>)
 8002e14:	fba2 2303 	umull	r2, r3, r2, r3
 8002e18:	095b      	lsrs	r3, r3, #5
 8002e1a:	f003 0207 	and.w	r2, r3, #7
 8002e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4422      	add	r2, r4
 8002e26:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e28:	e105      	b.n	8003036 <UART_SetConfig+0x4d6>
 8002e2a:	bf00      	nop
 8002e2c:	40011000 	.word	0x40011000
 8002e30:	40011400 	.word	0x40011400
 8002e34:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e42:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002e46:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002e4a:	4642      	mov	r2, r8
 8002e4c:	464b      	mov	r3, r9
 8002e4e:	1891      	adds	r1, r2, r2
 8002e50:	6239      	str	r1, [r7, #32]
 8002e52:	415b      	adcs	r3, r3
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24
 8002e56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e5a:	4641      	mov	r1, r8
 8002e5c:	1854      	adds	r4, r2, r1
 8002e5e:	4649      	mov	r1, r9
 8002e60:	eb43 0501 	adc.w	r5, r3, r1
 8002e64:	f04f 0200 	mov.w	r2, #0
 8002e68:	f04f 0300 	mov.w	r3, #0
 8002e6c:	00eb      	lsls	r3, r5, #3
 8002e6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e72:	00e2      	lsls	r2, r4, #3
 8002e74:	4614      	mov	r4, r2
 8002e76:	461d      	mov	r5, r3
 8002e78:	4643      	mov	r3, r8
 8002e7a:	18e3      	adds	r3, r4, r3
 8002e7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e80:	464b      	mov	r3, r9
 8002e82:	eb45 0303 	adc.w	r3, r5, r3
 8002e86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e96:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	f04f 0300 	mov.w	r3, #0
 8002ea2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002ea6:	4629      	mov	r1, r5
 8002ea8:	008b      	lsls	r3, r1, #2
 8002eaa:	4621      	mov	r1, r4
 8002eac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002eb0:	4621      	mov	r1, r4
 8002eb2:	008a      	lsls	r2, r1, #2
 8002eb4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002eb8:	f7fd f99a 	bl	80001f0 <__aeabi_uldivmod>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4b60      	ldr	r3, [pc, #384]	; (8003044 <UART_SetConfig+0x4e4>)
 8002ec2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ec6:	095b      	lsrs	r3, r3, #5
 8002ec8:	011c      	lsls	r4, r3, #4
 8002eca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ed4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ed8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002edc:	4642      	mov	r2, r8
 8002ede:	464b      	mov	r3, r9
 8002ee0:	1891      	adds	r1, r2, r2
 8002ee2:	61b9      	str	r1, [r7, #24]
 8002ee4:	415b      	adcs	r3, r3
 8002ee6:	61fb      	str	r3, [r7, #28]
 8002ee8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002eec:	4641      	mov	r1, r8
 8002eee:	1851      	adds	r1, r2, r1
 8002ef0:	6139      	str	r1, [r7, #16]
 8002ef2:	4649      	mov	r1, r9
 8002ef4:	414b      	adcs	r3, r1
 8002ef6:	617b      	str	r3, [r7, #20]
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	f04f 0300 	mov.w	r3, #0
 8002f00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f04:	4659      	mov	r1, fp
 8002f06:	00cb      	lsls	r3, r1, #3
 8002f08:	4651      	mov	r1, sl
 8002f0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f0e:	4651      	mov	r1, sl
 8002f10:	00ca      	lsls	r2, r1, #3
 8002f12:	4610      	mov	r0, r2
 8002f14:	4619      	mov	r1, r3
 8002f16:	4603      	mov	r3, r0
 8002f18:	4642      	mov	r2, r8
 8002f1a:	189b      	adds	r3, r3, r2
 8002f1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f20:	464b      	mov	r3, r9
 8002f22:	460a      	mov	r2, r1
 8002f24:	eb42 0303 	adc.w	r3, r2, r3
 8002f28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f36:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	f04f 0300 	mov.w	r3, #0
 8002f40:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002f44:	4649      	mov	r1, r9
 8002f46:	008b      	lsls	r3, r1, #2
 8002f48:	4641      	mov	r1, r8
 8002f4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f4e:	4641      	mov	r1, r8
 8002f50:	008a      	lsls	r2, r1, #2
 8002f52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002f56:	f7fd f94b 	bl	80001f0 <__aeabi_uldivmod>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	4b39      	ldr	r3, [pc, #228]	; (8003044 <UART_SetConfig+0x4e4>)
 8002f60:	fba3 1302 	umull	r1, r3, r3, r2
 8002f64:	095b      	lsrs	r3, r3, #5
 8002f66:	2164      	movs	r1, #100	; 0x64
 8002f68:	fb01 f303 	mul.w	r3, r1, r3
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	3332      	adds	r3, #50	; 0x32
 8002f72:	4a34      	ldr	r2, [pc, #208]	; (8003044 <UART_SetConfig+0x4e4>)
 8002f74:	fba2 2303 	umull	r2, r3, r2, r3
 8002f78:	095b      	lsrs	r3, r3, #5
 8002f7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f7e:	441c      	add	r4, r3
 8002f80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f84:	2200      	movs	r2, #0
 8002f86:	673b      	str	r3, [r7, #112]	; 0x70
 8002f88:	677a      	str	r2, [r7, #116]	; 0x74
 8002f8a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f8e:	4642      	mov	r2, r8
 8002f90:	464b      	mov	r3, r9
 8002f92:	1891      	adds	r1, r2, r2
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	415b      	adcs	r3, r3
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f9e:	4641      	mov	r1, r8
 8002fa0:	1851      	adds	r1, r2, r1
 8002fa2:	6039      	str	r1, [r7, #0]
 8002fa4:	4649      	mov	r1, r9
 8002fa6:	414b      	adcs	r3, r1
 8002fa8:	607b      	str	r3, [r7, #4]
 8002faa:	f04f 0200 	mov.w	r2, #0
 8002fae:	f04f 0300 	mov.w	r3, #0
 8002fb2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002fb6:	4659      	mov	r1, fp
 8002fb8:	00cb      	lsls	r3, r1, #3
 8002fba:	4651      	mov	r1, sl
 8002fbc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fc0:	4651      	mov	r1, sl
 8002fc2:	00ca      	lsls	r2, r1, #3
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4603      	mov	r3, r0
 8002fca:	4642      	mov	r2, r8
 8002fcc:	189b      	adds	r3, r3, r2
 8002fce:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fd0:	464b      	mov	r3, r9
 8002fd2:	460a      	mov	r2, r1
 8002fd4:	eb42 0303 	adc.w	r3, r2, r3
 8002fd8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	663b      	str	r3, [r7, #96]	; 0x60
 8002fe4:	667a      	str	r2, [r7, #100]	; 0x64
 8002fe6:	f04f 0200 	mov.w	r2, #0
 8002fea:	f04f 0300 	mov.w	r3, #0
 8002fee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002ff2:	4649      	mov	r1, r9
 8002ff4:	008b      	lsls	r3, r1, #2
 8002ff6:	4641      	mov	r1, r8
 8002ff8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ffc:	4641      	mov	r1, r8
 8002ffe:	008a      	lsls	r2, r1, #2
 8003000:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003004:	f7fd f8f4 	bl	80001f0 <__aeabi_uldivmod>
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	4b0d      	ldr	r3, [pc, #52]	; (8003044 <UART_SetConfig+0x4e4>)
 800300e:	fba3 1302 	umull	r1, r3, r3, r2
 8003012:	095b      	lsrs	r3, r3, #5
 8003014:	2164      	movs	r1, #100	; 0x64
 8003016:	fb01 f303 	mul.w	r3, r1, r3
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	3332      	adds	r3, #50	; 0x32
 8003020:	4a08      	ldr	r2, [pc, #32]	; (8003044 <UART_SetConfig+0x4e4>)
 8003022:	fba2 2303 	umull	r2, r3, r2, r3
 8003026:	095b      	lsrs	r3, r3, #5
 8003028:	f003 020f 	and.w	r2, r3, #15
 800302c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4422      	add	r2, r4
 8003034:	609a      	str	r2, [r3, #8]
}
 8003036:	bf00      	nop
 8003038:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800303c:	46bd      	mov	sp, r7
 800303e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003042:	bf00      	nop
 8003044:	51eb851f 	.word	0x51eb851f

08003048 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003048:	b084      	sub	sp, #16
 800304a:	b580      	push	{r7, lr}
 800304c:	b084      	sub	sp, #16
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	f107 001c 	add.w	r0, r7, #28
 8003056:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800305a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305c:	2b01      	cmp	r3, #1
 800305e:	d122      	bne.n	80030a6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003064:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003074:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800308a:	2b01      	cmp	r3, #1
 800308c:	d105      	bne.n	800309a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 faa2 	bl	80035e4 <USB_CoreReset>
 80030a0:	4603      	mov	r3, r0
 80030a2:	73fb      	strb	r3, [r7, #15]
 80030a4:	e01a      	b.n	80030dc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 fa96 	bl	80035e4 <USB_CoreReset>
 80030b8:	4603      	mov	r3, r0
 80030ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80030bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d106      	bne.n	80030d0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	639a      	str	r2, [r3, #56]	; 0x38
 80030ce:	e005      	b.n	80030dc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80030dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d10b      	bne.n	80030fa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f043 0206 	orr.w	r2, r3, #6
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f043 0220 	orr.w	r2, r3, #32
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003106:	b004      	add	sp, #16
 8003108:	4770      	bx	lr

0800310a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f023 0201 	bic.w	r2, r3, #1
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	460b      	mov	r3, r1
 8003136:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003148:	78fb      	ldrb	r3, [r7, #3]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d115      	bne.n	800317a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800315a:	2001      	movs	r0, #1
 800315c:	f7fd ff4a 	bl	8000ff4 <HAL_Delay>
      ms++;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	3301      	adds	r3, #1
 8003164:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 fa2e 	bl	80035c8 <USB_GetMode>
 800316c:	4603      	mov	r3, r0
 800316e:	2b01      	cmp	r3, #1
 8003170:	d01e      	beq.n	80031b0 <USB_SetCurrentMode+0x84>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2b31      	cmp	r3, #49	; 0x31
 8003176:	d9f0      	bls.n	800315a <USB_SetCurrentMode+0x2e>
 8003178:	e01a      	b.n	80031b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800317a:	78fb      	ldrb	r3, [r7, #3]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d115      	bne.n	80031ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800318c:	2001      	movs	r0, #1
 800318e:	f7fd ff31 	bl	8000ff4 <HAL_Delay>
      ms++;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	3301      	adds	r3, #1
 8003196:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 fa15 	bl	80035c8 <USB_GetMode>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d005      	beq.n	80031b0 <USB_SetCurrentMode+0x84>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2b31      	cmp	r3, #49	; 0x31
 80031a8:	d9f0      	bls.n	800318c <USB_SetCurrentMode+0x60>
 80031aa:	e001      	b.n	80031b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e005      	b.n	80031bc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2b32      	cmp	r3, #50	; 0x32
 80031b4:	d101      	bne.n	80031ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80031c4:	b084      	sub	sp, #16
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b086      	sub	sp, #24
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
 80031ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80031d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80031d6:	2300      	movs	r3, #0
 80031d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80031de:	2300      	movs	r3, #0
 80031e0:	613b      	str	r3, [r7, #16]
 80031e2:	e009      	b.n	80031f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	3340      	adds	r3, #64	; 0x40
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	2200      	movs	r2, #0
 80031f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	3301      	adds	r3, #1
 80031f6:	613b      	str	r3, [r7, #16]
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	2b0e      	cmp	r3, #14
 80031fc:	d9f2      	bls.n	80031e4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80031fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003200:	2b00      	cmp	r3, #0
 8003202:	d11c      	bne.n	800323e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003212:	f043 0302 	orr.w	r3, r3, #2
 8003216:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003228:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003234:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	639a      	str	r2, [r3, #56]	; 0x38
 800323c:	e00b      	b.n	8003256 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003242:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800325c:	461a      	mov	r2, r3
 800325e:	2300      	movs	r3, #0
 8003260:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003268:	4619      	mov	r1, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003270:	461a      	mov	r2, r3
 8003272:	680b      	ldr	r3, [r1, #0]
 8003274:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003278:	2b01      	cmp	r3, #1
 800327a:	d10c      	bne.n	8003296 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800327c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327e:	2b00      	cmp	r3, #0
 8003280:	d104      	bne.n	800328c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003282:	2100      	movs	r1, #0
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 f965 	bl	8003554 <USB_SetDevSpeed>
 800328a:	e008      	b.n	800329e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800328c:	2101      	movs	r1, #1
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f960 	bl	8003554 <USB_SetDevSpeed>
 8003294:	e003      	b.n	800329e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003296:	2103      	movs	r1, #3
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 f95b 	bl	8003554 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800329e:	2110      	movs	r1, #16
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 f8f3 	bl	800348c <USB_FlushTxFifo>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f91f 	bl	80034f4 <USB_FlushRxFifo>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032c6:	461a      	mov	r2, r3
 80032c8:	2300      	movs	r3, #0
 80032ca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032d2:	461a      	mov	r2, r3
 80032d4:	2300      	movs	r3, #0
 80032d6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032de:	461a      	mov	r2, r3
 80032e0:	2300      	movs	r3, #0
 80032e2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032e4:	2300      	movs	r3, #0
 80032e6:	613b      	str	r3, [r7, #16]
 80032e8:	e043      	b.n	8003372 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	015a      	lsls	r2, r3, #5
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	4413      	add	r3, r2
 80032f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003300:	d118      	bne.n	8003334 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10a      	bne.n	800331e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	015a      	lsls	r2, r3, #5
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4413      	add	r3, r2
 8003310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003314:	461a      	mov	r2, r3
 8003316:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800331a:	6013      	str	r3, [r2, #0]
 800331c:	e013      	b.n	8003346 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	4413      	add	r3, r2
 8003326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800332a:	461a      	mov	r2, r3
 800332c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	e008      	b.n	8003346 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	015a      	lsls	r2, r3, #5
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4413      	add	r3, r2
 800333c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003340:	461a      	mov	r2, r3
 8003342:	2300      	movs	r3, #0
 8003344:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	015a      	lsls	r2, r3, #5
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	4413      	add	r3, r2
 800334e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003352:	461a      	mov	r2, r3
 8003354:	2300      	movs	r3, #0
 8003356:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	015a      	lsls	r2, r3, #5
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4413      	add	r3, r2
 8003360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003364:	461a      	mov	r2, r3
 8003366:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800336a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	3301      	adds	r3, #1
 8003370:	613b      	str	r3, [r7, #16]
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	429a      	cmp	r2, r3
 8003378:	d3b7      	bcc.n	80032ea <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800337a:	2300      	movs	r3, #0
 800337c:	613b      	str	r3, [r7, #16]
 800337e:	e043      	b.n	8003408 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4413      	add	r3, r2
 8003388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003392:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003396:	d118      	bne.n	80033ca <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10a      	bne.n	80033b4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	015a      	lsls	r2, r3, #5
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4413      	add	r3, r2
 80033a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033aa:	461a      	mov	r2, r3
 80033ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	e013      	b.n	80033dc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	015a      	lsls	r2, r3, #5
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4413      	add	r3, r2
 80033bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033c0:	461a      	mov	r2, r3
 80033c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	e008      	b.n	80033dc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	015a      	lsls	r2, r3, #5
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	4413      	add	r3, r2
 80033d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d6:	461a      	mov	r2, r3
 80033d8:	2300      	movs	r3, #0
 80033da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	015a      	lsls	r2, r3, #5
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e8:	461a      	mov	r2, r3
 80033ea:	2300      	movs	r3, #0
 80033ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	015a      	lsls	r2, r3, #5
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	4413      	add	r3, r2
 80033f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033fa:	461a      	mov	r2, r3
 80033fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003400:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	3301      	adds	r3, #1
 8003406:	613b      	str	r3, [r7, #16]
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	429a      	cmp	r2, r3
 800340e:	d3b7      	bcc.n	8003380 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800341e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003422:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003430:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003434:	2b00      	cmp	r3, #0
 8003436:	d105      	bne.n	8003444 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	f043 0210 	orr.w	r2, r3, #16
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	699a      	ldr	r2, [r3, #24]
 8003448:	4b0f      	ldr	r3, [pc, #60]	; (8003488 <USB_DevInit+0x2c4>)
 800344a:	4313      	orrs	r3, r2
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003452:	2b00      	cmp	r3, #0
 8003454:	d005      	beq.n	8003462 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	f043 0208 	orr.w	r2, r3, #8
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003464:	2b01      	cmp	r3, #1
 8003466:	d107      	bne.n	8003478 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003470:	f043 0304 	orr.w	r3, r3, #4
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003478:	7dfb      	ldrb	r3, [r7, #23]
}
 800347a:	4618      	mov	r0, r3
 800347c:	3718      	adds	r7, #24
 800347e:	46bd      	mov	sp, r7
 8003480:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003484:	b004      	add	sp, #16
 8003486:	4770      	bx	lr
 8003488:	803c3800 	.word	0x803c3800

0800348c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003496:	2300      	movs	r3, #0
 8003498:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	3301      	adds	r3, #1
 800349e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4a13      	ldr	r2, [pc, #76]	; (80034f0 <USB_FlushTxFifo+0x64>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d901      	bls.n	80034ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e01b      	b.n	80034e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	daf2      	bge.n	800349a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80034b4:	2300      	movs	r3, #0
 80034b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	019b      	lsls	r3, r3, #6
 80034bc:	f043 0220 	orr.w	r2, r3, #32
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	3301      	adds	r3, #1
 80034c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	4a08      	ldr	r2, [pc, #32]	; (80034f0 <USB_FlushTxFifo+0x64>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d901      	bls.n	80034d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e006      	b.n	80034e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	2b20      	cmp	r3, #32
 80034e0:	d0f0      	beq.n	80034c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	00030d40 	.word	0x00030d40

080034f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	3301      	adds	r3, #1
 8003504:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4a11      	ldr	r2, [pc, #68]	; (8003550 <USB_FlushRxFifo+0x5c>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d901      	bls.n	8003512 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e018      	b.n	8003544 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	2b00      	cmp	r3, #0
 8003518:	daf2      	bge.n	8003500 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800351a:	2300      	movs	r3, #0
 800351c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2210      	movs	r2, #16
 8003522:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	3301      	adds	r3, #1
 8003528:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	4a08      	ldr	r2, [pc, #32]	; (8003550 <USB_FlushRxFifo+0x5c>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d901      	bls.n	8003536 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e006      	b.n	8003544 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	f003 0310 	and.w	r3, r3, #16
 800353e:	2b10      	cmp	r3, #16
 8003540:	d0f0      	beq.n	8003524 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	00030d40 	.word	0x00030d40

08003554 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	78fb      	ldrb	r3, [r7, #3]
 800356e:	68f9      	ldr	r1, [r7, #12]
 8003570:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003574:	4313      	orrs	r3, r2
 8003576:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003586:	b480      	push	{r7}
 8003588:	b085      	sub	sp, #20
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80035a0:	f023 0303 	bic.w	r3, r3, #3
 80035a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035b4:	f043 0302 	orr.w	r3, r3, #2
 80035b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3714      	adds	r7, #20
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	f003 0301 	and.w	r3, r3, #1
}
 80035d8:	4618      	mov	r0, r3
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	3301      	adds	r3, #1
 80035f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	4a13      	ldr	r2, [pc, #76]	; (8003648 <USB_CoreReset+0x64>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d901      	bls.n	8003602 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e01b      	b.n	800363a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	2b00      	cmp	r3, #0
 8003608:	daf2      	bge.n	80035f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800360a:	2300      	movs	r3, #0
 800360c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	f043 0201 	orr.w	r2, r3, #1
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	3301      	adds	r3, #1
 800361e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4a09      	ldr	r2, [pc, #36]	; (8003648 <USB_CoreReset+0x64>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d901      	bls.n	800362c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e006      	b.n	800363a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b01      	cmp	r3, #1
 8003636:	d0f0      	beq.n	800361a <USB_CoreReset+0x36>

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	00030d40 	.word	0x00030d40

0800364c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	4603      	mov	r3, r0
 8003654:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003656:	2300      	movs	r3, #0
 8003658:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800365a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800365e:	2b84      	cmp	r3, #132	; 0x84
 8003660:	d005      	beq.n	800366e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003662:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	4413      	add	r3, r2
 800366a:	3303      	adds	r3, #3
 800366c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800366e:	68fb      	ldr	r3, [r7, #12]
}
 8003670:	4618      	mov	r0, r3
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800367c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800367e:	b089      	sub	sp, #36	; 0x24
 8003680:	af04      	add	r7, sp, #16
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d020      	beq.n	80036d0 <osThreadCreate+0x54>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d01c      	beq.n	80036d0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685c      	ldr	r4, [r3, #4]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681d      	ldr	r5, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	691e      	ldr	r6, [r3, #16]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff ffcf 	bl	800364c <makeFreeRtosPriority>
 80036ae:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80036b8:	9202      	str	r2, [sp, #8]
 80036ba:	9301      	str	r3, [sp, #4]
 80036bc:	9100      	str	r1, [sp, #0]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	4632      	mov	r2, r6
 80036c2:	4629      	mov	r1, r5
 80036c4:	4620      	mov	r0, r4
 80036c6:	f000 f8ed 	bl	80038a4 <xTaskCreateStatic>
 80036ca:	4603      	mov	r3, r0
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	e01c      	b.n	800370a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685c      	ldr	r4, [r3, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80036dc:	b29e      	uxth	r6, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff ffb1 	bl	800364c <makeFreeRtosPriority>
 80036ea:	4602      	mov	r2, r0
 80036ec:	f107 030c 	add.w	r3, r7, #12
 80036f0:	9301      	str	r3, [sp, #4]
 80036f2:	9200      	str	r2, [sp, #0]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	4632      	mov	r2, r6
 80036f8:	4629      	mov	r1, r5
 80036fa:	4620      	mov	r0, r4
 80036fc:	f000 f92f 	bl	800395e <xTaskCreate>
 8003700:	4603      	mov	r3, r0
 8003702:	2b01      	cmp	r3, #1
 8003704:	d001      	beq.n	800370a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003706:	2300      	movs	r3, #0
 8003708:	e000      	b.n	800370c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800370a:	68fb      	ldr	r3, [r7, #12]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003714 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <osDelay+0x16>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	e000      	b.n	800372c <osDelay+0x18>
 800372a:	2301      	movs	r3, #1
 800372c:	4618      	mov	r0, r3
 800372e:	f000 fa63 	bl	8003bf8 <vTaskDelay>
  
  return osOK;
 8003732:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f103 0208 	add.w	r2, r3, #8
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f04f 32ff 	mov.w	r2, #4294967295
 8003754:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f103 0208 	add.w	r2, r3, #8
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f103 0208 	add.w	r2, r3, #8
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003796:	b480      	push	{r7}
 8003798:	b085      	sub	sp, #20
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
 800379e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	601a      	str	r2, [r3, #0]
}
 80037d2:	bf00      	nop
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037de:	b480      	push	{r7}
 80037e0:	b085      	sub	sp, #20
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
 80037e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f4:	d103      	bne.n	80037fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	e00c      	b.n	8003818 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3308      	adds	r3, #8
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	e002      	b.n	800380c <vListInsert+0x2e>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	60fb      	str	r3, [r7, #12]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	429a      	cmp	r2, r3
 8003816:	d2f6      	bcs.n	8003806 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	1c5a      	adds	r2, r3, #1
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	601a      	str	r2, [r3, #0]
}
 8003844:	bf00      	nop
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6892      	ldr	r2, [r2, #8]
 8003866:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6852      	ldr	r2, [r2, #4]
 8003870:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	429a      	cmp	r2, r3
 800387a:	d103      	bne.n	8003884 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	1e5a      	subs	r2, r3, #1
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08e      	sub	sp, #56	; 0x38
 80038a8:	af04      	add	r7, sp, #16
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
 80038b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80038b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10a      	bne.n	80038ce <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80038b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038bc:	f383 8811 	msr	BASEPRI, r3
 80038c0:	f3bf 8f6f 	isb	sy
 80038c4:	f3bf 8f4f 	dsb	sy
 80038c8:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80038ca:	bf00      	nop
 80038cc:	e7fe      	b.n	80038cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80038ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10a      	bne.n	80038ea <xTaskCreateStatic+0x46>
	__asm volatile
 80038d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d8:	f383 8811 	msr	BASEPRI, r3
 80038dc:	f3bf 8f6f 	isb	sy
 80038e0:	f3bf 8f4f 	dsb	sy
 80038e4:	61fb      	str	r3, [r7, #28]
}
 80038e6:	bf00      	nop
 80038e8:	e7fe      	b.n	80038e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80038ea:	23b4      	movs	r3, #180	; 0xb4
 80038ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	2bb4      	cmp	r3, #180	; 0xb4
 80038f2:	d00a      	beq.n	800390a <xTaskCreateStatic+0x66>
	__asm volatile
 80038f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f8:	f383 8811 	msr	BASEPRI, r3
 80038fc:	f3bf 8f6f 	isb	sy
 8003900:	f3bf 8f4f 	dsb	sy
 8003904:	61bb      	str	r3, [r7, #24]
}
 8003906:	bf00      	nop
 8003908:	e7fe      	b.n	8003908 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800390a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800390c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800390e:	2b00      	cmp	r3, #0
 8003910:	d01e      	beq.n	8003950 <xTaskCreateStatic+0xac>
 8003912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003914:	2b00      	cmp	r3, #0
 8003916:	d01b      	beq.n	8003950 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003920:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	2202      	movs	r2, #2
 8003926:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800392a:	2300      	movs	r3, #0
 800392c:	9303      	str	r3, [sp, #12]
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	9302      	str	r3, [sp, #8]
 8003932:	f107 0314 	add.w	r3, r7, #20
 8003936:	9301      	str	r3, [sp, #4]
 8003938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	68b9      	ldr	r1, [r7, #8]
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 f850 	bl	80039e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003948:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800394a:	f000 f8eb 	bl	8003b24 <prvAddNewTaskToReadyList>
 800394e:	e001      	b.n	8003954 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003950:	2300      	movs	r3, #0
 8003952:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003954:	697b      	ldr	r3, [r7, #20]
	}
 8003956:	4618      	mov	r0, r3
 8003958:	3728      	adds	r7, #40	; 0x28
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800395e:	b580      	push	{r7, lr}
 8003960:	b08c      	sub	sp, #48	; 0x30
 8003962:	af04      	add	r7, sp, #16
 8003964:	60f8      	str	r0, [r7, #12]
 8003966:	60b9      	str	r1, [r7, #8]
 8003968:	603b      	str	r3, [r7, #0]
 800396a:	4613      	mov	r3, r2
 800396c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800396e:	88fb      	ldrh	r3, [r7, #6]
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	4618      	mov	r0, r3
 8003974:	f000 fd42 	bl	80043fc <pvPortMalloc>
 8003978:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00e      	beq.n	800399e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003980:	20b4      	movs	r0, #180	; 0xb4
 8003982:	f000 fd3b 	bl	80043fc <pvPortMalloc>
 8003986:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	631a      	str	r2, [r3, #48]	; 0x30
 8003994:	e005      	b.n	80039a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003996:	6978      	ldr	r0, [r7, #20]
 8003998:	f000 fdfc 	bl	8004594 <vPortFree>
 800399c:	e001      	b.n	80039a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800399e:	2300      	movs	r3, #0
 80039a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d017      	beq.n	80039d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80039b0:	88fa      	ldrh	r2, [r7, #6]
 80039b2:	2300      	movs	r3, #0
 80039b4:	9303      	str	r3, [sp, #12]
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	9302      	str	r3, [sp, #8]
 80039ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039bc:	9301      	str	r3, [sp, #4]
 80039be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	68b9      	ldr	r1, [r7, #8]
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 f80e 	bl	80039e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039cc:	69f8      	ldr	r0, [r7, #28]
 80039ce:	f000 f8a9 	bl	8003b24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80039d2:	2301      	movs	r3, #1
 80039d4:	61bb      	str	r3, [r7, #24]
 80039d6:	e002      	b.n	80039de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80039d8:	f04f 33ff 	mov.w	r3, #4294967295
 80039dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80039de:	69bb      	ldr	r3, [r7, #24]
	}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3720      	adds	r7, #32
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b088      	sub	sp, #32
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
 80039f4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80039f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a00:	3b01      	subs	r3, #1
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	f023 0307 	bic.w	r3, r3, #7
 8003a0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1e:	f383 8811 	msr	BASEPRI, r3
 8003a22:	f3bf 8f6f 	isb	sy
 8003a26:	f3bf 8f4f 	dsb	sy
 8003a2a:	617b      	str	r3, [r7, #20]
}
 8003a2c:	bf00      	nop
 8003a2e:	e7fe      	b.n	8003a2e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d01f      	beq.n	8003a76 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a36:	2300      	movs	r3, #0
 8003a38:	61fb      	str	r3, [r7, #28]
 8003a3a:	e012      	b.n	8003a62 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a3c:	68ba      	ldr	r2, [r7, #8]
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	4413      	add	r3, r2
 8003a42:	7819      	ldrb	r1, [r3, #0]
 8003a44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	4413      	add	r3, r2
 8003a4a:	3334      	adds	r3, #52	; 0x34
 8003a4c:	460a      	mov	r2, r1
 8003a4e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	4413      	add	r3, r2
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d006      	beq.n	8003a6a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	61fb      	str	r3, [r7, #28]
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	2b0f      	cmp	r3, #15
 8003a66:	d9e9      	bls.n	8003a3c <prvInitialiseNewTask+0x54>
 8003a68:	e000      	b.n	8003a6c <prvInitialiseNewTask+0x84>
			{
				break;
 8003a6a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a74:	e003      	b.n	8003a7e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a80:	2b06      	cmp	r3, #6
 8003a82:	d901      	bls.n	8003a88 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a84:	2306      	movs	r3, #6
 8003a86:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a8c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a92:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a96:	2200      	movs	r2, #0
 8003a98:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7ff fe6c 	bl	800377c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa6:	3318      	adds	r3, #24
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff fe67 	bl	800377c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ab2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab6:	f1c3 0207 	rsb	r2, r3, #7
 8003aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003abc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ac2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad6:	334c      	adds	r3, #76	; 0x4c
 8003ad8:	2260      	movs	r2, #96	; 0x60
 8003ada:	2100      	movs	r1, #0
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 ff9a 	bl	8004a16 <memset>
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae4:	4a0c      	ldr	r2, [pc, #48]	; (8003b18 <prvInitialiseNewTask+0x130>)
 8003ae6:	651a      	str	r2, [r3, #80]	; 0x50
 8003ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aea:	4a0c      	ldr	r2, [pc, #48]	; (8003b1c <prvInitialiseNewTask+0x134>)
 8003aec:	655a      	str	r2, [r3, #84]	; 0x54
 8003aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af0:	4a0b      	ldr	r2, [pc, #44]	; (8003b20 <prvInitialiseNewTask+0x138>)
 8003af2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	68f9      	ldr	r1, [r7, #12]
 8003af8:	69b8      	ldr	r0, [r7, #24]
 8003afa:	f000 fb59 	bl	80041b0 <pxPortInitialiseStack>
 8003afe:	4602      	mov	r2, r0
 8003b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b02:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d002      	beq.n	8003b10 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b0e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b10:	bf00      	nop
 8003b12:	3720      	adds	r7, #32
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	080052f4 	.word	0x080052f4
 8003b1c:	08005314 	.word	0x08005314
 8003b20:	080052d4 	.word	0x080052d4

08003b24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b2c:	f000 fbb4 	bl	8004298 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b30:	4b2a      	ldr	r3, [pc, #168]	; (8003bdc <prvAddNewTaskToReadyList+0xb8>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	3301      	adds	r3, #1
 8003b36:	4a29      	ldr	r2, [pc, #164]	; (8003bdc <prvAddNewTaskToReadyList+0xb8>)
 8003b38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b3a:	4b29      	ldr	r3, [pc, #164]	; (8003be0 <prvAddNewTaskToReadyList+0xbc>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d109      	bne.n	8003b56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b42:	4a27      	ldr	r2, [pc, #156]	; (8003be0 <prvAddNewTaskToReadyList+0xbc>)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b48:	4b24      	ldr	r3, [pc, #144]	; (8003bdc <prvAddNewTaskToReadyList+0xb8>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d110      	bne.n	8003b72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003b50:	f000 fa4a 	bl	8003fe8 <prvInitialiseTaskLists>
 8003b54:	e00d      	b.n	8003b72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003b56:	4b23      	ldr	r3, [pc, #140]	; (8003be4 <prvAddNewTaskToReadyList+0xc0>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d109      	bne.n	8003b72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b5e:	4b20      	ldr	r3, [pc, #128]	; (8003be0 <prvAddNewTaskToReadyList+0xbc>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d802      	bhi.n	8003b72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003b6c:	4a1c      	ldr	r2, [pc, #112]	; (8003be0 <prvAddNewTaskToReadyList+0xbc>)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003b72:	4b1d      	ldr	r3, [pc, #116]	; (8003be8 <prvAddNewTaskToReadyList+0xc4>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	3301      	adds	r3, #1
 8003b78:	4a1b      	ldr	r2, [pc, #108]	; (8003be8 <prvAddNewTaskToReadyList+0xc4>)
 8003b7a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b80:	2201      	movs	r2, #1
 8003b82:	409a      	lsls	r2, r3
 8003b84:	4b19      	ldr	r3, [pc, #100]	; (8003bec <prvAddNewTaskToReadyList+0xc8>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	4a18      	ldr	r2, [pc, #96]	; (8003bec <prvAddNewTaskToReadyList+0xc8>)
 8003b8c:	6013      	str	r3, [r2, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b92:	4613      	mov	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4413      	add	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4a15      	ldr	r2, [pc, #84]	; (8003bf0 <prvAddNewTaskToReadyList+0xcc>)
 8003b9c:	441a      	add	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	3304      	adds	r3, #4
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	4610      	mov	r0, r2
 8003ba6:	f7ff fdf6 	bl	8003796 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003baa:	f000 fba5 	bl	80042f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003bae:	4b0d      	ldr	r3, [pc, #52]	; (8003be4 <prvAddNewTaskToReadyList+0xc0>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00e      	beq.n	8003bd4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003bb6:	4b0a      	ldr	r3, [pc, #40]	; (8003be0 <prvAddNewTaskToReadyList+0xbc>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d207      	bcs.n	8003bd4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <prvAddNewTaskToReadyList+0xd0>)
 8003bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bd4:	bf00      	nop
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	20000924 	.word	0x20000924
 8003be0:	20000828 	.word	0x20000828
 8003be4:	20000930 	.word	0x20000930
 8003be8:	20000940 	.word	0x20000940
 8003bec:	2000092c 	.word	0x2000092c
 8003bf0:	2000082c 	.word	0x2000082c
 8003bf4:	e000ed04 	.word	0xe000ed04

08003bf8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c00:	2300      	movs	r3, #0
 8003c02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d017      	beq.n	8003c3a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c0a:	4b13      	ldr	r3, [pc, #76]	; (8003c58 <vTaskDelay+0x60>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00a      	beq.n	8003c28 <vTaskDelay+0x30>
	__asm volatile
 8003c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c16:	f383 8811 	msr	BASEPRI, r3
 8003c1a:	f3bf 8f6f 	isb	sy
 8003c1e:	f3bf 8f4f 	dsb	sy
 8003c22:	60bb      	str	r3, [r7, #8]
}
 8003c24:	bf00      	nop
 8003c26:	e7fe      	b.n	8003c26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003c28:	f000 f81a 	bl	8003c60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 fa58 	bl	80040e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003c34:	f000 f822 	bl	8003c7c <xTaskResumeAll>
 8003c38:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d107      	bne.n	8003c50 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003c40:	4b06      	ldr	r3, [pc, #24]	; (8003c5c <vTaskDelay+0x64>)
 8003c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	f3bf 8f4f 	dsb	sy
 8003c4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003c50:	bf00      	nop
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	20000948 	.word	0x20000948
 8003c5c:	e000ed04 	.word	0xe000ed04

08003c60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003c64:	4b04      	ldr	r3, [pc, #16]	; (8003c78 <vTaskSuspendAll+0x18>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	4a03      	ldr	r2, [pc, #12]	; (8003c78 <vTaskSuspendAll+0x18>)
 8003c6c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003c6e:	bf00      	nop
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	20000948 	.word	0x20000948

08003c7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c82:	2300      	movs	r3, #0
 8003c84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c86:	2300      	movs	r3, #0
 8003c88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c8a:	4b41      	ldr	r3, [pc, #260]	; (8003d90 <xTaskResumeAll+0x114>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10a      	bne.n	8003ca8 <xTaskResumeAll+0x2c>
	__asm volatile
 8003c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c96:	f383 8811 	msr	BASEPRI, r3
 8003c9a:	f3bf 8f6f 	isb	sy
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	603b      	str	r3, [r7, #0]
}
 8003ca4:	bf00      	nop
 8003ca6:	e7fe      	b.n	8003ca6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ca8:	f000 faf6 	bl	8004298 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003cac:	4b38      	ldr	r3, [pc, #224]	; (8003d90 <xTaskResumeAll+0x114>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	4a37      	ldr	r2, [pc, #220]	; (8003d90 <xTaskResumeAll+0x114>)
 8003cb4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cb6:	4b36      	ldr	r3, [pc, #216]	; (8003d90 <xTaskResumeAll+0x114>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d161      	bne.n	8003d82 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003cbe:	4b35      	ldr	r3, [pc, #212]	; (8003d94 <xTaskResumeAll+0x118>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d05d      	beq.n	8003d82 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cc6:	e02e      	b.n	8003d26 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cc8:	4b33      	ldr	r3, [pc, #204]	; (8003d98 <xTaskResumeAll+0x11c>)
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	3318      	adds	r3, #24
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7ff fdbb 	bl	8003850 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	3304      	adds	r3, #4
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7ff fdb6 	bl	8003850 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce8:	2201      	movs	r2, #1
 8003cea:	409a      	lsls	r2, r3
 8003cec:	4b2b      	ldr	r3, [pc, #172]	; (8003d9c <xTaskResumeAll+0x120>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	4a2a      	ldr	r2, [pc, #168]	; (8003d9c <xTaskResumeAll+0x120>)
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4413      	add	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4a27      	ldr	r2, [pc, #156]	; (8003da0 <xTaskResumeAll+0x124>)
 8003d04:	441a      	add	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	3304      	adds	r3, #4
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	4610      	mov	r0, r2
 8003d0e:	f7ff fd42 	bl	8003796 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d16:	4b23      	ldr	r3, [pc, #140]	; (8003da4 <xTaskResumeAll+0x128>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d302      	bcc.n	8003d26 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003d20:	4b21      	ldr	r3, [pc, #132]	; (8003da8 <xTaskResumeAll+0x12c>)
 8003d22:	2201      	movs	r2, #1
 8003d24:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d26:	4b1c      	ldr	r3, [pc, #112]	; (8003d98 <xTaskResumeAll+0x11c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1cc      	bne.n	8003cc8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d34:	f000 f998 	bl	8004068 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003d38:	4b1c      	ldr	r3, [pc, #112]	; (8003dac <xTaskResumeAll+0x130>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d010      	beq.n	8003d66 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d44:	f000 f836 	bl	8003db4 <xTaskIncrementTick>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d002      	beq.n	8003d54 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003d4e:	4b16      	ldr	r3, [pc, #88]	; (8003da8 <xTaskResumeAll+0x12c>)
 8003d50:	2201      	movs	r2, #1
 8003d52:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1f1      	bne.n	8003d44 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003d60:	4b12      	ldr	r3, [pc, #72]	; (8003dac <xTaskResumeAll+0x130>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d66:	4b10      	ldr	r3, [pc, #64]	; (8003da8 <xTaskResumeAll+0x12c>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d009      	beq.n	8003d82 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d72:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <xTaskResumeAll+0x134>)
 8003d74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	f3bf 8f4f 	dsb	sy
 8003d7e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d82:	f000 fab9 	bl	80042f8 <vPortExitCritical>

	return xAlreadyYielded;
 8003d86:	68bb      	ldr	r3, [r7, #8]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	20000948 	.word	0x20000948
 8003d94:	20000924 	.word	0x20000924
 8003d98:	200008e8 	.word	0x200008e8
 8003d9c:	2000092c 	.word	0x2000092c
 8003da0:	2000082c 	.word	0x2000082c
 8003da4:	20000828 	.word	0x20000828
 8003da8:	20000938 	.word	0x20000938
 8003dac:	20000934 	.word	0x20000934
 8003db0:	e000ed04 	.word	0xe000ed04

08003db4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dbe:	4b4e      	ldr	r3, [pc, #312]	; (8003ef8 <xTaskIncrementTick+0x144>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f040 808e 	bne.w	8003ee4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003dc8:	4b4c      	ldr	r3, [pc, #304]	; (8003efc <xTaskIncrementTick+0x148>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003dd0:	4a4a      	ldr	r2, [pc, #296]	; (8003efc <xTaskIncrementTick+0x148>)
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d120      	bne.n	8003e1e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ddc:	4b48      	ldr	r3, [pc, #288]	; (8003f00 <xTaskIncrementTick+0x14c>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <xTaskIncrementTick+0x48>
	__asm volatile
 8003de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dea:	f383 8811 	msr	BASEPRI, r3
 8003dee:	f3bf 8f6f 	isb	sy
 8003df2:	f3bf 8f4f 	dsb	sy
 8003df6:	603b      	str	r3, [r7, #0]
}
 8003df8:	bf00      	nop
 8003dfa:	e7fe      	b.n	8003dfa <xTaskIncrementTick+0x46>
 8003dfc:	4b40      	ldr	r3, [pc, #256]	; (8003f00 <xTaskIncrementTick+0x14c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	4b40      	ldr	r3, [pc, #256]	; (8003f04 <xTaskIncrementTick+0x150>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a3e      	ldr	r2, [pc, #248]	; (8003f00 <xTaskIncrementTick+0x14c>)
 8003e08:	6013      	str	r3, [r2, #0]
 8003e0a:	4a3e      	ldr	r2, [pc, #248]	; (8003f04 <xTaskIncrementTick+0x150>)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6013      	str	r3, [r2, #0]
 8003e10:	4b3d      	ldr	r3, [pc, #244]	; (8003f08 <xTaskIncrementTick+0x154>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	3301      	adds	r3, #1
 8003e16:	4a3c      	ldr	r2, [pc, #240]	; (8003f08 <xTaskIncrementTick+0x154>)
 8003e18:	6013      	str	r3, [r2, #0]
 8003e1a:	f000 f925 	bl	8004068 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e1e:	4b3b      	ldr	r3, [pc, #236]	; (8003f0c <xTaskIncrementTick+0x158>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d348      	bcc.n	8003eba <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e28:	4b35      	ldr	r3, [pc, #212]	; (8003f00 <xTaskIncrementTick+0x14c>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d104      	bne.n	8003e3c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e32:	4b36      	ldr	r3, [pc, #216]	; (8003f0c <xTaskIncrementTick+0x158>)
 8003e34:	f04f 32ff 	mov.w	r2, #4294967295
 8003e38:	601a      	str	r2, [r3, #0]
					break;
 8003e3a:	e03e      	b.n	8003eba <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e3c:	4b30      	ldr	r3, [pc, #192]	; (8003f00 <xTaskIncrementTick+0x14c>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d203      	bcs.n	8003e5c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e54:	4a2d      	ldr	r2, [pc, #180]	; (8003f0c <xTaskIncrementTick+0x158>)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003e5a:	e02e      	b.n	8003eba <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	3304      	adds	r3, #4
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff fcf5 	bl	8003850 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d004      	beq.n	8003e78 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	3318      	adds	r3, #24
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff fcec 	bl	8003850 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	409a      	lsls	r2, r3
 8003e80:	4b23      	ldr	r3, [pc, #140]	; (8003f10 <xTaskIncrementTick+0x15c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	4a22      	ldr	r2, [pc, #136]	; (8003f10 <xTaskIncrementTick+0x15c>)
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e8e:	4613      	mov	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4413      	add	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4a1f      	ldr	r2, [pc, #124]	; (8003f14 <xTaskIncrementTick+0x160>)
 8003e98:	441a      	add	r2, r3
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	4610      	mov	r0, r2
 8003ea2:	f7ff fc78 	bl	8003796 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eaa:	4b1b      	ldr	r3, [pc, #108]	; (8003f18 <xTaskIncrementTick+0x164>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d3b9      	bcc.n	8003e28 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003eb8:	e7b6      	b.n	8003e28 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003eba:	4b17      	ldr	r3, [pc, #92]	; (8003f18 <xTaskIncrementTick+0x164>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec0:	4914      	ldr	r1, [pc, #80]	; (8003f14 <xTaskIncrementTick+0x160>)
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	440b      	add	r3, r1
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d901      	bls.n	8003ed6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003ed6:	4b11      	ldr	r3, [pc, #68]	; (8003f1c <xTaskIncrementTick+0x168>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d007      	beq.n	8003eee <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	617b      	str	r3, [r7, #20]
 8003ee2:	e004      	b.n	8003eee <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003ee4:	4b0e      	ldr	r3, [pc, #56]	; (8003f20 <xTaskIncrementTick+0x16c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	4a0d      	ldr	r2, [pc, #52]	; (8003f20 <xTaskIncrementTick+0x16c>)
 8003eec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003eee:	697b      	ldr	r3, [r7, #20]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3718      	adds	r7, #24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	20000948 	.word	0x20000948
 8003efc:	20000928 	.word	0x20000928
 8003f00:	200008e0 	.word	0x200008e0
 8003f04:	200008e4 	.word	0x200008e4
 8003f08:	2000093c 	.word	0x2000093c
 8003f0c:	20000944 	.word	0x20000944
 8003f10:	2000092c 	.word	0x2000092c
 8003f14:	2000082c 	.word	0x2000082c
 8003f18:	20000828 	.word	0x20000828
 8003f1c:	20000938 	.word	0x20000938
 8003f20:	20000934 	.word	0x20000934

08003f24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f24:	b480      	push	{r7}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f2a:	4b29      	ldr	r3, [pc, #164]	; (8003fd0 <vTaskSwitchContext+0xac>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f32:	4b28      	ldr	r3, [pc, #160]	; (8003fd4 <vTaskSwitchContext+0xb0>)
 8003f34:	2201      	movs	r2, #1
 8003f36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f38:	e044      	b.n	8003fc4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003f3a:	4b26      	ldr	r3, [pc, #152]	; (8003fd4 <vTaskSwitchContext+0xb0>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f40:	4b25      	ldr	r3, [pc, #148]	; (8003fd8 <vTaskSwitchContext+0xb4>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	fab3 f383 	clz	r3, r3
 8003f4c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003f4e:	7afb      	ldrb	r3, [r7, #11]
 8003f50:	f1c3 031f 	rsb	r3, r3, #31
 8003f54:	617b      	str	r3, [r7, #20]
 8003f56:	4921      	ldr	r1, [pc, #132]	; (8003fdc <vTaskSwitchContext+0xb8>)
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4413      	add	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	440b      	add	r3, r1
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10a      	bne.n	8003f80 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6e:	f383 8811 	msr	BASEPRI, r3
 8003f72:	f3bf 8f6f 	isb	sy
 8003f76:	f3bf 8f4f 	dsb	sy
 8003f7a:	607b      	str	r3, [r7, #4]
}
 8003f7c:	bf00      	nop
 8003f7e:	e7fe      	b.n	8003f7e <vTaskSwitchContext+0x5a>
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	4613      	mov	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4a14      	ldr	r2, [pc, #80]	; (8003fdc <vTaskSwitchContext+0xb8>)
 8003f8c:	4413      	add	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	605a      	str	r2, [r3, #4]
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	3308      	adds	r3, #8
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d104      	bne.n	8003fb0 <vTaskSwitchContext+0x8c>
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	605a      	str	r2, [r3, #4]
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	4a0a      	ldr	r2, [pc, #40]	; (8003fe0 <vTaskSwitchContext+0xbc>)
 8003fb8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003fba:	4b09      	ldr	r3, [pc, #36]	; (8003fe0 <vTaskSwitchContext+0xbc>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	334c      	adds	r3, #76	; 0x4c
 8003fc0:	4a08      	ldr	r2, [pc, #32]	; (8003fe4 <vTaskSwitchContext+0xc0>)
 8003fc2:	6013      	str	r3, [r2, #0]
}
 8003fc4:	bf00      	nop
 8003fc6:	371c      	adds	r7, #28
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr
 8003fd0:	20000948 	.word	0x20000948
 8003fd4:	20000938 	.word	0x20000938
 8003fd8:	2000092c 	.word	0x2000092c
 8003fdc:	2000082c 	.word	0x2000082c
 8003fe0:	20000828 	.word	0x20000828
 8003fe4:	20000010 	.word	0x20000010

08003fe8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fee:	2300      	movs	r3, #0
 8003ff0:	607b      	str	r3, [r7, #4]
 8003ff2:	e00c      	b.n	800400e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4413      	add	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4a12      	ldr	r2, [pc, #72]	; (8004048 <prvInitialiseTaskLists+0x60>)
 8004000:	4413      	add	r3, r2
 8004002:	4618      	mov	r0, r3
 8004004:	f7ff fb9a 	bl	800373c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3301      	adds	r3, #1
 800400c:	607b      	str	r3, [r7, #4]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b06      	cmp	r3, #6
 8004012:	d9ef      	bls.n	8003ff4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004014:	480d      	ldr	r0, [pc, #52]	; (800404c <prvInitialiseTaskLists+0x64>)
 8004016:	f7ff fb91 	bl	800373c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800401a:	480d      	ldr	r0, [pc, #52]	; (8004050 <prvInitialiseTaskLists+0x68>)
 800401c:	f7ff fb8e 	bl	800373c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004020:	480c      	ldr	r0, [pc, #48]	; (8004054 <prvInitialiseTaskLists+0x6c>)
 8004022:	f7ff fb8b 	bl	800373c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004026:	480c      	ldr	r0, [pc, #48]	; (8004058 <prvInitialiseTaskLists+0x70>)
 8004028:	f7ff fb88 	bl	800373c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800402c:	480b      	ldr	r0, [pc, #44]	; (800405c <prvInitialiseTaskLists+0x74>)
 800402e:	f7ff fb85 	bl	800373c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004032:	4b0b      	ldr	r3, [pc, #44]	; (8004060 <prvInitialiseTaskLists+0x78>)
 8004034:	4a05      	ldr	r2, [pc, #20]	; (800404c <prvInitialiseTaskLists+0x64>)
 8004036:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004038:	4b0a      	ldr	r3, [pc, #40]	; (8004064 <prvInitialiseTaskLists+0x7c>)
 800403a:	4a05      	ldr	r2, [pc, #20]	; (8004050 <prvInitialiseTaskLists+0x68>)
 800403c:	601a      	str	r2, [r3, #0]
}
 800403e:	bf00      	nop
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	2000082c 	.word	0x2000082c
 800404c:	200008b8 	.word	0x200008b8
 8004050:	200008cc 	.word	0x200008cc
 8004054:	200008e8 	.word	0x200008e8
 8004058:	200008fc 	.word	0x200008fc
 800405c:	20000910 	.word	0x20000910
 8004060:	200008e0 	.word	0x200008e0
 8004064:	200008e4 	.word	0x200008e4

08004068 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800406e:	4b0c      	ldr	r3, [pc, #48]	; (80040a0 <prvResetNextTaskUnblockTime+0x38>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d104      	bne.n	8004082 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004078:	4b0a      	ldr	r3, [pc, #40]	; (80040a4 <prvResetNextTaskUnblockTime+0x3c>)
 800407a:	f04f 32ff 	mov.w	r2, #4294967295
 800407e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004080:	e008      	b.n	8004094 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004082:	4b07      	ldr	r3, [pc, #28]	; (80040a0 <prvResetNextTaskUnblockTime+0x38>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	4a04      	ldr	r2, [pc, #16]	; (80040a4 <prvResetNextTaskUnblockTime+0x3c>)
 8004092:	6013      	str	r3, [r2, #0]
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	200008e0 	.word	0x200008e0
 80040a4:	20000944 	.word	0x20000944

080040a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80040ae:	4b0b      	ldr	r3, [pc, #44]	; (80040dc <xTaskGetSchedulerState+0x34>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d102      	bne.n	80040bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80040b6:	2301      	movs	r3, #1
 80040b8:	607b      	str	r3, [r7, #4]
 80040ba:	e008      	b.n	80040ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040bc:	4b08      	ldr	r3, [pc, #32]	; (80040e0 <xTaskGetSchedulerState+0x38>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d102      	bne.n	80040ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80040c4:	2302      	movs	r3, #2
 80040c6:	607b      	str	r3, [r7, #4]
 80040c8:	e001      	b.n	80040ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80040ca:	2300      	movs	r3, #0
 80040cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80040ce:	687b      	ldr	r3, [r7, #4]
	}
 80040d0:	4618      	mov	r0, r3
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr
 80040dc:	20000930 	.word	0x20000930
 80040e0:	20000948 	.word	0x20000948

080040e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80040ee:	4b29      	ldr	r3, [pc, #164]	; (8004194 <prvAddCurrentTaskToDelayedList+0xb0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040f4:	4b28      	ldr	r3, [pc, #160]	; (8004198 <prvAddCurrentTaskToDelayedList+0xb4>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	3304      	adds	r3, #4
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7ff fba8 	bl	8003850 <uxListRemove>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10b      	bne.n	800411e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004106:	4b24      	ldr	r3, [pc, #144]	; (8004198 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410c:	2201      	movs	r2, #1
 800410e:	fa02 f303 	lsl.w	r3, r2, r3
 8004112:	43da      	mvns	r2, r3
 8004114:	4b21      	ldr	r3, [pc, #132]	; (800419c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4013      	ands	r3, r2
 800411a:	4a20      	ldr	r2, [pc, #128]	; (800419c <prvAddCurrentTaskToDelayedList+0xb8>)
 800411c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004124:	d10a      	bne.n	800413c <prvAddCurrentTaskToDelayedList+0x58>
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d007      	beq.n	800413c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800412c:	4b1a      	ldr	r3, [pc, #104]	; (8004198 <prvAddCurrentTaskToDelayedList+0xb4>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	3304      	adds	r3, #4
 8004132:	4619      	mov	r1, r3
 8004134:	481a      	ldr	r0, [pc, #104]	; (80041a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004136:	f7ff fb2e 	bl	8003796 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800413a:	e026      	b.n	800418a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4413      	add	r3, r2
 8004142:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004144:	4b14      	ldr	r3, [pc, #80]	; (8004198 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	429a      	cmp	r2, r3
 8004152:	d209      	bcs.n	8004168 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004154:	4b13      	ldr	r3, [pc, #76]	; (80041a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	4b0f      	ldr	r3, [pc, #60]	; (8004198 <prvAddCurrentTaskToDelayedList+0xb4>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	3304      	adds	r3, #4
 800415e:	4619      	mov	r1, r3
 8004160:	4610      	mov	r0, r2
 8004162:	f7ff fb3c 	bl	80037de <vListInsert>
}
 8004166:	e010      	b.n	800418a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004168:	4b0f      	ldr	r3, [pc, #60]	; (80041a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	4b0a      	ldr	r3, [pc, #40]	; (8004198 <prvAddCurrentTaskToDelayedList+0xb4>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3304      	adds	r3, #4
 8004172:	4619      	mov	r1, r3
 8004174:	4610      	mov	r0, r2
 8004176:	f7ff fb32 	bl	80037de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800417a:	4b0c      	ldr	r3, [pc, #48]	; (80041ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	429a      	cmp	r2, r3
 8004182:	d202      	bcs.n	800418a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004184:	4a09      	ldr	r2, [pc, #36]	; (80041ac <prvAddCurrentTaskToDelayedList+0xc8>)
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	6013      	str	r3, [r2, #0]
}
 800418a:	bf00      	nop
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	20000928 	.word	0x20000928
 8004198:	20000828 	.word	0x20000828
 800419c:	2000092c 	.word	0x2000092c
 80041a0:	20000910 	.word	0x20000910
 80041a4:	200008e4 	.word	0x200008e4
 80041a8:	200008e0 	.word	0x200008e0
 80041ac:	20000944 	.word	0x20000944

080041b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	3b04      	subs	r3, #4
 80041c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	3b04      	subs	r3, #4
 80041ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	f023 0201 	bic.w	r2, r3, #1
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	3b04      	subs	r3, #4
 80041de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80041e0:	4a0c      	ldr	r2, [pc, #48]	; (8004214 <pxPortInitialiseStack+0x64>)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	3b14      	subs	r3, #20
 80041ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	3b04      	subs	r3, #4
 80041f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f06f 0202 	mvn.w	r2, #2
 80041fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	3b20      	subs	r3, #32
 8004204:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004206:	68fb      	ldr	r3, [r7, #12]
}
 8004208:	4618      	mov	r0, r3
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	08004219 	.word	0x08004219

08004218 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800421e:	2300      	movs	r3, #0
 8004220:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004222:	4b12      	ldr	r3, [pc, #72]	; (800426c <prvTaskExitError+0x54>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422a:	d00a      	beq.n	8004242 <prvTaskExitError+0x2a>
	__asm volatile
 800422c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004230:	f383 8811 	msr	BASEPRI, r3
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	f3bf 8f4f 	dsb	sy
 800423c:	60fb      	str	r3, [r7, #12]
}
 800423e:	bf00      	nop
 8004240:	e7fe      	b.n	8004240 <prvTaskExitError+0x28>
	__asm volatile
 8004242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004246:	f383 8811 	msr	BASEPRI, r3
 800424a:	f3bf 8f6f 	isb	sy
 800424e:	f3bf 8f4f 	dsb	sy
 8004252:	60bb      	str	r3, [r7, #8]
}
 8004254:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004256:	bf00      	nop
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0fc      	beq.n	8004258 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800425e:	bf00      	nop
 8004260:	bf00      	nop
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr
 800426c:	2000000c 	.word	0x2000000c

08004270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004270:	4b07      	ldr	r3, [pc, #28]	; (8004290 <pxCurrentTCBConst2>)
 8004272:	6819      	ldr	r1, [r3, #0]
 8004274:	6808      	ldr	r0, [r1, #0]
 8004276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800427a:	f380 8809 	msr	PSP, r0
 800427e:	f3bf 8f6f 	isb	sy
 8004282:	f04f 0000 	mov.w	r0, #0
 8004286:	f380 8811 	msr	BASEPRI, r0
 800428a:	4770      	bx	lr
 800428c:	f3af 8000 	nop.w

08004290 <pxCurrentTCBConst2>:
 8004290:	20000828 	.word	0x20000828
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004294:	bf00      	nop
 8004296:	bf00      	nop

08004298 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
	__asm volatile
 800429e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a2:	f383 8811 	msr	BASEPRI, r3
 80042a6:	f3bf 8f6f 	isb	sy
 80042aa:	f3bf 8f4f 	dsb	sy
 80042ae:	607b      	str	r3, [r7, #4]
}
 80042b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80042b2:	4b0f      	ldr	r3, [pc, #60]	; (80042f0 <vPortEnterCritical+0x58>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	3301      	adds	r3, #1
 80042b8:	4a0d      	ldr	r2, [pc, #52]	; (80042f0 <vPortEnterCritical+0x58>)
 80042ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80042bc:	4b0c      	ldr	r3, [pc, #48]	; (80042f0 <vPortEnterCritical+0x58>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d10f      	bne.n	80042e4 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80042c4:	4b0b      	ldr	r3, [pc, #44]	; (80042f4 <vPortEnterCritical+0x5c>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00a      	beq.n	80042e4 <vPortEnterCritical+0x4c>
	__asm volatile
 80042ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	603b      	str	r3, [r7, #0]
}
 80042e0:	bf00      	nop
 80042e2:	e7fe      	b.n	80042e2 <vPortEnterCritical+0x4a>
	}
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	2000000c 	.word	0x2000000c
 80042f4:	e000ed04 	.word	0xe000ed04

080042f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80042fe:	4b12      	ldr	r3, [pc, #72]	; (8004348 <vPortExitCritical+0x50>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10a      	bne.n	800431c <vPortExitCritical+0x24>
	__asm volatile
 8004306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430a:	f383 8811 	msr	BASEPRI, r3
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	607b      	str	r3, [r7, #4]
}
 8004318:	bf00      	nop
 800431a:	e7fe      	b.n	800431a <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800431c:	4b0a      	ldr	r3, [pc, #40]	; (8004348 <vPortExitCritical+0x50>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	3b01      	subs	r3, #1
 8004322:	4a09      	ldr	r2, [pc, #36]	; (8004348 <vPortExitCritical+0x50>)
 8004324:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004326:	4b08      	ldr	r3, [pc, #32]	; (8004348 <vPortExitCritical+0x50>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d105      	bne.n	800433a <vPortExitCritical+0x42>
 800432e:	2300      	movs	r3, #0
 8004330:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004338:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800433a:	bf00      	nop
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	2000000c 	.word	0x2000000c
 800434c:	00000000 	.word	0x00000000

08004350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004350:	f3ef 8009 	mrs	r0, PSP
 8004354:	f3bf 8f6f 	isb	sy
 8004358:	4b15      	ldr	r3, [pc, #84]	; (80043b0 <pxCurrentTCBConst>)
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	f01e 0f10 	tst.w	lr, #16
 8004360:	bf08      	it	eq
 8004362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800436a:	6010      	str	r0, [r2, #0]
 800436c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004370:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004374:	f380 8811 	msr	BASEPRI, r0
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	f3bf 8f6f 	isb	sy
 8004380:	f7ff fdd0 	bl	8003f24 <vTaskSwitchContext>
 8004384:	f04f 0000 	mov.w	r0, #0
 8004388:	f380 8811 	msr	BASEPRI, r0
 800438c:	bc09      	pop	{r0, r3}
 800438e:	6819      	ldr	r1, [r3, #0]
 8004390:	6808      	ldr	r0, [r1, #0]
 8004392:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004396:	f01e 0f10 	tst.w	lr, #16
 800439a:	bf08      	it	eq
 800439c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80043a0:	f380 8809 	msr	PSP, r0
 80043a4:	f3bf 8f6f 	isb	sy
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	f3af 8000 	nop.w

080043b0 <pxCurrentTCBConst>:
 80043b0:	20000828 	.word	0x20000828
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80043b4:	bf00      	nop
 80043b6:	bf00      	nop

080043b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
	__asm volatile
 80043be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c2:	f383 8811 	msr	BASEPRI, r3
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	607b      	str	r3, [r7, #4]
}
 80043d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80043d2:	f7ff fcef 	bl	8003db4 <xTaskIncrementTick>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80043dc:	4b06      	ldr	r3, [pc, #24]	; (80043f8 <xPortSysTickHandler+0x40>)
 80043de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	2300      	movs	r3, #0
 80043e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	f383 8811 	msr	BASEPRI, r3
}
 80043ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80043f0:	bf00      	nop
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	e000ed04 	.word	0xe000ed04

080043fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b08a      	sub	sp, #40	; 0x28
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004404:	2300      	movs	r3, #0
 8004406:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004408:	f7ff fc2a 	bl	8003c60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800440c:	4b5b      	ldr	r3, [pc, #364]	; (800457c <pvPortMalloc+0x180>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004414:	f000 f920 	bl	8004658 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004418:	4b59      	ldr	r3, [pc, #356]	; (8004580 <pvPortMalloc+0x184>)
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4013      	ands	r3, r2
 8004420:	2b00      	cmp	r3, #0
 8004422:	f040 8093 	bne.w	800454c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d01d      	beq.n	8004468 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800442c:	2208      	movs	r2, #8
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4413      	add	r3, r2
 8004432:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	2b00      	cmp	r3, #0
 800443c:	d014      	beq.n	8004468 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f023 0307 	bic.w	r3, r3, #7
 8004444:	3308      	adds	r3, #8
 8004446:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f003 0307 	and.w	r3, r3, #7
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <pvPortMalloc+0x6c>
	__asm volatile
 8004452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004456:	f383 8811 	msr	BASEPRI, r3
 800445a:	f3bf 8f6f 	isb	sy
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	617b      	str	r3, [r7, #20]
}
 8004464:	bf00      	nop
 8004466:	e7fe      	b.n	8004466 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d06e      	beq.n	800454c <pvPortMalloc+0x150>
 800446e:	4b45      	ldr	r3, [pc, #276]	; (8004584 <pvPortMalloc+0x188>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	429a      	cmp	r2, r3
 8004476:	d869      	bhi.n	800454c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004478:	4b43      	ldr	r3, [pc, #268]	; (8004588 <pvPortMalloc+0x18c>)
 800447a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800447c:	4b42      	ldr	r3, [pc, #264]	; (8004588 <pvPortMalloc+0x18c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004482:	e004      	b.n	800448e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	429a      	cmp	r2, r3
 8004496:	d903      	bls.n	80044a0 <pvPortMalloc+0xa4>
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1f1      	bne.n	8004484 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80044a0:	4b36      	ldr	r3, [pc, #216]	; (800457c <pvPortMalloc+0x180>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d050      	beq.n	800454c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2208      	movs	r2, #8
 80044b0:	4413      	add	r3, r2
 80044b2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	1ad2      	subs	r2, r2, r3
 80044c4:	2308      	movs	r3, #8
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d91f      	bls.n	800450c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80044cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4413      	add	r3, r2
 80044d2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00a      	beq.n	80044f4 <pvPortMalloc+0xf8>
	__asm volatile
 80044de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e2:	f383 8811 	msr	BASEPRI, r3
 80044e6:	f3bf 8f6f 	isb	sy
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	613b      	str	r3, [r7, #16]
}
 80044f0:	bf00      	nop
 80044f2:	e7fe      	b.n	80044f2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	1ad2      	subs	r2, r2, r3
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004506:	69b8      	ldr	r0, [r7, #24]
 8004508:	f000 f908 	bl	800471c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800450c:	4b1d      	ldr	r3, [pc, #116]	; (8004584 <pvPortMalloc+0x188>)
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	4a1b      	ldr	r2, [pc, #108]	; (8004584 <pvPortMalloc+0x188>)
 8004518:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800451a:	4b1a      	ldr	r3, [pc, #104]	; (8004584 <pvPortMalloc+0x188>)
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	4b1b      	ldr	r3, [pc, #108]	; (800458c <pvPortMalloc+0x190>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d203      	bcs.n	800452e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004526:	4b17      	ldr	r3, [pc, #92]	; (8004584 <pvPortMalloc+0x188>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a18      	ldr	r2, [pc, #96]	; (800458c <pvPortMalloc+0x190>)
 800452c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800452e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	4b13      	ldr	r3, [pc, #76]	; (8004580 <pvPortMalloc+0x184>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	431a      	orrs	r2, r3
 8004538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	2200      	movs	r2, #0
 8004540:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004542:	4b13      	ldr	r3, [pc, #76]	; (8004590 <pvPortMalloc+0x194>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	3301      	adds	r3, #1
 8004548:	4a11      	ldr	r2, [pc, #68]	; (8004590 <pvPortMalloc+0x194>)
 800454a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800454c:	f7ff fb96 	bl	8003c7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00a      	beq.n	8004570 <pvPortMalloc+0x174>
	__asm volatile
 800455a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455e:	f383 8811 	msr	BASEPRI, r3
 8004562:	f3bf 8f6f 	isb	sy
 8004566:	f3bf 8f4f 	dsb	sy
 800456a:	60fb      	str	r3, [r7, #12]
}
 800456c:	bf00      	nop
 800456e:	e7fe      	b.n	800456e <pvPortMalloc+0x172>
	return pvReturn;
 8004570:	69fb      	ldr	r3, [r7, #28]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3728      	adds	r7, #40	; 0x28
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	20004554 	.word	0x20004554
 8004580:	20004568 	.word	0x20004568
 8004584:	20004558 	.word	0x20004558
 8004588:	2000454c 	.word	0x2000454c
 800458c:	2000455c 	.word	0x2000455c
 8004590:	20004560 	.word	0x20004560

08004594 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d04d      	beq.n	8004642 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80045a6:	2308      	movs	r3, #8
 80045a8:	425b      	negs	r3, r3
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	4413      	add	r3, r2
 80045ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	4b24      	ldr	r3, [pc, #144]	; (800464c <vPortFree+0xb8>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4013      	ands	r3, r2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10a      	bne.n	80045d8 <vPortFree+0x44>
	__asm volatile
 80045c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c6:	f383 8811 	msr	BASEPRI, r3
 80045ca:	f3bf 8f6f 	isb	sy
 80045ce:	f3bf 8f4f 	dsb	sy
 80045d2:	60fb      	str	r3, [r7, #12]
}
 80045d4:	bf00      	nop
 80045d6:	e7fe      	b.n	80045d6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00a      	beq.n	80045f6 <vPortFree+0x62>
	__asm volatile
 80045e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e4:	f383 8811 	msr	BASEPRI, r3
 80045e8:	f3bf 8f6f 	isb	sy
 80045ec:	f3bf 8f4f 	dsb	sy
 80045f0:	60bb      	str	r3, [r7, #8]
}
 80045f2:	bf00      	nop
 80045f4:	e7fe      	b.n	80045f4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	4b14      	ldr	r3, [pc, #80]	; (800464c <vPortFree+0xb8>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4013      	ands	r3, r2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d01e      	beq.n	8004642 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d11a      	bne.n	8004642 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	4b0e      	ldr	r3, [pc, #56]	; (800464c <vPortFree+0xb8>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	43db      	mvns	r3, r3
 8004616:	401a      	ands	r2, r3
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800461c:	f7ff fb20 	bl	8003c60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	4b0a      	ldr	r3, [pc, #40]	; (8004650 <vPortFree+0xbc>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4413      	add	r3, r2
 800462a:	4a09      	ldr	r2, [pc, #36]	; (8004650 <vPortFree+0xbc>)
 800462c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800462e:	6938      	ldr	r0, [r7, #16]
 8004630:	f000 f874 	bl	800471c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004634:	4b07      	ldr	r3, [pc, #28]	; (8004654 <vPortFree+0xc0>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	3301      	adds	r3, #1
 800463a:	4a06      	ldr	r2, [pc, #24]	; (8004654 <vPortFree+0xc0>)
 800463c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800463e:	f7ff fb1d 	bl	8003c7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004642:	bf00      	nop
 8004644:	3718      	adds	r7, #24
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	20004568 	.word	0x20004568
 8004650:	20004558 	.word	0x20004558
 8004654:	20004564 	.word	0x20004564

08004658 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800465e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004662:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004664:	4b27      	ldr	r3, [pc, #156]	; (8004704 <prvHeapInit+0xac>)
 8004666:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f003 0307 	and.w	r3, r3, #7
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00c      	beq.n	800468c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	3307      	adds	r3, #7
 8004676:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f023 0307 	bic.w	r3, r3, #7
 800467e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	4a1f      	ldr	r2, [pc, #124]	; (8004704 <prvHeapInit+0xac>)
 8004688:	4413      	add	r3, r2
 800468a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004690:	4a1d      	ldr	r2, [pc, #116]	; (8004708 <prvHeapInit+0xb0>)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004696:	4b1c      	ldr	r3, [pc, #112]	; (8004708 <prvHeapInit+0xb0>)
 8004698:	2200      	movs	r2, #0
 800469a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	4413      	add	r3, r2
 80046a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80046a4:	2208      	movs	r2, #8
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	1a9b      	subs	r3, r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f023 0307 	bic.w	r3, r3, #7
 80046b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4a15      	ldr	r2, [pc, #84]	; (800470c <prvHeapInit+0xb4>)
 80046b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80046ba:	4b14      	ldr	r3, [pc, #80]	; (800470c <prvHeapInit+0xb4>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2200      	movs	r2, #0
 80046c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80046c2:	4b12      	ldr	r3, [pc, #72]	; (800470c <prvHeapInit+0xb4>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2200      	movs	r2, #0
 80046c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	1ad2      	subs	r2, r2, r3
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80046d8:	4b0c      	ldr	r3, [pc, #48]	; (800470c <prvHeapInit+0xb4>)
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	4a0a      	ldr	r2, [pc, #40]	; (8004710 <prvHeapInit+0xb8>)
 80046e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	4a09      	ldr	r2, [pc, #36]	; (8004714 <prvHeapInit+0xbc>)
 80046ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80046f0:	4b09      	ldr	r3, [pc, #36]	; (8004718 <prvHeapInit+0xc0>)
 80046f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80046f6:	601a      	str	r2, [r3, #0]
}
 80046f8:	bf00      	nop
 80046fa:	3714      	adds	r7, #20
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr
 8004704:	2000094c 	.word	0x2000094c
 8004708:	2000454c 	.word	0x2000454c
 800470c:	20004554 	.word	0x20004554
 8004710:	2000455c 	.word	0x2000455c
 8004714:	20004558 	.word	0x20004558
 8004718:	20004568 	.word	0x20004568

0800471c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004724:	4b28      	ldr	r3, [pc, #160]	; (80047c8 <prvInsertBlockIntoFreeList+0xac>)
 8004726:	60fb      	str	r3, [r7, #12]
 8004728:	e002      	b.n	8004730 <prvInsertBlockIntoFreeList+0x14>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	60fb      	str	r3, [r7, #12]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	429a      	cmp	r2, r3
 8004738:	d8f7      	bhi.n	800472a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	4413      	add	r3, r2
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	429a      	cmp	r2, r3
 800474a:	d108      	bne.n	800475e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	441a      	add	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	68ba      	ldr	r2, [r7, #8]
 8004768:	441a      	add	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	429a      	cmp	r2, r3
 8004770:	d118      	bne.n	80047a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	4b15      	ldr	r3, [pc, #84]	; (80047cc <prvInsertBlockIntoFreeList+0xb0>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	429a      	cmp	r2, r3
 800477c:	d00d      	beq.n	800479a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	441a      	add	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	e008      	b.n	80047ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800479a:	4b0c      	ldr	r3, [pc, #48]	; (80047cc <prvInsertBlockIntoFreeList+0xb0>)
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	e003      	b.n	80047ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d002      	beq.n	80047ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047ba:	bf00      	nop
 80047bc:	3714      	adds	r7, #20
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	2000454c 	.word	0x2000454c
 80047cc:	20004554 	.word	0x20004554

080047d0 <__errno>:
 80047d0:	4b01      	ldr	r3, [pc, #4]	; (80047d8 <__errno+0x8>)
 80047d2:	6818      	ldr	r0, [r3, #0]
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	20000010 	.word	0x20000010

080047dc <std>:
 80047dc:	2300      	movs	r3, #0
 80047de:	b510      	push	{r4, lr}
 80047e0:	4604      	mov	r4, r0
 80047e2:	e9c0 3300 	strd	r3, r3, [r0]
 80047e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80047ea:	6083      	str	r3, [r0, #8]
 80047ec:	8181      	strh	r1, [r0, #12]
 80047ee:	6643      	str	r3, [r0, #100]	; 0x64
 80047f0:	81c2      	strh	r2, [r0, #14]
 80047f2:	6183      	str	r3, [r0, #24]
 80047f4:	4619      	mov	r1, r3
 80047f6:	2208      	movs	r2, #8
 80047f8:	305c      	adds	r0, #92	; 0x5c
 80047fa:	f000 f90c 	bl	8004a16 <memset>
 80047fe:	4b05      	ldr	r3, [pc, #20]	; (8004814 <std+0x38>)
 8004800:	6263      	str	r3, [r4, #36]	; 0x24
 8004802:	4b05      	ldr	r3, [pc, #20]	; (8004818 <std+0x3c>)
 8004804:	62a3      	str	r3, [r4, #40]	; 0x28
 8004806:	4b05      	ldr	r3, [pc, #20]	; (800481c <std+0x40>)
 8004808:	62e3      	str	r3, [r4, #44]	; 0x2c
 800480a:	4b05      	ldr	r3, [pc, #20]	; (8004820 <std+0x44>)
 800480c:	6224      	str	r4, [r4, #32]
 800480e:	6323      	str	r3, [r4, #48]	; 0x30
 8004810:	bd10      	pop	{r4, pc}
 8004812:	bf00      	nop
 8004814:	08004c5d 	.word	0x08004c5d
 8004818:	08004c7f 	.word	0x08004c7f
 800481c:	08004cb7 	.word	0x08004cb7
 8004820:	08004cdb 	.word	0x08004cdb

08004824 <_cleanup_r>:
 8004824:	4901      	ldr	r1, [pc, #4]	; (800482c <_cleanup_r+0x8>)
 8004826:	f000 b8af 	b.w	8004988 <_fwalk_reent>
 800482a:	bf00      	nop
 800482c:	08004fb5 	.word	0x08004fb5

08004830 <__sfmoreglue>:
 8004830:	b570      	push	{r4, r5, r6, lr}
 8004832:	2268      	movs	r2, #104	; 0x68
 8004834:	1e4d      	subs	r5, r1, #1
 8004836:	4355      	muls	r5, r2
 8004838:	460e      	mov	r6, r1
 800483a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800483e:	f000 f913 	bl	8004a68 <_malloc_r>
 8004842:	4604      	mov	r4, r0
 8004844:	b140      	cbz	r0, 8004858 <__sfmoreglue+0x28>
 8004846:	2100      	movs	r1, #0
 8004848:	e9c0 1600 	strd	r1, r6, [r0]
 800484c:	300c      	adds	r0, #12
 800484e:	60a0      	str	r0, [r4, #8]
 8004850:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004854:	f000 f8df 	bl	8004a16 <memset>
 8004858:	4620      	mov	r0, r4
 800485a:	bd70      	pop	{r4, r5, r6, pc}

0800485c <__sfp_lock_acquire>:
 800485c:	4801      	ldr	r0, [pc, #4]	; (8004864 <__sfp_lock_acquire+0x8>)
 800485e:	f000 b8d8 	b.w	8004a12 <__retarget_lock_acquire_recursive>
 8004862:	bf00      	nop
 8004864:	2000456d 	.word	0x2000456d

08004868 <__sfp_lock_release>:
 8004868:	4801      	ldr	r0, [pc, #4]	; (8004870 <__sfp_lock_release+0x8>)
 800486a:	f000 b8d3 	b.w	8004a14 <__retarget_lock_release_recursive>
 800486e:	bf00      	nop
 8004870:	2000456d 	.word	0x2000456d

08004874 <__sinit_lock_acquire>:
 8004874:	4801      	ldr	r0, [pc, #4]	; (800487c <__sinit_lock_acquire+0x8>)
 8004876:	f000 b8cc 	b.w	8004a12 <__retarget_lock_acquire_recursive>
 800487a:	bf00      	nop
 800487c:	2000456e 	.word	0x2000456e

08004880 <__sinit_lock_release>:
 8004880:	4801      	ldr	r0, [pc, #4]	; (8004888 <__sinit_lock_release+0x8>)
 8004882:	f000 b8c7 	b.w	8004a14 <__retarget_lock_release_recursive>
 8004886:	bf00      	nop
 8004888:	2000456e 	.word	0x2000456e

0800488c <__sinit>:
 800488c:	b510      	push	{r4, lr}
 800488e:	4604      	mov	r4, r0
 8004890:	f7ff fff0 	bl	8004874 <__sinit_lock_acquire>
 8004894:	69a3      	ldr	r3, [r4, #24]
 8004896:	b11b      	cbz	r3, 80048a0 <__sinit+0x14>
 8004898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800489c:	f7ff bff0 	b.w	8004880 <__sinit_lock_release>
 80048a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80048a4:	6523      	str	r3, [r4, #80]	; 0x50
 80048a6:	4b13      	ldr	r3, [pc, #76]	; (80048f4 <__sinit+0x68>)
 80048a8:	4a13      	ldr	r2, [pc, #76]	; (80048f8 <__sinit+0x6c>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80048ae:	42a3      	cmp	r3, r4
 80048b0:	bf04      	itt	eq
 80048b2:	2301      	moveq	r3, #1
 80048b4:	61a3      	streq	r3, [r4, #24]
 80048b6:	4620      	mov	r0, r4
 80048b8:	f000 f820 	bl	80048fc <__sfp>
 80048bc:	6060      	str	r0, [r4, #4]
 80048be:	4620      	mov	r0, r4
 80048c0:	f000 f81c 	bl	80048fc <__sfp>
 80048c4:	60a0      	str	r0, [r4, #8]
 80048c6:	4620      	mov	r0, r4
 80048c8:	f000 f818 	bl	80048fc <__sfp>
 80048cc:	2200      	movs	r2, #0
 80048ce:	60e0      	str	r0, [r4, #12]
 80048d0:	2104      	movs	r1, #4
 80048d2:	6860      	ldr	r0, [r4, #4]
 80048d4:	f7ff ff82 	bl	80047dc <std>
 80048d8:	68a0      	ldr	r0, [r4, #8]
 80048da:	2201      	movs	r2, #1
 80048dc:	2109      	movs	r1, #9
 80048de:	f7ff ff7d 	bl	80047dc <std>
 80048e2:	68e0      	ldr	r0, [r4, #12]
 80048e4:	2202      	movs	r2, #2
 80048e6:	2112      	movs	r1, #18
 80048e8:	f7ff ff78 	bl	80047dc <std>
 80048ec:	2301      	movs	r3, #1
 80048ee:	61a3      	str	r3, [r4, #24]
 80048f0:	e7d2      	b.n	8004898 <__sinit+0xc>
 80048f2:	bf00      	nop
 80048f4:	08005334 	.word	0x08005334
 80048f8:	08004825 	.word	0x08004825

080048fc <__sfp>:
 80048fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fe:	4607      	mov	r7, r0
 8004900:	f7ff ffac 	bl	800485c <__sfp_lock_acquire>
 8004904:	4b1e      	ldr	r3, [pc, #120]	; (8004980 <__sfp+0x84>)
 8004906:	681e      	ldr	r6, [r3, #0]
 8004908:	69b3      	ldr	r3, [r6, #24]
 800490a:	b913      	cbnz	r3, 8004912 <__sfp+0x16>
 800490c:	4630      	mov	r0, r6
 800490e:	f7ff ffbd 	bl	800488c <__sinit>
 8004912:	3648      	adds	r6, #72	; 0x48
 8004914:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004918:	3b01      	subs	r3, #1
 800491a:	d503      	bpl.n	8004924 <__sfp+0x28>
 800491c:	6833      	ldr	r3, [r6, #0]
 800491e:	b30b      	cbz	r3, 8004964 <__sfp+0x68>
 8004920:	6836      	ldr	r6, [r6, #0]
 8004922:	e7f7      	b.n	8004914 <__sfp+0x18>
 8004924:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004928:	b9d5      	cbnz	r5, 8004960 <__sfp+0x64>
 800492a:	4b16      	ldr	r3, [pc, #88]	; (8004984 <__sfp+0x88>)
 800492c:	60e3      	str	r3, [r4, #12]
 800492e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004932:	6665      	str	r5, [r4, #100]	; 0x64
 8004934:	f000 f86c 	bl	8004a10 <__retarget_lock_init_recursive>
 8004938:	f7ff ff96 	bl	8004868 <__sfp_lock_release>
 800493c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004940:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004944:	6025      	str	r5, [r4, #0]
 8004946:	61a5      	str	r5, [r4, #24]
 8004948:	2208      	movs	r2, #8
 800494a:	4629      	mov	r1, r5
 800494c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004950:	f000 f861 	bl	8004a16 <memset>
 8004954:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004958:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800495c:	4620      	mov	r0, r4
 800495e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004960:	3468      	adds	r4, #104	; 0x68
 8004962:	e7d9      	b.n	8004918 <__sfp+0x1c>
 8004964:	2104      	movs	r1, #4
 8004966:	4638      	mov	r0, r7
 8004968:	f7ff ff62 	bl	8004830 <__sfmoreglue>
 800496c:	4604      	mov	r4, r0
 800496e:	6030      	str	r0, [r6, #0]
 8004970:	2800      	cmp	r0, #0
 8004972:	d1d5      	bne.n	8004920 <__sfp+0x24>
 8004974:	f7ff ff78 	bl	8004868 <__sfp_lock_release>
 8004978:	230c      	movs	r3, #12
 800497a:	603b      	str	r3, [r7, #0]
 800497c:	e7ee      	b.n	800495c <__sfp+0x60>
 800497e:	bf00      	nop
 8004980:	08005334 	.word	0x08005334
 8004984:	ffff0001 	.word	0xffff0001

08004988 <_fwalk_reent>:
 8004988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800498c:	4606      	mov	r6, r0
 800498e:	4688      	mov	r8, r1
 8004990:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004994:	2700      	movs	r7, #0
 8004996:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800499a:	f1b9 0901 	subs.w	r9, r9, #1
 800499e:	d505      	bpl.n	80049ac <_fwalk_reent+0x24>
 80049a0:	6824      	ldr	r4, [r4, #0]
 80049a2:	2c00      	cmp	r4, #0
 80049a4:	d1f7      	bne.n	8004996 <_fwalk_reent+0xe>
 80049a6:	4638      	mov	r0, r7
 80049a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049ac:	89ab      	ldrh	r3, [r5, #12]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d907      	bls.n	80049c2 <_fwalk_reent+0x3a>
 80049b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80049b6:	3301      	adds	r3, #1
 80049b8:	d003      	beq.n	80049c2 <_fwalk_reent+0x3a>
 80049ba:	4629      	mov	r1, r5
 80049bc:	4630      	mov	r0, r6
 80049be:	47c0      	blx	r8
 80049c0:	4307      	orrs	r7, r0
 80049c2:	3568      	adds	r5, #104	; 0x68
 80049c4:	e7e9      	b.n	800499a <_fwalk_reent+0x12>
	...

080049c8 <__libc_init_array>:
 80049c8:	b570      	push	{r4, r5, r6, lr}
 80049ca:	4d0d      	ldr	r5, [pc, #52]	; (8004a00 <__libc_init_array+0x38>)
 80049cc:	4c0d      	ldr	r4, [pc, #52]	; (8004a04 <__libc_init_array+0x3c>)
 80049ce:	1b64      	subs	r4, r4, r5
 80049d0:	10a4      	asrs	r4, r4, #2
 80049d2:	2600      	movs	r6, #0
 80049d4:	42a6      	cmp	r6, r4
 80049d6:	d109      	bne.n	80049ec <__libc_init_array+0x24>
 80049d8:	4d0b      	ldr	r5, [pc, #44]	; (8004a08 <__libc_init_array+0x40>)
 80049da:	4c0c      	ldr	r4, [pc, #48]	; (8004a0c <__libc_init_array+0x44>)
 80049dc:	f000 fc2a 	bl	8005234 <_init>
 80049e0:	1b64      	subs	r4, r4, r5
 80049e2:	10a4      	asrs	r4, r4, #2
 80049e4:	2600      	movs	r6, #0
 80049e6:	42a6      	cmp	r6, r4
 80049e8:	d105      	bne.n	80049f6 <__libc_init_array+0x2e>
 80049ea:	bd70      	pop	{r4, r5, r6, pc}
 80049ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80049f0:	4798      	blx	r3
 80049f2:	3601      	adds	r6, #1
 80049f4:	e7ee      	b.n	80049d4 <__libc_init_array+0xc>
 80049f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049fa:	4798      	blx	r3
 80049fc:	3601      	adds	r6, #1
 80049fe:	e7f2      	b.n	80049e6 <__libc_init_array+0x1e>
 8004a00:	08005340 	.word	0x08005340
 8004a04:	08005340 	.word	0x08005340
 8004a08:	08005340 	.word	0x08005340
 8004a0c:	08005344 	.word	0x08005344

08004a10 <__retarget_lock_init_recursive>:
 8004a10:	4770      	bx	lr

08004a12 <__retarget_lock_acquire_recursive>:
 8004a12:	4770      	bx	lr

08004a14 <__retarget_lock_release_recursive>:
 8004a14:	4770      	bx	lr

08004a16 <memset>:
 8004a16:	4402      	add	r2, r0
 8004a18:	4603      	mov	r3, r0
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d100      	bne.n	8004a20 <memset+0xa>
 8004a1e:	4770      	bx	lr
 8004a20:	f803 1b01 	strb.w	r1, [r3], #1
 8004a24:	e7f9      	b.n	8004a1a <memset+0x4>
	...

08004a28 <sbrk_aligned>:
 8004a28:	b570      	push	{r4, r5, r6, lr}
 8004a2a:	4e0e      	ldr	r6, [pc, #56]	; (8004a64 <sbrk_aligned+0x3c>)
 8004a2c:	460c      	mov	r4, r1
 8004a2e:	6831      	ldr	r1, [r6, #0]
 8004a30:	4605      	mov	r5, r0
 8004a32:	b911      	cbnz	r1, 8004a3a <sbrk_aligned+0x12>
 8004a34:	f000 f902 	bl	8004c3c <_sbrk_r>
 8004a38:	6030      	str	r0, [r6, #0]
 8004a3a:	4621      	mov	r1, r4
 8004a3c:	4628      	mov	r0, r5
 8004a3e:	f000 f8fd 	bl	8004c3c <_sbrk_r>
 8004a42:	1c43      	adds	r3, r0, #1
 8004a44:	d00a      	beq.n	8004a5c <sbrk_aligned+0x34>
 8004a46:	1cc4      	adds	r4, r0, #3
 8004a48:	f024 0403 	bic.w	r4, r4, #3
 8004a4c:	42a0      	cmp	r0, r4
 8004a4e:	d007      	beq.n	8004a60 <sbrk_aligned+0x38>
 8004a50:	1a21      	subs	r1, r4, r0
 8004a52:	4628      	mov	r0, r5
 8004a54:	f000 f8f2 	bl	8004c3c <_sbrk_r>
 8004a58:	3001      	adds	r0, #1
 8004a5a:	d101      	bne.n	8004a60 <sbrk_aligned+0x38>
 8004a5c:	f04f 34ff 	mov.w	r4, #4294967295
 8004a60:	4620      	mov	r0, r4
 8004a62:	bd70      	pop	{r4, r5, r6, pc}
 8004a64:	20004574 	.word	0x20004574

08004a68 <_malloc_r>:
 8004a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a6c:	1ccd      	adds	r5, r1, #3
 8004a6e:	f025 0503 	bic.w	r5, r5, #3
 8004a72:	3508      	adds	r5, #8
 8004a74:	2d0c      	cmp	r5, #12
 8004a76:	bf38      	it	cc
 8004a78:	250c      	movcc	r5, #12
 8004a7a:	2d00      	cmp	r5, #0
 8004a7c:	4607      	mov	r7, r0
 8004a7e:	db01      	blt.n	8004a84 <_malloc_r+0x1c>
 8004a80:	42a9      	cmp	r1, r5
 8004a82:	d905      	bls.n	8004a90 <_malloc_r+0x28>
 8004a84:	230c      	movs	r3, #12
 8004a86:	603b      	str	r3, [r7, #0]
 8004a88:	2600      	movs	r6, #0
 8004a8a:	4630      	mov	r0, r6
 8004a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a90:	4e2e      	ldr	r6, [pc, #184]	; (8004b4c <_malloc_r+0xe4>)
 8004a92:	f000 fb43 	bl	800511c <__malloc_lock>
 8004a96:	6833      	ldr	r3, [r6, #0]
 8004a98:	461c      	mov	r4, r3
 8004a9a:	bb34      	cbnz	r4, 8004aea <_malloc_r+0x82>
 8004a9c:	4629      	mov	r1, r5
 8004a9e:	4638      	mov	r0, r7
 8004aa0:	f7ff ffc2 	bl	8004a28 <sbrk_aligned>
 8004aa4:	1c43      	adds	r3, r0, #1
 8004aa6:	4604      	mov	r4, r0
 8004aa8:	d14d      	bne.n	8004b46 <_malloc_r+0xde>
 8004aaa:	6834      	ldr	r4, [r6, #0]
 8004aac:	4626      	mov	r6, r4
 8004aae:	2e00      	cmp	r6, #0
 8004ab0:	d140      	bne.n	8004b34 <_malloc_r+0xcc>
 8004ab2:	6823      	ldr	r3, [r4, #0]
 8004ab4:	4631      	mov	r1, r6
 8004ab6:	4638      	mov	r0, r7
 8004ab8:	eb04 0803 	add.w	r8, r4, r3
 8004abc:	f000 f8be 	bl	8004c3c <_sbrk_r>
 8004ac0:	4580      	cmp	r8, r0
 8004ac2:	d13a      	bne.n	8004b3a <_malloc_r+0xd2>
 8004ac4:	6821      	ldr	r1, [r4, #0]
 8004ac6:	3503      	adds	r5, #3
 8004ac8:	1a6d      	subs	r5, r5, r1
 8004aca:	f025 0503 	bic.w	r5, r5, #3
 8004ace:	3508      	adds	r5, #8
 8004ad0:	2d0c      	cmp	r5, #12
 8004ad2:	bf38      	it	cc
 8004ad4:	250c      	movcc	r5, #12
 8004ad6:	4629      	mov	r1, r5
 8004ad8:	4638      	mov	r0, r7
 8004ada:	f7ff ffa5 	bl	8004a28 <sbrk_aligned>
 8004ade:	3001      	adds	r0, #1
 8004ae0:	d02b      	beq.n	8004b3a <_malloc_r+0xd2>
 8004ae2:	6823      	ldr	r3, [r4, #0]
 8004ae4:	442b      	add	r3, r5
 8004ae6:	6023      	str	r3, [r4, #0]
 8004ae8:	e00e      	b.n	8004b08 <_malloc_r+0xa0>
 8004aea:	6822      	ldr	r2, [r4, #0]
 8004aec:	1b52      	subs	r2, r2, r5
 8004aee:	d41e      	bmi.n	8004b2e <_malloc_r+0xc6>
 8004af0:	2a0b      	cmp	r2, #11
 8004af2:	d916      	bls.n	8004b22 <_malloc_r+0xba>
 8004af4:	1961      	adds	r1, r4, r5
 8004af6:	42a3      	cmp	r3, r4
 8004af8:	6025      	str	r5, [r4, #0]
 8004afa:	bf18      	it	ne
 8004afc:	6059      	strne	r1, [r3, #4]
 8004afe:	6863      	ldr	r3, [r4, #4]
 8004b00:	bf08      	it	eq
 8004b02:	6031      	streq	r1, [r6, #0]
 8004b04:	5162      	str	r2, [r4, r5]
 8004b06:	604b      	str	r3, [r1, #4]
 8004b08:	4638      	mov	r0, r7
 8004b0a:	f104 060b 	add.w	r6, r4, #11
 8004b0e:	f000 fb0b 	bl	8005128 <__malloc_unlock>
 8004b12:	f026 0607 	bic.w	r6, r6, #7
 8004b16:	1d23      	adds	r3, r4, #4
 8004b18:	1af2      	subs	r2, r6, r3
 8004b1a:	d0b6      	beq.n	8004a8a <_malloc_r+0x22>
 8004b1c:	1b9b      	subs	r3, r3, r6
 8004b1e:	50a3      	str	r3, [r4, r2]
 8004b20:	e7b3      	b.n	8004a8a <_malloc_r+0x22>
 8004b22:	6862      	ldr	r2, [r4, #4]
 8004b24:	42a3      	cmp	r3, r4
 8004b26:	bf0c      	ite	eq
 8004b28:	6032      	streq	r2, [r6, #0]
 8004b2a:	605a      	strne	r2, [r3, #4]
 8004b2c:	e7ec      	b.n	8004b08 <_malloc_r+0xa0>
 8004b2e:	4623      	mov	r3, r4
 8004b30:	6864      	ldr	r4, [r4, #4]
 8004b32:	e7b2      	b.n	8004a9a <_malloc_r+0x32>
 8004b34:	4634      	mov	r4, r6
 8004b36:	6876      	ldr	r6, [r6, #4]
 8004b38:	e7b9      	b.n	8004aae <_malloc_r+0x46>
 8004b3a:	230c      	movs	r3, #12
 8004b3c:	603b      	str	r3, [r7, #0]
 8004b3e:	4638      	mov	r0, r7
 8004b40:	f000 faf2 	bl	8005128 <__malloc_unlock>
 8004b44:	e7a1      	b.n	8004a8a <_malloc_r+0x22>
 8004b46:	6025      	str	r5, [r4, #0]
 8004b48:	e7de      	b.n	8004b08 <_malloc_r+0xa0>
 8004b4a:	bf00      	nop
 8004b4c:	20004570 	.word	0x20004570

08004b50 <_puts_r>:
 8004b50:	b570      	push	{r4, r5, r6, lr}
 8004b52:	460e      	mov	r6, r1
 8004b54:	4605      	mov	r5, r0
 8004b56:	b118      	cbz	r0, 8004b60 <_puts_r+0x10>
 8004b58:	6983      	ldr	r3, [r0, #24]
 8004b5a:	b90b      	cbnz	r3, 8004b60 <_puts_r+0x10>
 8004b5c:	f7ff fe96 	bl	800488c <__sinit>
 8004b60:	69ab      	ldr	r3, [r5, #24]
 8004b62:	68ac      	ldr	r4, [r5, #8]
 8004b64:	b913      	cbnz	r3, 8004b6c <_puts_r+0x1c>
 8004b66:	4628      	mov	r0, r5
 8004b68:	f7ff fe90 	bl	800488c <__sinit>
 8004b6c:	4b2c      	ldr	r3, [pc, #176]	; (8004c20 <_puts_r+0xd0>)
 8004b6e:	429c      	cmp	r4, r3
 8004b70:	d120      	bne.n	8004bb4 <_puts_r+0x64>
 8004b72:	686c      	ldr	r4, [r5, #4]
 8004b74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b76:	07db      	lsls	r3, r3, #31
 8004b78:	d405      	bmi.n	8004b86 <_puts_r+0x36>
 8004b7a:	89a3      	ldrh	r3, [r4, #12]
 8004b7c:	0598      	lsls	r0, r3, #22
 8004b7e:	d402      	bmi.n	8004b86 <_puts_r+0x36>
 8004b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b82:	f7ff ff46 	bl	8004a12 <__retarget_lock_acquire_recursive>
 8004b86:	89a3      	ldrh	r3, [r4, #12]
 8004b88:	0719      	lsls	r1, r3, #28
 8004b8a:	d51d      	bpl.n	8004bc8 <_puts_r+0x78>
 8004b8c:	6923      	ldr	r3, [r4, #16]
 8004b8e:	b1db      	cbz	r3, 8004bc8 <_puts_r+0x78>
 8004b90:	3e01      	subs	r6, #1
 8004b92:	68a3      	ldr	r3, [r4, #8]
 8004b94:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	60a3      	str	r3, [r4, #8]
 8004b9c:	bb39      	cbnz	r1, 8004bee <_puts_r+0x9e>
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	da38      	bge.n	8004c14 <_puts_r+0xc4>
 8004ba2:	4622      	mov	r2, r4
 8004ba4:	210a      	movs	r1, #10
 8004ba6:	4628      	mov	r0, r5
 8004ba8:	f000 f89c 	bl	8004ce4 <__swbuf_r>
 8004bac:	3001      	adds	r0, #1
 8004bae:	d011      	beq.n	8004bd4 <_puts_r+0x84>
 8004bb0:	250a      	movs	r5, #10
 8004bb2:	e011      	b.n	8004bd8 <_puts_r+0x88>
 8004bb4:	4b1b      	ldr	r3, [pc, #108]	; (8004c24 <_puts_r+0xd4>)
 8004bb6:	429c      	cmp	r4, r3
 8004bb8:	d101      	bne.n	8004bbe <_puts_r+0x6e>
 8004bba:	68ac      	ldr	r4, [r5, #8]
 8004bbc:	e7da      	b.n	8004b74 <_puts_r+0x24>
 8004bbe:	4b1a      	ldr	r3, [pc, #104]	; (8004c28 <_puts_r+0xd8>)
 8004bc0:	429c      	cmp	r4, r3
 8004bc2:	bf08      	it	eq
 8004bc4:	68ec      	ldreq	r4, [r5, #12]
 8004bc6:	e7d5      	b.n	8004b74 <_puts_r+0x24>
 8004bc8:	4621      	mov	r1, r4
 8004bca:	4628      	mov	r0, r5
 8004bcc:	f000 f8ee 	bl	8004dac <__swsetup_r>
 8004bd0:	2800      	cmp	r0, #0
 8004bd2:	d0dd      	beq.n	8004b90 <_puts_r+0x40>
 8004bd4:	f04f 35ff 	mov.w	r5, #4294967295
 8004bd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bda:	07da      	lsls	r2, r3, #31
 8004bdc:	d405      	bmi.n	8004bea <_puts_r+0x9a>
 8004bde:	89a3      	ldrh	r3, [r4, #12]
 8004be0:	059b      	lsls	r3, r3, #22
 8004be2:	d402      	bmi.n	8004bea <_puts_r+0x9a>
 8004be4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004be6:	f7ff ff15 	bl	8004a14 <__retarget_lock_release_recursive>
 8004bea:	4628      	mov	r0, r5
 8004bec:	bd70      	pop	{r4, r5, r6, pc}
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	da04      	bge.n	8004bfc <_puts_r+0xac>
 8004bf2:	69a2      	ldr	r2, [r4, #24]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	dc06      	bgt.n	8004c06 <_puts_r+0xb6>
 8004bf8:	290a      	cmp	r1, #10
 8004bfa:	d004      	beq.n	8004c06 <_puts_r+0xb6>
 8004bfc:	6823      	ldr	r3, [r4, #0]
 8004bfe:	1c5a      	adds	r2, r3, #1
 8004c00:	6022      	str	r2, [r4, #0]
 8004c02:	7019      	strb	r1, [r3, #0]
 8004c04:	e7c5      	b.n	8004b92 <_puts_r+0x42>
 8004c06:	4622      	mov	r2, r4
 8004c08:	4628      	mov	r0, r5
 8004c0a:	f000 f86b 	bl	8004ce4 <__swbuf_r>
 8004c0e:	3001      	adds	r0, #1
 8004c10:	d1bf      	bne.n	8004b92 <_puts_r+0x42>
 8004c12:	e7df      	b.n	8004bd4 <_puts_r+0x84>
 8004c14:	6823      	ldr	r3, [r4, #0]
 8004c16:	250a      	movs	r5, #10
 8004c18:	1c5a      	adds	r2, r3, #1
 8004c1a:	6022      	str	r2, [r4, #0]
 8004c1c:	701d      	strb	r5, [r3, #0]
 8004c1e:	e7db      	b.n	8004bd8 <_puts_r+0x88>
 8004c20:	080052f4 	.word	0x080052f4
 8004c24:	08005314 	.word	0x08005314
 8004c28:	080052d4 	.word	0x080052d4

08004c2c <puts>:
 8004c2c:	4b02      	ldr	r3, [pc, #8]	; (8004c38 <puts+0xc>)
 8004c2e:	4601      	mov	r1, r0
 8004c30:	6818      	ldr	r0, [r3, #0]
 8004c32:	f7ff bf8d 	b.w	8004b50 <_puts_r>
 8004c36:	bf00      	nop
 8004c38:	20000010 	.word	0x20000010

08004c3c <_sbrk_r>:
 8004c3c:	b538      	push	{r3, r4, r5, lr}
 8004c3e:	4d06      	ldr	r5, [pc, #24]	; (8004c58 <_sbrk_r+0x1c>)
 8004c40:	2300      	movs	r3, #0
 8004c42:	4604      	mov	r4, r0
 8004c44:	4608      	mov	r0, r1
 8004c46:	602b      	str	r3, [r5, #0]
 8004c48:	f7fc f8f0 	bl	8000e2c <_sbrk>
 8004c4c:	1c43      	adds	r3, r0, #1
 8004c4e:	d102      	bne.n	8004c56 <_sbrk_r+0x1a>
 8004c50:	682b      	ldr	r3, [r5, #0]
 8004c52:	b103      	cbz	r3, 8004c56 <_sbrk_r+0x1a>
 8004c54:	6023      	str	r3, [r4, #0]
 8004c56:	bd38      	pop	{r3, r4, r5, pc}
 8004c58:	20004578 	.word	0x20004578

08004c5c <__sread>:
 8004c5c:	b510      	push	{r4, lr}
 8004c5e:	460c      	mov	r4, r1
 8004c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c64:	f000 fab2 	bl	80051cc <_read_r>
 8004c68:	2800      	cmp	r0, #0
 8004c6a:	bfab      	itete	ge
 8004c6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004c6e:	89a3      	ldrhlt	r3, [r4, #12]
 8004c70:	181b      	addge	r3, r3, r0
 8004c72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004c76:	bfac      	ite	ge
 8004c78:	6563      	strge	r3, [r4, #84]	; 0x54
 8004c7a:	81a3      	strhlt	r3, [r4, #12]
 8004c7c:	bd10      	pop	{r4, pc}

08004c7e <__swrite>:
 8004c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c82:	461f      	mov	r7, r3
 8004c84:	898b      	ldrh	r3, [r1, #12]
 8004c86:	05db      	lsls	r3, r3, #23
 8004c88:	4605      	mov	r5, r0
 8004c8a:	460c      	mov	r4, r1
 8004c8c:	4616      	mov	r6, r2
 8004c8e:	d505      	bpl.n	8004c9c <__swrite+0x1e>
 8004c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c94:	2302      	movs	r3, #2
 8004c96:	2200      	movs	r2, #0
 8004c98:	f000 f9c8 	bl	800502c <_lseek_r>
 8004c9c:	89a3      	ldrh	r3, [r4, #12]
 8004c9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ca2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ca6:	81a3      	strh	r3, [r4, #12]
 8004ca8:	4632      	mov	r2, r6
 8004caa:	463b      	mov	r3, r7
 8004cac:	4628      	mov	r0, r5
 8004cae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cb2:	f000 b869 	b.w	8004d88 <_write_r>

08004cb6 <__sseek>:
 8004cb6:	b510      	push	{r4, lr}
 8004cb8:	460c      	mov	r4, r1
 8004cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cbe:	f000 f9b5 	bl	800502c <_lseek_r>
 8004cc2:	1c43      	adds	r3, r0, #1
 8004cc4:	89a3      	ldrh	r3, [r4, #12]
 8004cc6:	bf15      	itete	ne
 8004cc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8004cca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004cce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004cd2:	81a3      	strheq	r3, [r4, #12]
 8004cd4:	bf18      	it	ne
 8004cd6:	81a3      	strhne	r3, [r4, #12]
 8004cd8:	bd10      	pop	{r4, pc}

08004cda <__sclose>:
 8004cda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cde:	f000 b8d3 	b.w	8004e88 <_close_r>
	...

08004ce4 <__swbuf_r>:
 8004ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce6:	460e      	mov	r6, r1
 8004ce8:	4614      	mov	r4, r2
 8004cea:	4605      	mov	r5, r0
 8004cec:	b118      	cbz	r0, 8004cf6 <__swbuf_r+0x12>
 8004cee:	6983      	ldr	r3, [r0, #24]
 8004cf0:	b90b      	cbnz	r3, 8004cf6 <__swbuf_r+0x12>
 8004cf2:	f7ff fdcb 	bl	800488c <__sinit>
 8004cf6:	4b21      	ldr	r3, [pc, #132]	; (8004d7c <__swbuf_r+0x98>)
 8004cf8:	429c      	cmp	r4, r3
 8004cfa:	d12b      	bne.n	8004d54 <__swbuf_r+0x70>
 8004cfc:	686c      	ldr	r4, [r5, #4]
 8004cfe:	69a3      	ldr	r3, [r4, #24]
 8004d00:	60a3      	str	r3, [r4, #8]
 8004d02:	89a3      	ldrh	r3, [r4, #12]
 8004d04:	071a      	lsls	r2, r3, #28
 8004d06:	d52f      	bpl.n	8004d68 <__swbuf_r+0x84>
 8004d08:	6923      	ldr	r3, [r4, #16]
 8004d0a:	b36b      	cbz	r3, 8004d68 <__swbuf_r+0x84>
 8004d0c:	6923      	ldr	r3, [r4, #16]
 8004d0e:	6820      	ldr	r0, [r4, #0]
 8004d10:	1ac0      	subs	r0, r0, r3
 8004d12:	6963      	ldr	r3, [r4, #20]
 8004d14:	b2f6      	uxtb	r6, r6
 8004d16:	4283      	cmp	r3, r0
 8004d18:	4637      	mov	r7, r6
 8004d1a:	dc04      	bgt.n	8004d26 <__swbuf_r+0x42>
 8004d1c:	4621      	mov	r1, r4
 8004d1e:	4628      	mov	r0, r5
 8004d20:	f000 f948 	bl	8004fb4 <_fflush_r>
 8004d24:	bb30      	cbnz	r0, 8004d74 <__swbuf_r+0x90>
 8004d26:	68a3      	ldr	r3, [r4, #8]
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	60a3      	str	r3, [r4, #8]
 8004d2c:	6823      	ldr	r3, [r4, #0]
 8004d2e:	1c5a      	adds	r2, r3, #1
 8004d30:	6022      	str	r2, [r4, #0]
 8004d32:	701e      	strb	r6, [r3, #0]
 8004d34:	6963      	ldr	r3, [r4, #20]
 8004d36:	3001      	adds	r0, #1
 8004d38:	4283      	cmp	r3, r0
 8004d3a:	d004      	beq.n	8004d46 <__swbuf_r+0x62>
 8004d3c:	89a3      	ldrh	r3, [r4, #12]
 8004d3e:	07db      	lsls	r3, r3, #31
 8004d40:	d506      	bpl.n	8004d50 <__swbuf_r+0x6c>
 8004d42:	2e0a      	cmp	r6, #10
 8004d44:	d104      	bne.n	8004d50 <__swbuf_r+0x6c>
 8004d46:	4621      	mov	r1, r4
 8004d48:	4628      	mov	r0, r5
 8004d4a:	f000 f933 	bl	8004fb4 <_fflush_r>
 8004d4e:	b988      	cbnz	r0, 8004d74 <__swbuf_r+0x90>
 8004d50:	4638      	mov	r0, r7
 8004d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d54:	4b0a      	ldr	r3, [pc, #40]	; (8004d80 <__swbuf_r+0x9c>)
 8004d56:	429c      	cmp	r4, r3
 8004d58:	d101      	bne.n	8004d5e <__swbuf_r+0x7a>
 8004d5a:	68ac      	ldr	r4, [r5, #8]
 8004d5c:	e7cf      	b.n	8004cfe <__swbuf_r+0x1a>
 8004d5e:	4b09      	ldr	r3, [pc, #36]	; (8004d84 <__swbuf_r+0xa0>)
 8004d60:	429c      	cmp	r4, r3
 8004d62:	bf08      	it	eq
 8004d64:	68ec      	ldreq	r4, [r5, #12]
 8004d66:	e7ca      	b.n	8004cfe <__swbuf_r+0x1a>
 8004d68:	4621      	mov	r1, r4
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	f000 f81e 	bl	8004dac <__swsetup_r>
 8004d70:	2800      	cmp	r0, #0
 8004d72:	d0cb      	beq.n	8004d0c <__swbuf_r+0x28>
 8004d74:	f04f 37ff 	mov.w	r7, #4294967295
 8004d78:	e7ea      	b.n	8004d50 <__swbuf_r+0x6c>
 8004d7a:	bf00      	nop
 8004d7c:	080052f4 	.word	0x080052f4
 8004d80:	08005314 	.word	0x08005314
 8004d84:	080052d4 	.word	0x080052d4

08004d88 <_write_r>:
 8004d88:	b538      	push	{r3, r4, r5, lr}
 8004d8a:	4d07      	ldr	r5, [pc, #28]	; (8004da8 <_write_r+0x20>)
 8004d8c:	4604      	mov	r4, r0
 8004d8e:	4608      	mov	r0, r1
 8004d90:	4611      	mov	r1, r2
 8004d92:	2200      	movs	r2, #0
 8004d94:	602a      	str	r2, [r5, #0]
 8004d96:	461a      	mov	r2, r3
 8004d98:	f7fb fdf8 	bl	800098c <_write>
 8004d9c:	1c43      	adds	r3, r0, #1
 8004d9e:	d102      	bne.n	8004da6 <_write_r+0x1e>
 8004da0:	682b      	ldr	r3, [r5, #0]
 8004da2:	b103      	cbz	r3, 8004da6 <_write_r+0x1e>
 8004da4:	6023      	str	r3, [r4, #0]
 8004da6:	bd38      	pop	{r3, r4, r5, pc}
 8004da8:	20004578 	.word	0x20004578

08004dac <__swsetup_r>:
 8004dac:	4b32      	ldr	r3, [pc, #200]	; (8004e78 <__swsetup_r+0xcc>)
 8004dae:	b570      	push	{r4, r5, r6, lr}
 8004db0:	681d      	ldr	r5, [r3, #0]
 8004db2:	4606      	mov	r6, r0
 8004db4:	460c      	mov	r4, r1
 8004db6:	b125      	cbz	r5, 8004dc2 <__swsetup_r+0x16>
 8004db8:	69ab      	ldr	r3, [r5, #24]
 8004dba:	b913      	cbnz	r3, 8004dc2 <__swsetup_r+0x16>
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	f7ff fd65 	bl	800488c <__sinit>
 8004dc2:	4b2e      	ldr	r3, [pc, #184]	; (8004e7c <__swsetup_r+0xd0>)
 8004dc4:	429c      	cmp	r4, r3
 8004dc6:	d10f      	bne.n	8004de8 <__swsetup_r+0x3c>
 8004dc8:	686c      	ldr	r4, [r5, #4]
 8004dca:	89a3      	ldrh	r3, [r4, #12]
 8004dcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004dd0:	0719      	lsls	r1, r3, #28
 8004dd2:	d42c      	bmi.n	8004e2e <__swsetup_r+0x82>
 8004dd4:	06dd      	lsls	r5, r3, #27
 8004dd6:	d411      	bmi.n	8004dfc <__swsetup_r+0x50>
 8004dd8:	2309      	movs	r3, #9
 8004dda:	6033      	str	r3, [r6, #0]
 8004ddc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004de0:	81a3      	strh	r3, [r4, #12]
 8004de2:	f04f 30ff 	mov.w	r0, #4294967295
 8004de6:	e03e      	b.n	8004e66 <__swsetup_r+0xba>
 8004de8:	4b25      	ldr	r3, [pc, #148]	; (8004e80 <__swsetup_r+0xd4>)
 8004dea:	429c      	cmp	r4, r3
 8004dec:	d101      	bne.n	8004df2 <__swsetup_r+0x46>
 8004dee:	68ac      	ldr	r4, [r5, #8]
 8004df0:	e7eb      	b.n	8004dca <__swsetup_r+0x1e>
 8004df2:	4b24      	ldr	r3, [pc, #144]	; (8004e84 <__swsetup_r+0xd8>)
 8004df4:	429c      	cmp	r4, r3
 8004df6:	bf08      	it	eq
 8004df8:	68ec      	ldreq	r4, [r5, #12]
 8004dfa:	e7e6      	b.n	8004dca <__swsetup_r+0x1e>
 8004dfc:	0758      	lsls	r0, r3, #29
 8004dfe:	d512      	bpl.n	8004e26 <__swsetup_r+0x7a>
 8004e00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e02:	b141      	cbz	r1, 8004e16 <__swsetup_r+0x6a>
 8004e04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e08:	4299      	cmp	r1, r3
 8004e0a:	d002      	beq.n	8004e12 <__swsetup_r+0x66>
 8004e0c:	4630      	mov	r0, r6
 8004e0e:	f000 f991 	bl	8005134 <_free_r>
 8004e12:	2300      	movs	r3, #0
 8004e14:	6363      	str	r3, [r4, #52]	; 0x34
 8004e16:	89a3      	ldrh	r3, [r4, #12]
 8004e18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004e1c:	81a3      	strh	r3, [r4, #12]
 8004e1e:	2300      	movs	r3, #0
 8004e20:	6063      	str	r3, [r4, #4]
 8004e22:	6923      	ldr	r3, [r4, #16]
 8004e24:	6023      	str	r3, [r4, #0]
 8004e26:	89a3      	ldrh	r3, [r4, #12]
 8004e28:	f043 0308 	orr.w	r3, r3, #8
 8004e2c:	81a3      	strh	r3, [r4, #12]
 8004e2e:	6923      	ldr	r3, [r4, #16]
 8004e30:	b94b      	cbnz	r3, 8004e46 <__swsetup_r+0x9a>
 8004e32:	89a3      	ldrh	r3, [r4, #12]
 8004e34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e3c:	d003      	beq.n	8004e46 <__swsetup_r+0x9a>
 8004e3e:	4621      	mov	r1, r4
 8004e40:	4630      	mov	r0, r6
 8004e42:	f000 f92b 	bl	800509c <__smakebuf_r>
 8004e46:	89a0      	ldrh	r0, [r4, #12]
 8004e48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e4c:	f010 0301 	ands.w	r3, r0, #1
 8004e50:	d00a      	beq.n	8004e68 <__swsetup_r+0xbc>
 8004e52:	2300      	movs	r3, #0
 8004e54:	60a3      	str	r3, [r4, #8]
 8004e56:	6963      	ldr	r3, [r4, #20]
 8004e58:	425b      	negs	r3, r3
 8004e5a:	61a3      	str	r3, [r4, #24]
 8004e5c:	6923      	ldr	r3, [r4, #16]
 8004e5e:	b943      	cbnz	r3, 8004e72 <__swsetup_r+0xc6>
 8004e60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004e64:	d1ba      	bne.n	8004ddc <__swsetup_r+0x30>
 8004e66:	bd70      	pop	{r4, r5, r6, pc}
 8004e68:	0781      	lsls	r1, r0, #30
 8004e6a:	bf58      	it	pl
 8004e6c:	6963      	ldrpl	r3, [r4, #20]
 8004e6e:	60a3      	str	r3, [r4, #8]
 8004e70:	e7f4      	b.n	8004e5c <__swsetup_r+0xb0>
 8004e72:	2000      	movs	r0, #0
 8004e74:	e7f7      	b.n	8004e66 <__swsetup_r+0xba>
 8004e76:	bf00      	nop
 8004e78:	20000010 	.word	0x20000010
 8004e7c:	080052f4 	.word	0x080052f4
 8004e80:	08005314 	.word	0x08005314
 8004e84:	080052d4 	.word	0x080052d4

08004e88 <_close_r>:
 8004e88:	b538      	push	{r3, r4, r5, lr}
 8004e8a:	4d06      	ldr	r5, [pc, #24]	; (8004ea4 <_close_r+0x1c>)
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	4604      	mov	r4, r0
 8004e90:	4608      	mov	r0, r1
 8004e92:	602b      	str	r3, [r5, #0]
 8004e94:	f7fb fda6 	bl	80009e4 <_close>
 8004e98:	1c43      	adds	r3, r0, #1
 8004e9a:	d102      	bne.n	8004ea2 <_close_r+0x1a>
 8004e9c:	682b      	ldr	r3, [r5, #0]
 8004e9e:	b103      	cbz	r3, 8004ea2 <_close_r+0x1a>
 8004ea0:	6023      	str	r3, [r4, #0]
 8004ea2:	bd38      	pop	{r3, r4, r5, pc}
 8004ea4:	20004578 	.word	0x20004578

08004ea8 <__sflush_r>:
 8004ea8:	898a      	ldrh	r2, [r1, #12]
 8004eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eae:	4605      	mov	r5, r0
 8004eb0:	0710      	lsls	r0, r2, #28
 8004eb2:	460c      	mov	r4, r1
 8004eb4:	d458      	bmi.n	8004f68 <__sflush_r+0xc0>
 8004eb6:	684b      	ldr	r3, [r1, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	dc05      	bgt.n	8004ec8 <__sflush_r+0x20>
 8004ebc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	dc02      	bgt.n	8004ec8 <__sflush_r+0x20>
 8004ec2:	2000      	movs	r0, #0
 8004ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ec8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004eca:	2e00      	cmp	r6, #0
 8004ecc:	d0f9      	beq.n	8004ec2 <__sflush_r+0x1a>
 8004ece:	2300      	movs	r3, #0
 8004ed0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ed4:	682f      	ldr	r7, [r5, #0]
 8004ed6:	602b      	str	r3, [r5, #0]
 8004ed8:	d032      	beq.n	8004f40 <__sflush_r+0x98>
 8004eda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004edc:	89a3      	ldrh	r3, [r4, #12]
 8004ede:	075a      	lsls	r2, r3, #29
 8004ee0:	d505      	bpl.n	8004eee <__sflush_r+0x46>
 8004ee2:	6863      	ldr	r3, [r4, #4]
 8004ee4:	1ac0      	subs	r0, r0, r3
 8004ee6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ee8:	b10b      	cbz	r3, 8004eee <__sflush_r+0x46>
 8004eea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004eec:	1ac0      	subs	r0, r0, r3
 8004eee:	2300      	movs	r3, #0
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ef4:	6a21      	ldr	r1, [r4, #32]
 8004ef6:	4628      	mov	r0, r5
 8004ef8:	47b0      	blx	r6
 8004efa:	1c43      	adds	r3, r0, #1
 8004efc:	89a3      	ldrh	r3, [r4, #12]
 8004efe:	d106      	bne.n	8004f0e <__sflush_r+0x66>
 8004f00:	6829      	ldr	r1, [r5, #0]
 8004f02:	291d      	cmp	r1, #29
 8004f04:	d82c      	bhi.n	8004f60 <__sflush_r+0xb8>
 8004f06:	4a2a      	ldr	r2, [pc, #168]	; (8004fb0 <__sflush_r+0x108>)
 8004f08:	40ca      	lsrs	r2, r1
 8004f0a:	07d6      	lsls	r6, r2, #31
 8004f0c:	d528      	bpl.n	8004f60 <__sflush_r+0xb8>
 8004f0e:	2200      	movs	r2, #0
 8004f10:	6062      	str	r2, [r4, #4]
 8004f12:	04d9      	lsls	r1, r3, #19
 8004f14:	6922      	ldr	r2, [r4, #16]
 8004f16:	6022      	str	r2, [r4, #0]
 8004f18:	d504      	bpl.n	8004f24 <__sflush_r+0x7c>
 8004f1a:	1c42      	adds	r2, r0, #1
 8004f1c:	d101      	bne.n	8004f22 <__sflush_r+0x7a>
 8004f1e:	682b      	ldr	r3, [r5, #0]
 8004f20:	b903      	cbnz	r3, 8004f24 <__sflush_r+0x7c>
 8004f22:	6560      	str	r0, [r4, #84]	; 0x54
 8004f24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f26:	602f      	str	r7, [r5, #0]
 8004f28:	2900      	cmp	r1, #0
 8004f2a:	d0ca      	beq.n	8004ec2 <__sflush_r+0x1a>
 8004f2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f30:	4299      	cmp	r1, r3
 8004f32:	d002      	beq.n	8004f3a <__sflush_r+0x92>
 8004f34:	4628      	mov	r0, r5
 8004f36:	f000 f8fd 	bl	8005134 <_free_r>
 8004f3a:	2000      	movs	r0, #0
 8004f3c:	6360      	str	r0, [r4, #52]	; 0x34
 8004f3e:	e7c1      	b.n	8004ec4 <__sflush_r+0x1c>
 8004f40:	6a21      	ldr	r1, [r4, #32]
 8004f42:	2301      	movs	r3, #1
 8004f44:	4628      	mov	r0, r5
 8004f46:	47b0      	blx	r6
 8004f48:	1c41      	adds	r1, r0, #1
 8004f4a:	d1c7      	bne.n	8004edc <__sflush_r+0x34>
 8004f4c:	682b      	ldr	r3, [r5, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d0c4      	beq.n	8004edc <__sflush_r+0x34>
 8004f52:	2b1d      	cmp	r3, #29
 8004f54:	d001      	beq.n	8004f5a <__sflush_r+0xb2>
 8004f56:	2b16      	cmp	r3, #22
 8004f58:	d101      	bne.n	8004f5e <__sflush_r+0xb6>
 8004f5a:	602f      	str	r7, [r5, #0]
 8004f5c:	e7b1      	b.n	8004ec2 <__sflush_r+0x1a>
 8004f5e:	89a3      	ldrh	r3, [r4, #12]
 8004f60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f64:	81a3      	strh	r3, [r4, #12]
 8004f66:	e7ad      	b.n	8004ec4 <__sflush_r+0x1c>
 8004f68:	690f      	ldr	r7, [r1, #16]
 8004f6a:	2f00      	cmp	r7, #0
 8004f6c:	d0a9      	beq.n	8004ec2 <__sflush_r+0x1a>
 8004f6e:	0793      	lsls	r3, r2, #30
 8004f70:	680e      	ldr	r6, [r1, #0]
 8004f72:	bf08      	it	eq
 8004f74:	694b      	ldreq	r3, [r1, #20]
 8004f76:	600f      	str	r7, [r1, #0]
 8004f78:	bf18      	it	ne
 8004f7a:	2300      	movne	r3, #0
 8004f7c:	eba6 0807 	sub.w	r8, r6, r7
 8004f80:	608b      	str	r3, [r1, #8]
 8004f82:	f1b8 0f00 	cmp.w	r8, #0
 8004f86:	dd9c      	ble.n	8004ec2 <__sflush_r+0x1a>
 8004f88:	6a21      	ldr	r1, [r4, #32]
 8004f8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004f8c:	4643      	mov	r3, r8
 8004f8e:	463a      	mov	r2, r7
 8004f90:	4628      	mov	r0, r5
 8004f92:	47b0      	blx	r6
 8004f94:	2800      	cmp	r0, #0
 8004f96:	dc06      	bgt.n	8004fa6 <__sflush_r+0xfe>
 8004f98:	89a3      	ldrh	r3, [r4, #12]
 8004f9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f9e:	81a3      	strh	r3, [r4, #12]
 8004fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa4:	e78e      	b.n	8004ec4 <__sflush_r+0x1c>
 8004fa6:	4407      	add	r7, r0
 8004fa8:	eba8 0800 	sub.w	r8, r8, r0
 8004fac:	e7e9      	b.n	8004f82 <__sflush_r+0xda>
 8004fae:	bf00      	nop
 8004fb0:	20400001 	.word	0x20400001

08004fb4 <_fflush_r>:
 8004fb4:	b538      	push	{r3, r4, r5, lr}
 8004fb6:	690b      	ldr	r3, [r1, #16]
 8004fb8:	4605      	mov	r5, r0
 8004fba:	460c      	mov	r4, r1
 8004fbc:	b913      	cbnz	r3, 8004fc4 <_fflush_r+0x10>
 8004fbe:	2500      	movs	r5, #0
 8004fc0:	4628      	mov	r0, r5
 8004fc2:	bd38      	pop	{r3, r4, r5, pc}
 8004fc4:	b118      	cbz	r0, 8004fce <_fflush_r+0x1a>
 8004fc6:	6983      	ldr	r3, [r0, #24]
 8004fc8:	b90b      	cbnz	r3, 8004fce <_fflush_r+0x1a>
 8004fca:	f7ff fc5f 	bl	800488c <__sinit>
 8004fce:	4b14      	ldr	r3, [pc, #80]	; (8005020 <_fflush_r+0x6c>)
 8004fd0:	429c      	cmp	r4, r3
 8004fd2:	d11b      	bne.n	800500c <_fflush_r+0x58>
 8004fd4:	686c      	ldr	r4, [r5, #4]
 8004fd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d0ef      	beq.n	8004fbe <_fflush_r+0xa>
 8004fde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004fe0:	07d0      	lsls	r0, r2, #31
 8004fe2:	d404      	bmi.n	8004fee <_fflush_r+0x3a>
 8004fe4:	0599      	lsls	r1, r3, #22
 8004fe6:	d402      	bmi.n	8004fee <_fflush_r+0x3a>
 8004fe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fea:	f7ff fd12 	bl	8004a12 <__retarget_lock_acquire_recursive>
 8004fee:	4628      	mov	r0, r5
 8004ff0:	4621      	mov	r1, r4
 8004ff2:	f7ff ff59 	bl	8004ea8 <__sflush_r>
 8004ff6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ff8:	07da      	lsls	r2, r3, #31
 8004ffa:	4605      	mov	r5, r0
 8004ffc:	d4e0      	bmi.n	8004fc0 <_fflush_r+0xc>
 8004ffe:	89a3      	ldrh	r3, [r4, #12]
 8005000:	059b      	lsls	r3, r3, #22
 8005002:	d4dd      	bmi.n	8004fc0 <_fflush_r+0xc>
 8005004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005006:	f7ff fd05 	bl	8004a14 <__retarget_lock_release_recursive>
 800500a:	e7d9      	b.n	8004fc0 <_fflush_r+0xc>
 800500c:	4b05      	ldr	r3, [pc, #20]	; (8005024 <_fflush_r+0x70>)
 800500e:	429c      	cmp	r4, r3
 8005010:	d101      	bne.n	8005016 <_fflush_r+0x62>
 8005012:	68ac      	ldr	r4, [r5, #8]
 8005014:	e7df      	b.n	8004fd6 <_fflush_r+0x22>
 8005016:	4b04      	ldr	r3, [pc, #16]	; (8005028 <_fflush_r+0x74>)
 8005018:	429c      	cmp	r4, r3
 800501a:	bf08      	it	eq
 800501c:	68ec      	ldreq	r4, [r5, #12]
 800501e:	e7da      	b.n	8004fd6 <_fflush_r+0x22>
 8005020:	080052f4 	.word	0x080052f4
 8005024:	08005314 	.word	0x08005314
 8005028:	080052d4 	.word	0x080052d4

0800502c <_lseek_r>:
 800502c:	b538      	push	{r3, r4, r5, lr}
 800502e:	4d07      	ldr	r5, [pc, #28]	; (800504c <_lseek_r+0x20>)
 8005030:	4604      	mov	r4, r0
 8005032:	4608      	mov	r0, r1
 8005034:	4611      	mov	r1, r2
 8005036:	2200      	movs	r2, #0
 8005038:	602a      	str	r2, [r5, #0]
 800503a:	461a      	mov	r2, r3
 800503c:	f7fb fce9 	bl	8000a12 <_lseek>
 8005040:	1c43      	adds	r3, r0, #1
 8005042:	d102      	bne.n	800504a <_lseek_r+0x1e>
 8005044:	682b      	ldr	r3, [r5, #0]
 8005046:	b103      	cbz	r3, 800504a <_lseek_r+0x1e>
 8005048:	6023      	str	r3, [r4, #0]
 800504a:	bd38      	pop	{r3, r4, r5, pc}
 800504c:	20004578 	.word	0x20004578

08005050 <__swhatbuf_r>:
 8005050:	b570      	push	{r4, r5, r6, lr}
 8005052:	460e      	mov	r6, r1
 8005054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005058:	2900      	cmp	r1, #0
 800505a:	b096      	sub	sp, #88	; 0x58
 800505c:	4614      	mov	r4, r2
 800505e:	461d      	mov	r5, r3
 8005060:	da08      	bge.n	8005074 <__swhatbuf_r+0x24>
 8005062:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	602a      	str	r2, [r5, #0]
 800506a:	061a      	lsls	r2, r3, #24
 800506c:	d410      	bmi.n	8005090 <__swhatbuf_r+0x40>
 800506e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005072:	e00e      	b.n	8005092 <__swhatbuf_r+0x42>
 8005074:	466a      	mov	r2, sp
 8005076:	f000 f8bb 	bl	80051f0 <_fstat_r>
 800507a:	2800      	cmp	r0, #0
 800507c:	dbf1      	blt.n	8005062 <__swhatbuf_r+0x12>
 800507e:	9a01      	ldr	r2, [sp, #4]
 8005080:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005084:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005088:	425a      	negs	r2, r3
 800508a:	415a      	adcs	r2, r3
 800508c:	602a      	str	r2, [r5, #0]
 800508e:	e7ee      	b.n	800506e <__swhatbuf_r+0x1e>
 8005090:	2340      	movs	r3, #64	; 0x40
 8005092:	2000      	movs	r0, #0
 8005094:	6023      	str	r3, [r4, #0]
 8005096:	b016      	add	sp, #88	; 0x58
 8005098:	bd70      	pop	{r4, r5, r6, pc}
	...

0800509c <__smakebuf_r>:
 800509c:	898b      	ldrh	r3, [r1, #12]
 800509e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80050a0:	079d      	lsls	r5, r3, #30
 80050a2:	4606      	mov	r6, r0
 80050a4:	460c      	mov	r4, r1
 80050a6:	d507      	bpl.n	80050b8 <__smakebuf_r+0x1c>
 80050a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80050ac:	6023      	str	r3, [r4, #0]
 80050ae:	6123      	str	r3, [r4, #16]
 80050b0:	2301      	movs	r3, #1
 80050b2:	6163      	str	r3, [r4, #20]
 80050b4:	b002      	add	sp, #8
 80050b6:	bd70      	pop	{r4, r5, r6, pc}
 80050b8:	ab01      	add	r3, sp, #4
 80050ba:	466a      	mov	r2, sp
 80050bc:	f7ff ffc8 	bl	8005050 <__swhatbuf_r>
 80050c0:	9900      	ldr	r1, [sp, #0]
 80050c2:	4605      	mov	r5, r0
 80050c4:	4630      	mov	r0, r6
 80050c6:	f7ff fccf 	bl	8004a68 <_malloc_r>
 80050ca:	b948      	cbnz	r0, 80050e0 <__smakebuf_r+0x44>
 80050cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050d0:	059a      	lsls	r2, r3, #22
 80050d2:	d4ef      	bmi.n	80050b4 <__smakebuf_r+0x18>
 80050d4:	f023 0303 	bic.w	r3, r3, #3
 80050d8:	f043 0302 	orr.w	r3, r3, #2
 80050dc:	81a3      	strh	r3, [r4, #12]
 80050de:	e7e3      	b.n	80050a8 <__smakebuf_r+0xc>
 80050e0:	4b0d      	ldr	r3, [pc, #52]	; (8005118 <__smakebuf_r+0x7c>)
 80050e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80050e4:	89a3      	ldrh	r3, [r4, #12]
 80050e6:	6020      	str	r0, [r4, #0]
 80050e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ec:	81a3      	strh	r3, [r4, #12]
 80050ee:	9b00      	ldr	r3, [sp, #0]
 80050f0:	6163      	str	r3, [r4, #20]
 80050f2:	9b01      	ldr	r3, [sp, #4]
 80050f4:	6120      	str	r0, [r4, #16]
 80050f6:	b15b      	cbz	r3, 8005110 <__smakebuf_r+0x74>
 80050f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050fc:	4630      	mov	r0, r6
 80050fe:	f000 f889 	bl	8005214 <_isatty_r>
 8005102:	b128      	cbz	r0, 8005110 <__smakebuf_r+0x74>
 8005104:	89a3      	ldrh	r3, [r4, #12]
 8005106:	f023 0303 	bic.w	r3, r3, #3
 800510a:	f043 0301 	orr.w	r3, r3, #1
 800510e:	81a3      	strh	r3, [r4, #12]
 8005110:	89a0      	ldrh	r0, [r4, #12]
 8005112:	4305      	orrs	r5, r0
 8005114:	81a5      	strh	r5, [r4, #12]
 8005116:	e7cd      	b.n	80050b4 <__smakebuf_r+0x18>
 8005118:	08004825 	.word	0x08004825

0800511c <__malloc_lock>:
 800511c:	4801      	ldr	r0, [pc, #4]	; (8005124 <__malloc_lock+0x8>)
 800511e:	f7ff bc78 	b.w	8004a12 <__retarget_lock_acquire_recursive>
 8005122:	bf00      	nop
 8005124:	2000456c 	.word	0x2000456c

08005128 <__malloc_unlock>:
 8005128:	4801      	ldr	r0, [pc, #4]	; (8005130 <__malloc_unlock+0x8>)
 800512a:	f7ff bc73 	b.w	8004a14 <__retarget_lock_release_recursive>
 800512e:	bf00      	nop
 8005130:	2000456c 	.word	0x2000456c

08005134 <_free_r>:
 8005134:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005136:	2900      	cmp	r1, #0
 8005138:	d044      	beq.n	80051c4 <_free_r+0x90>
 800513a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800513e:	9001      	str	r0, [sp, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	f1a1 0404 	sub.w	r4, r1, #4
 8005146:	bfb8      	it	lt
 8005148:	18e4      	addlt	r4, r4, r3
 800514a:	f7ff ffe7 	bl	800511c <__malloc_lock>
 800514e:	4a1e      	ldr	r2, [pc, #120]	; (80051c8 <_free_r+0x94>)
 8005150:	9801      	ldr	r0, [sp, #4]
 8005152:	6813      	ldr	r3, [r2, #0]
 8005154:	b933      	cbnz	r3, 8005164 <_free_r+0x30>
 8005156:	6063      	str	r3, [r4, #4]
 8005158:	6014      	str	r4, [r2, #0]
 800515a:	b003      	add	sp, #12
 800515c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005160:	f7ff bfe2 	b.w	8005128 <__malloc_unlock>
 8005164:	42a3      	cmp	r3, r4
 8005166:	d908      	bls.n	800517a <_free_r+0x46>
 8005168:	6825      	ldr	r5, [r4, #0]
 800516a:	1961      	adds	r1, r4, r5
 800516c:	428b      	cmp	r3, r1
 800516e:	bf01      	itttt	eq
 8005170:	6819      	ldreq	r1, [r3, #0]
 8005172:	685b      	ldreq	r3, [r3, #4]
 8005174:	1949      	addeq	r1, r1, r5
 8005176:	6021      	streq	r1, [r4, #0]
 8005178:	e7ed      	b.n	8005156 <_free_r+0x22>
 800517a:	461a      	mov	r2, r3
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	b10b      	cbz	r3, 8005184 <_free_r+0x50>
 8005180:	42a3      	cmp	r3, r4
 8005182:	d9fa      	bls.n	800517a <_free_r+0x46>
 8005184:	6811      	ldr	r1, [r2, #0]
 8005186:	1855      	adds	r5, r2, r1
 8005188:	42a5      	cmp	r5, r4
 800518a:	d10b      	bne.n	80051a4 <_free_r+0x70>
 800518c:	6824      	ldr	r4, [r4, #0]
 800518e:	4421      	add	r1, r4
 8005190:	1854      	adds	r4, r2, r1
 8005192:	42a3      	cmp	r3, r4
 8005194:	6011      	str	r1, [r2, #0]
 8005196:	d1e0      	bne.n	800515a <_free_r+0x26>
 8005198:	681c      	ldr	r4, [r3, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	6053      	str	r3, [r2, #4]
 800519e:	4421      	add	r1, r4
 80051a0:	6011      	str	r1, [r2, #0]
 80051a2:	e7da      	b.n	800515a <_free_r+0x26>
 80051a4:	d902      	bls.n	80051ac <_free_r+0x78>
 80051a6:	230c      	movs	r3, #12
 80051a8:	6003      	str	r3, [r0, #0]
 80051aa:	e7d6      	b.n	800515a <_free_r+0x26>
 80051ac:	6825      	ldr	r5, [r4, #0]
 80051ae:	1961      	adds	r1, r4, r5
 80051b0:	428b      	cmp	r3, r1
 80051b2:	bf04      	itt	eq
 80051b4:	6819      	ldreq	r1, [r3, #0]
 80051b6:	685b      	ldreq	r3, [r3, #4]
 80051b8:	6063      	str	r3, [r4, #4]
 80051ba:	bf04      	itt	eq
 80051bc:	1949      	addeq	r1, r1, r5
 80051be:	6021      	streq	r1, [r4, #0]
 80051c0:	6054      	str	r4, [r2, #4]
 80051c2:	e7ca      	b.n	800515a <_free_r+0x26>
 80051c4:	b003      	add	sp, #12
 80051c6:	bd30      	pop	{r4, r5, pc}
 80051c8:	20004570 	.word	0x20004570

080051cc <_read_r>:
 80051cc:	b538      	push	{r3, r4, r5, lr}
 80051ce:	4d07      	ldr	r5, [pc, #28]	; (80051ec <_read_r+0x20>)
 80051d0:	4604      	mov	r4, r0
 80051d2:	4608      	mov	r0, r1
 80051d4:	4611      	mov	r1, r2
 80051d6:	2200      	movs	r2, #0
 80051d8:	602a      	str	r2, [r5, #0]
 80051da:	461a      	mov	r2, r3
 80051dc:	f7fb fc2a 	bl	8000a34 <_read>
 80051e0:	1c43      	adds	r3, r0, #1
 80051e2:	d102      	bne.n	80051ea <_read_r+0x1e>
 80051e4:	682b      	ldr	r3, [r5, #0]
 80051e6:	b103      	cbz	r3, 80051ea <_read_r+0x1e>
 80051e8:	6023      	str	r3, [r4, #0]
 80051ea:	bd38      	pop	{r3, r4, r5, pc}
 80051ec:	20004578 	.word	0x20004578

080051f0 <_fstat_r>:
 80051f0:	b538      	push	{r3, r4, r5, lr}
 80051f2:	4d07      	ldr	r5, [pc, #28]	; (8005210 <_fstat_r+0x20>)
 80051f4:	2300      	movs	r3, #0
 80051f6:	4604      	mov	r4, r0
 80051f8:	4608      	mov	r0, r1
 80051fa:	4611      	mov	r1, r2
 80051fc:	602b      	str	r3, [r5, #0]
 80051fe:	f7fb fc41 	bl	8000a84 <_fstat>
 8005202:	1c43      	adds	r3, r0, #1
 8005204:	d102      	bne.n	800520c <_fstat_r+0x1c>
 8005206:	682b      	ldr	r3, [r5, #0]
 8005208:	b103      	cbz	r3, 800520c <_fstat_r+0x1c>
 800520a:	6023      	str	r3, [r4, #0]
 800520c:	bd38      	pop	{r3, r4, r5, pc}
 800520e:	bf00      	nop
 8005210:	20004578 	.word	0x20004578

08005214 <_isatty_r>:
 8005214:	b538      	push	{r3, r4, r5, lr}
 8005216:	4d06      	ldr	r5, [pc, #24]	; (8005230 <_isatty_r+0x1c>)
 8005218:	2300      	movs	r3, #0
 800521a:	4604      	mov	r4, r0
 800521c:	4608      	mov	r0, r1
 800521e:	602b      	str	r3, [r5, #0]
 8005220:	f7fb fb9d 	bl	800095e <_isatty>
 8005224:	1c43      	adds	r3, r0, #1
 8005226:	d102      	bne.n	800522e <_isatty_r+0x1a>
 8005228:	682b      	ldr	r3, [r5, #0]
 800522a:	b103      	cbz	r3, 800522e <_isatty_r+0x1a>
 800522c:	6023      	str	r3, [r4, #0]
 800522e:	bd38      	pop	{r3, r4, r5, pc}
 8005230:	20004578 	.word	0x20004578

08005234 <_init>:
 8005234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005236:	bf00      	nop
 8005238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800523a:	bc08      	pop	{r3}
 800523c:	469e      	mov	lr, r3
 800523e:	4770      	bx	lr

08005240 <_fini>:
 8005240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005242:	bf00      	nop
 8005244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005246:	bc08      	pop	{r3}
 8005248:	469e      	mov	lr, r3
 800524a:	4770      	bx	lr
